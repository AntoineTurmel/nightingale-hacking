/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

#include "nsISupports.idl"

interface nsIDOMWindow;
interface sbIMediaItem;
interface nsIArray;
interface nsIFile;
interface nsIRDFDataSource;

/**
* \interface sbIAlbumArtService
* \brief Interface to the album art management
* \sa sbICoverFetcher
*/
[scriptable, uuid(68b3c6f2-b5c2-49c5-a0dc-cf224bd27adf)]
interface sbIAlbumArtService : nsISupports
{
  /*
   * \brief Default image for no album art available.
   */
  readonly attribute AString defaultCover;
  
  /**
   * \brief Determines the download location based on preferences.
   *
   * \param aMediaItem item to check for location.
   * \param aExtension optional extension to add on to the file
   * \return a nsIFile of the location to download to minus an extension if
   *         aExtension is null, otherwise full location.
   */
  nsIFile getCoverDownloadLocation(in sbIMediaItem aMediaItem,
                                   [optional] in AString aExtension);
  
  /**
   * \brief Tries to get the album art for a mediaItem.
   * \param aMediaItem Media item to use
   * \param aCheckFileExists flag to check if the file exists, if the file
   *                         does not exist then DEFAULT_COVER will be returned.
   * \return URI of album art or DEFAULT_COVER if not found.
   */
  AString getAlbumArtWork(in sbIMediaItem aMediaItem,
                          in boolean aCheckFileExists);
  
  /**
   * \brief Update the album cover for all tracks in an album
   * \param aAlbumTitle Title of Album to update
   * \param aNewCover String URI of new cover
   */
  void updateAlbumCover(in AString aAlbumTitle,
                        in AString aNewCover);
  
  /**
   * \breif loads the fetchers into a list in order of priority.
   */
  void loadFetcherList();

  /**
   * \brief Returns an array of contract ids for the available fetchers.
   *        Use loadFetcherList to reload the list.
   * \returns nsIArray array of nsISupportsString
   */
  nsIArray getFetcherList();
  
  /**
   * \brief Turns on or off the album art scanner for the main library.
   * \param aTurnOn, if true turns on the scanner, false turns off.
   */
  void toggleScanner(in boolean aTurnOn);
};
