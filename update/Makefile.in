#
# BEGIN SONGBIRD GPL
# 
# This file is part of the Songbird web player.
#
# Copyright© 2006 POTI, Inc.
# http://www.songbirdnest.com
# 
# This file may be licensed under the terms of of the
# GNU General Public License Version 2 (the “GPL”).
# 
# Software distributed under the License is distributed 
# on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either 
# express or implied. See the GPL for the specific language 
# governing rights and limitations.
#
# You should have received a copy of the GPL along with this 
# program. If not, go to http://www.gnu.org/licenses/gpl.html
# or write to the Free Software Foundation, Inc., 
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
# 
# END SONGBIRD GPL
#

DEPTH = ..
topsrcdir = @top_srcdir@
srcdir = @srcdir@
VPATH = @srcdir@

include $(DEPTH)/build/autodefs.mk

#
# These scripts have problems with absolute paths, so use $(DEPTH) instead
#

ifndef STAGE_DIR
STAGE_DIR	= $(DEPTH)/update
endif

ifndef UPDATE_CHANNEL
UPDATE_CHANNEL = nightly
endif

SERVER_BASE = http://download.songbirdnest.com/songbird/$(UPDATE_CHANNEL)
SERVER_PATH = $(SERVER_BASE)/$(SB_BUILD_ID)-$(SB_BRANCHNAME)

ifdef DEBUG
DEBUG_EXT = .debug
endif

UPDATE_FILENAME_BASE = $(SB_APPNAME_LCASE)-$(SB_MILESTONE)-$(SB_BUILD_ID).$(SB_PLATFORM)-$(SB_ARCH)$(DEBUG_EXT)

#
# On OS X we need to diff from the 'Contents' subdir inside the app bundle.
#
ifeq (macosx,$(SB_PLATFORM))
APPBUNDLE_SUFFIX = /$(MACOSX_APPBUNDLE)
endif

# MUST specify a target, no default rule
default: all

complete:: complete-patch complete-snippet

partial:: partial-patch partial-snippet

complete-patch::
	@$(MKDIR) -p $(STAGE_DIR)
	MAR=$(MAR) \
    $(MOZSDK_SCRIPTS_DIR)/make_full_update.sh \
    "$(STAGE_DIR)/$(UPDATE_FILENAME_BASE).mar" \
    "$(DEPTH)/$(DISTDIRNAME)$(APPBUNDLE_SUFFIX)"

complete-snippet::
	@$(MKDIR) -p $(STAGE_DIR)
	SHA1SUM=$(SHA1SUM) $(PERL) $(SCRIPTS_DIR)/generate-update-snippet.pl \
    $(STAGE_DIR)/$(UPDATE_FILENAME_BASE).mar \
    "complete" \
    $(STAGE_DIR)/$(UPDATE_FILENAME_BASE).snippet \
    "$(SERVER_PATH)/$(UPDATE_FILENAME_BASE).mar" \
    $(SB_BUILD_ID) \
    $(SB_MILESTONE) \
    "sha1" \
    $(NULL)

#
# To generate partials you need to set the following variables:
#
# SRC_BUILD:    the mar or directory containing the unpacked pre-update build
# DST_BUILD:    the mar or directory containing the unpacked post-update build
# SRC_BUILD_ID: the build ID of the pre-update build
# DST_BUILD_ID: the build ID of the post-update build
# DST_BUILD_MS: the milestone of the post-update build
#

ifeq (.mar,$(suffix $(SRC_BUILD)))
PARTIAL_PATCH_TASK = partial-patch-unwrap
else
PARTIAL_PATCH_TASK = partial-patch-no-unwrap
endif

partial-patch:: $(PARTIAL_PATCH_TASK)

partial-patch-unwrap::
	@$(MKDIR) -p $(STAGE_DIR)/from
	cd $(STAGE_DIR)/from && MAR=$(MAR) $(MOZSDK_SCRIPTS_DIR)/unwrap_full_update.sh "../$(SRC_BUILD)"
	@$(MKDIR) -p $(STAGE_DIR)/to
	cd $(STAGE_DIR)/to && MAR=$(MAR) $(MOZSDK_SCRIPTS_DIR)/unwrap_full_update.sh "../$(DST_BUILD)"
	MAR=$(MAR) MBSDIFF=$(MBSDIFF) \
    $(MOZSDK_SCRIPTS_DIR)/make_incremental_update.sh \
    "$(STAGE_DIR)/$(UPDATE_FILENAME_BASE).$(SRC_BUILD_ID)-$(DST_BUILD_ID).mar" \
    "$(STAGE_DIR)/from" \
    "$(STAGE_DIR)/to" \
    $(NULL)
	@$(RM) -rf $(STAGE_DIR)/from
	@$(RM) -rf $(STAGE_DIR)/to

partial-patch-no-unwrap::
	@$(MKDIR) -p $(STAGE_DIR)
	MAR=$(MAR) MBSDIFF=$(MBSDIFF) \
    $(MOZSDK_SCRIPTS_DIR)/make_incremental_update.sh \
    "$(STAGE_DIR)/$(UPDATE_FILENAME_BASE).$(SRC_BUILD_ID)-$(DST_BUILD_ID).mar" \
    "$(SRC_BUILD)" \
    "$(DST_BUILD)"

partial-snippet::
	@$(MKDIR) -p $(STAGE_DIR)
	SHA1SUM=$(SHA1SUM) $(PERL) $(SCRIPTS_DIR)/generate-update-snippet.pl \
    $(STAGE_DIR)/$(UPDATE_FILENAME_BASE).$(SRC_BUILD_ID)-$(DST_BUILD_ID).mar \
    "partial" \
    $(STAGE_DIR)/$(UPDATE_FILENAME_BASE).$(SRC_BUILD_ID)-$(DST_BUILD_ID).snippet \
    "$(SERVER_PATH)/$(UPDATE_FILENAME_BASE).$(SRC_BUILD_ID)-$(DST_BUILD_ID).mar" \
    $(DST_BUILD_ID) \
    $(DST_BUILD_MS) \
    "sha1" \
    $(NULL)

include $(topsrcdir)/build/rules.mk
