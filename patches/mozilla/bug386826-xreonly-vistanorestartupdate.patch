Index: xulrunner/app/nsXULRunnerApp.cpp
===================================================================
RCS file: /cvsroot/mozilla/xulrunner/app/nsXULRunnerApp.cpp,v
retrieving revision 1.39
diff -u -p -r1.39 nsXULRunnerApp.cpp
--- xulrunner/app/nsXULRunnerApp.cpp	31 Dec 2007 15:15:46 -0000	1.39
+++ xulrunner/app/nsXULRunnerApp.cpp	1 Feb 2008 18:31:15 -0000
@@ -406,34 +406,27 @@ int main(int argc, char* argv[])
     }
   }
 
-  const char *appDataFile = PR_GetEnv("XUL_APP_FILE");
-
-  if (!(appDataFile && *appDataFile)) {
-    if (argc < 2) {
+  if (argc < 2) {
+    Usage(argv[0]);
+    return 1;
+  }
+  
+  if (IsArg(argv[1], "app")) {
+    if (argc == 2) {
       Usage(argv[0]);
       return 1;
     }
 
-    if (IsArg(argv[1], "app")) {
-      if (argc == 2) {
-        Usage(argv[0]);
-        return 1;
-      }
-      argv[1] = argv[0];
-      ++argv;
-      --argc;
-    }
-
-    appDataFile = argv[1];
     argv[1] = argv[0];
     ++argv;
     --argc;
-
-    static char kAppEnv[MAXPATHLEN];
-    PR_snprintf(kAppEnv, MAXPATHLEN, "XUL_APP_FILE=%s", appDataFile);
-    PR_SetEnv(kAppEnv);
   }
 
+  const char *appDataFile = argv[1];
+  argv[1] = argv[0];
+  ++argv;
+  --argc;
+
   nsCOMPtr<nsILocalFile> appDataLF;
   nsresult rv = XRE_GetFileFromPath(appDataFile, getter_AddRefs(appDataLF));
   if (NS_FAILED(rv)) {
@@ -447,5 +440,7 @@ int main(int argc, char* argv[])
     return 2;
   }
 
+  XRE_SetAppDataFile(appDataLF);
+
   return XRE_main(argc, argv, appData);
 }
Index: toolkit/xre/nsAppRunner.cpp
===================================================================
RCS file: /cvsroot/mozilla/toolkit/xre/nsAppRunner.cpp,v
retrieving revision 1.205
diff -u -p -r1.205 nsAppRunner.cpp
--- toolkit/xre/nsAppRunner.cpp	26 Jan 2008 17:26:26 -0000	1.205
+++ toolkit/xre/nsAppRunner.cpp	1 Feb 2008 18:31:16 -0000
@@ -1602,7 +1602,7 @@ static nsresult LaunchChild(nsINativeApp
   // if supported by the platform.  Otherwise, use NSPR.
  
   if (aBlankCommandLine) {
-    gRestartArgc = 1;
+    gRestartArgc = 1 + (gRestartArgc - gArgc);
     gRestartArgv[gRestartArgc] = nsnull;
   }
 
@@ -2290,34 +2290,6 @@ static void RemoveComponentRegistries(ns
   file->Remove(PR_FALSE);
 }
 
-// To support application initiated restart via nsIAppStartup.quit, we
-// need to save various environment variables, and then restore them
-// before re-launching the application.
-
-static struct {
-  const char *name;
-  char *value;
-} gSavedVars[] = {
-  {"XUL_APP_FILE", nsnull}
-};
-
-static void SaveStateForAppInitiatedRestart()
-{
-  for (size_t i = 0; i < NS_ARRAY_LENGTH(gSavedVars); ++i) {
-    const char *s = PR_GetEnv(gSavedVars[i].name);
-    if (s)
-      gSavedVars[i].value = PR_smprintf("%s=%s", gSavedVars[i].name, s);
-  }
-}
-
-static void RestoreStateForAppInitiatedRestart()
-{
-  for (size_t i = 0; i < NS_ARRAY_LENGTH(gSavedVars); ++i) {
-    if (gSavedVars[i].value)
-      PR_SetEnv(gSavedVars[i].value);
-  }
-}
-
 #ifdef MOZ_CRASHREPORTER
 // When we first initialize the crash reporter we don't have a profile,
 // so we set the minidump path to $TEMP.  Once we have a profile,
@@ -2345,6 +2317,12 @@ static void MakeOrSetMinidumpPath(nsIFil
 #endif
 
 const nsXREAppData* gAppData = nsnull;
+nsILocalFile* gAppDataFile = nsnull;
+ 
+void XRE_SetAppDataFile(nsILocalFile* aAppDataFile)
+{
+  SetStrongPtr(gAppDataFile, aAppDataFile);
+}
 
 #if defined(XP_OS2)
 // because we use early returns, we use a stack-based helper to un-set the OS2 FP handler
@@ -2715,14 +2693,28 @@ XRE_main(int argc, char* argv[], const n
   PR_SetEnv("MOZ_LAUNCHED_CHILD=");
 
   gRestartArgc = gArgc;
-  gRestartArgv = (char**) malloc(sizeof(char*) * (gArgc + 1));
+  if (gAppDataFile) {
+    gRestartArgc += 2;
+  }
+  gRestartArgv = (char**) malloc(sizeof(char*) * (gRestartArgc + 1));
   if (!gRestartArgv) return 1;
-
-  int i;
-  for (i = 0; i < gArgc; ++i) {
-    gRestartArgv[i] = gArgv[i];
+ 
+  int i = 0;
+  int j = 0;
+  if (gAppDataFile) {
+    // The first argument is the path to the executable. It needs to remain the first argument.
+    if (gArgc) {
+      gRestartArgv[j++] = gArgv[i++];
+    }
+    nsCAutoString iniPath;
+    gAppDataFile->GetNativePath(iniPath);
+    gRestartArgv[j++] = "--app";
+    gRestartArgv[j++] = strdup(iniPath.get());
+  }
+  while (i < gArgc) {
+    gRestartArgv[j++] = gArgv[i++];
   }
-  gRestartArgv[gArgc] = nsnull;
+  gRestartArgv[gRestartArgc] = nsnull;
 
 #if defined(XP_OS2)
   PRBool StartOS2App(int aArgc, char **aArgv);
@@ -3175,8 +3167,6 @@ XRE_main(int argc, char* argv[], const n
         }
 
         if (!upgraded && !needsRestart) {
-          SaveStateForAppInitiatedRestart();
-
           // clear out any environment variables which may have been set 
           // during the relaunch process now that we know we won't be relaunching.
           PR_SetEnv("XRE_PROFILE_PATH=");
@@ -3185,7 +3175,6 @@ XRE_main(int argc, char* argv[], const n
           PR_SetEnv("XRE_START_OFFLINE=");
           PR_SetEnv("XRE_IMPORT_PROFILES=");
           PR_SetEnv("NO_EM_RESTART=");
-          PR_SetEnv("XUL_APP_FILE=");
           PR_SetEnv("XRE_BINARY_PATH=");
 
 #ifdef XP_MACOSX
@@ -3276,10 +3265,7 @@ XRE_main(int argc, char* argv[], const n
 
     // Restart the app after XPCOM has been shut down cleanly. 
     if (needsRestart) {
-      if (appInitiatedRestart) {
-        RestoreStateForAppInitiatedRestart();
-      }
-      else {
+      if (!appInitiatedRestart) {
         char* noEMRestart = PR_GetEnv("NO_EM_RESTART");
         if (noEMRestart && *noEMRestart) {
           PR_SetEnv("NO_EM_RESTART=1");
Index: toolkit/xre/nsXULAppAPI.h
===================================================================
RCS file: /cvsroot/mozilla/toolkit/xre/nsXULAppAPI.h,v
retrieving revision 1.27
diff -u -p -r1.27 nsXULAppAPI.h
--- toolkit/xre/nsXULAppAPI.h	15 Jan 2008 15:14:00 -0000	1.27
+++ toolkit/xre/nsXULAppAPI.h	1 Feb 2008 18:31:16 -0000
@@ -424,4 +424,13 @@ XRE_API(nsresult,
 XRE_API(void,
         XRE_FreeAppData, (nsXREAppData *aAppData))
 
+/**
+ * Stores the  application.ini file to pass as an argument during a
+ * possible restart. It should be called before calling XRE_main().
+ *
+ * @param aINIFile The application.ini file to store.
+ */
+XRE_API(void,
+        XRE_SetAppDataFile, (nsILocalFile* aINIFile))
+
 #endif // _nsXULAppAPI_h__
