Index: xpcom/build/nsXPCOMPrivate.h
===================================================================
RCS file: /cvsroot/mozilla/xpcom/build/nsXPCOMPrivate.h,v
retrieving revision 1.45
diff -u -p -r1.45 nsXPCOMPrivate.h
--- xpcom/build/nsXPCOMPrivate.h	6 Aug 2007 14:34:02 -0000	1.45
+++ xpcom/build/nsXPCOMPrivate.h	6 Aug 2007 20:43:37 -0000
@@ -83,6 +83,8 @@ typedef PRUnichar* (* StringCloneDataFun
 typedef nsresult   (* StringSetDataFunc)(nsAString&, const PRUnichar*, PRUint32);
 typedef nsresult   (* StringSetDataRangeFunc)(nsAString&, PRUint32, PRUint32, const PRUnichar*, PRUint32);
 typedef nsresult   (* StringCopyFunc)(nsAString &, const nsAString &);
+typedef void       (* StringSetIsVoidFunc)(nsAString &);
+typedef PRBool     (* StringGetIsVoidFunc)(const nsAString &);
 
 typedef nsresult   (* CStringContainerInitFunc)(nsCStringContainer&);
 typedef nsresult   (* CStringContainerInit2Func)(nsCStringContainer&, const char *, PRUint32, PRUint32);
@@ -93,6 +95,8 @@ typedef char*      (* CStringCloneDataFu
 typedef nsresult   (* CStringSetDataFunc)(nsACString&, const char*, PRUint32);
 typedef nsresult   (* CStringSetDataRangeFunc)(nsACString&, PRUint32, PRUint32, const char*, PRUint32);
 typedef nsresult   (* CStringCopyFunc)(nsACString &, const nsACString &);
+typedef void       (* CStringSetIsVoidFunc)(nsACString &);
+typedef PRBool     (* CStringGetIsVoidFunc)(const nsACString &);
 
 typedef nsresult   (* CStringToUTF16)(const nsACString &, nsCStringEncoding, nsAString &);
 typedef nsresult   (* UTF16ToCString)(const nsAString &, nsCStringEncoding, nsACString &);
@@ -185,6 +189,10 @@ typedef struct XPCOMFunctions{
     InvokeByIndexFunc invokeByIndexFunc;
     CycleCollectorFunc cycleSuspectFunc;
     CycleCollectorFunc cycleForgetFunc;
+    StringSetIsVoidFunc stringSetIsVoid;
+    StringGetIsVoidFunc stringGetIsVoid;
+    CStringSetIsVoidFunc cstringSetIsVoid;
+    CStringGetIsVoidFunc cstringGetIsVoid;
 
 } XPCOMFunctions;
 
@@ -198,9 +206,9 @@ NS_GetFrozenFunctions(XPCOMFunctions *en
 
 /* XPCOM Specific Defines
  *
- * XPCOM_DLL              - name of the loadable xpcom library on disk. 
+ * XPCOM_DLL              - name of the loadable xpcom library on disk.
  * XUL_DLL                - name of the loadable XUL library on disk
- * XPCOM_SEARCH_KEY       - name of the environment variable that can be 
+ * XPCOM_SEARCH_KEY       - name of the environment variable that can be
  *                          modified to include additional search paths.
  * GRE_CONF_NAME          - Name of the GRE Configuration file
  */
@@ -227,7 +235,7 @@ NS_GetFrozenFunctions(XPCOMFunctions *en
 #define XPCOM_DLL "libxpcom"MOZ_DLL_SUFFIX
 
 // you have to love apple..
-#ifdef XP_MACOSX  
+#ifdef XP_MACOSX
 #define XPCOM_SEARCH_KEY  "DYLD_LIBRARY_PATH"
 #define GRE_FRAMEWORK_NAME "XUL.framework"
 #define XUL_DLL            "XUL"
Index: xpcom/build/nsXPCOMStrings.cpp
===================================================================
RCS file: /cvsroot/mozilla/xpcom/build/nsXPCOMStrings.cpp,v
retrieving revision 1.3
diff -u -p -r1.3 nsXPCOMStrings.cpp
--- xpcom/build/nsXPCOMStrings.cpp	8 Jul 2007 07:08:50 -0000	1.3
+++ xpcom/build/nsXPCOMStrings.cpp	6 Aug 2007 20:43:37 -0000
@@ -189,6 +189,18 @@ NS_StringCopy(nsAString &aDest, const ns
   return NS_OK; // XXX report errors
 }
 
+XPCOM_API(void)
+NS_StringSetIsVoid(nsAString &aStr)
+{
+  aStr.SetIsVoid(PR_TRUE);
+}
+
+XPCOM_API(PRBool)
+NS_StringGetIsVoid(const nsAString &aStr)
+{
+  return aStr.IsVoid();
+}
+
 /* ------------------------------------------------------------------------- */
 
 XPCOM_API(nsresult)
@@ -336,6 +348,18 @@ NS_CStringCopy(nsACString &aDest, const 
   return NS_OK; // XXX report errors
 }
 
+XPCOM_API(void)
+NS_CStringSetIsVoid(nsACString &aStr)
+{
+  aStr.SetIsVoid(PR_TRUE);
+}
+
+XPCOM_API(PRBool)
+NS_CStringGetIsVoid(const nsACString &aStr)
+{
+  return aStr.IsVoid();
+}
+
 /* ------------------------------------------------------------------------- */
 
 XPCOM_API(nsresult)
Index: xpcom/glue/nsStringAPI.cpp
===================================================================
RCS file: /cvsroot/mozilla/xpcom/glue/nsStringAPI.cpp,v
retrieving revision 3.10
diff -u -p -r3.10 nsStringAPI.cpp
--- xpcom/glue/nsStringAPI.cpp	11 Jul 2007 17:26:12 -0000	3.10
+++ xpcom/glue/nsStringAPI.cpp	6 Aug 2007 20:43:37 -0000
@@ -113,6 +113,22 @@ nsAString::SetLength(PRUint32 aLen)
 }
 
 void
+nsAString::SetIsVoid(PRBool val)
+{
+  if (val)
+    NS_StringSetIsVoid(*this);
+  else
+    if (IsVoid())
+      Truncate();
+}
+
+PRBool
+nsAString::IsVoid() const
+{
+  return NS_StringGetIsVoid(*this);
+}
+
+void
 nsAString::AssignLiteral(const char *aStr)
 {
   PRUint32 len = strlen(aStr);
@@ -564,6 +580,22 @@ nsACString::SetLength(PRUint32 aLen)
 }
 
 void
+nsACString::SetIsVoid(PRBool val)
+{
+  if (val)
+    NS_CStringSetIsVoid(*this);
+  else
+    if (IsVoid())
+      Truncate();
+}
+
+PRBool
+nsACString::IsVoid() const
+{
+  return NS_CStringGetIsVoid(*this);
+}
+
+void
 nsACString::StripChars(const char *aSet)
 {
   nsCString copy(*this);
Index: xpcom/glue/nsStringAPI.h
===================================================================
RCS file: /cvsroot/mozilla/xpcom/glue/nsStringAPI.h,v
retrieving revision 3.12
diff -u -p -r3.12 nsStringAPI.h
--- xpcom/glue/nsStringAPI.h	8 Jul 2007 07:08:51 -0000	3.12
+++ xpcom/glue/nsStringAPI.h	6 Aug 2007 20:43:38 -0000
@@ -112,6 +112,9 @@ public:
     return Length() == 0;
   }
 
+  NS_HIDDEN_(void) SetIsVoid(PRBool);
+  NS_HIDDEN_(PRBool) IsVoid() const;
+
   NS_HIDDEN_(void) Assign(const self_type& aString)
   {
     NS_StringCopy(*this, aString);
@@ -387,6 +390,9 @@ public:
     return Length() == 0;
   }
 
+  NS_HIDDEN_(void) SetIsVoid(PRBool);
+  NS_HIDDEN_(PRBool) IsVoid() const;
+
   NS_HIDDEN_(void) Assign(const self_type& aString)
   {
     NS_CStringCopy(*this, aString);
Index: xpcom/glue/standalone/nsXPCOMGlue.cpp
===================================================================
RCS file: /cvsroot/mozilla/xpcom/glue/standalone/nsXPCOMGlue.cpp,v
retrieving revision 1.49
diff -u -p -r1.49 nsXPCOMGlue.cpp
--- xpcom/glue/standalone/nsXPCOMGlue.cpp	6 Aug 2007 14:34:04 -0000	1.49
+++ xpcom/glue/standalone/nsXPCOMGlue.cpp	6 Aug 2007 20:43:38 -0000
@@ -305,6 +305,20 @@ NS_StringCopy(nsAString &aDest, const ns
     return xpcomFunctions.stringCopy(aDest, aSrc);
 }
 
+XPCOM_API(void)
+NS_StringSetIsVoid(nsAString &aStr)
+{
+    if (xpcomFunctions.stringSetIsVoid)
+        xpcomFunctions.stringSetIsVoid(aStr);
+}
+
+XPCOM_API(PRBool)
+NS_StringGetIsVoid(const nsAString &aStr)
+{
+    if (!xpcomFunctions.stringGetIsVoid)
+        return PR_FALSE;
+    return xpcomFunctions.stringGetIsVoid(aStr);
+}
 
 XPCOM_API(nsresult)
 NS_CStringContainerInit(nsCStringContainer &aStr)
@@ -385,6 +399,21 @@ NS_CStringCopy(nsACString &aDest, const 
     return xpcomFunctions.cstringCopy(aDest, aSrc);
 }
 
+XPCOM_API(void)
+NS_CStringSetIsVoid(nsACString &aStr)
+{
+    if (xpcomFunctions.cstringSetIsVoid)
+        xpcomFunctions.cstringSetIsVoid(aStr);
+}
+
+XPCOM_API(PRBool)
+NS_CStringGetIsVoid(const nsACString &aStr)
+{
+    if (!xpcomFunctions.cstringGetIsVoid)
+        return PR_FALSE;
+    return xpcomFunctions.cstringGetIsVoid(aStr);
+}
+
 XPCOM_API(nsresult)
 NS_CStringToUTF16(const nsACString &aSrc, nsCStringEncoding aSrcEncoding, nsAString &aDest)
 {
Index: xpcom/string/public/nsXPCOMStrings.h
===================================================================
RCS file: /cvsroot/mozilla/xpcom/string/public/nsXPCOMStrings.h,v
retrieving revision 1.1
diff -u -p -r1.1 nsXPCOMStrings.h
--- xpcom/string/public/nsXPCOMStrings.h	3 May 2006 16:11:00 -0000	1.1
+++ xpcom/string/public/nsXPCOMStrings.h	6 Aug 2007 20:43:38 -0000
@@ -60,6 +60,8 @@
 # define NS_StringSetData                 NS_StringSetData_P
 # define NS_StringSetDataRange            NS_StringSetDataRange_P
 # define NS_StringCopy                    NS_StringCopy_P
+# define NS_StringSetIsVoid               NS_StringSetIsVoid_P
+# define NS_StringGetIsVoid               NS_StringGetIsVoid_P
 # define NS_CStringContainerInit          NS_CStringContainerInit_P
 # define NS_CStringContainerInit2         NS_CStringContainerInit2_P
 # define NS_CStringContainerFinish        NS_CStringContainerFinish_P
@@ -69,6 +71,8 @@
 # define NS_CStringSetData                NS_CStringSetData_P
 # define NS_CStringSetDataRange           NS_CStringSetDataRange_P
 # define NS_CStringCopy                   NS_CStringCopy_P
+# define NS_CStringSetIsVoid              NS_CStringSetIsVoid_P
+# define NS_CStringGetIsVoid              NS_CStringGetIsVoid_P
 # define NS_CStringToUTF16                NS_CStringToUTF16_P
 # define NS_UTF16ToCString                NS_UTF16ToCString_P
 #endif
@@ -445,6 +449,24 @@ NS_StringCutData(nsAString &aStr, PRUint
   return NS_StringSetDataRange(aStr, aCutOffset, aCutLength, nsnull, 0);
 }
 
+/**
+ * NS_StringSetIsVoid
+ *
+ * This function marks a string as being a "void string".  Any data in the
+ * string will be lost.  To unset the void status, set the string data.
+ */
+XPCOM_API(void)
+NS_StringSetIsVoid(nsAString& aStr);
+
+/**
+ * NS_StringGetIsVoid
+ *
+ * This function provides a way to test if a string is a "void string", as
+ * marked by NS_StringSetIsVoid.
+ */
+XPCOM_API(PRBool)
+NS_StringGetIsVoid(const nsAString& aStr);
+
 /* ------------------------------------------------------------------------- */
 
 /**
@@ -750,6 +772,24 @@ NS_CStringCutData(nsACString &aStr, PRUi
   return NS_CStringSetDataRange(aStr, aCutOffset, aCutLength, nsnull, 0);
 }
 
+/**
+ * NS_CStringSetIsVoid
+ *
+ * This function marks a string as being a "void string".  Any data in the
+ * string will be lost.  To unset the void status, set the string data.
+ */
+XPCOM_API(void)
+NS_CStringSetIsVoid(nsACString& aStr);
+
+/**
+ * NS_CStringGetIsVoid
+ *
+ * This function provides a way to test if a string is a "void string", as
+ * marked by NS_CStringSetIsVoid.
+ */
+XPCOM_API(PRBool)
+NS_CStringGetIsVoid(const nsACString& aStr);
+
 /* ------------------------------------------------------------------------- */
 
 /**
Index: xpcom/stub/nsXPComStub.cpp
===================================================================
RCS file: /cvsroot/mozilla/xpcom/stub/nsXPComStub.cpp,v
retrieving revision 1.12
diff -u -p -r1.12 nsXPComStub.cpp
--- xpcom/stub/nsXPComStub.cpp	6 Aug 2007 14:34:04 -0000	1.12
+++ xpcom/stub/nsXPComStub.cpp	6 Aug 2007 20:43:38 -0000
@@ -44,8 +44,8 @@
 
 /**
  * Private Method to register an exit routine.  This method
- * used to allow you to setup a callback that will be called from 
- * the NS_ShutdownXPCOM function after all services and 
+ * used to allow you to setup a callback that will be called from
+ * the NS_ShutdownXPCOM function after all services and
  * components have gone away. It was fatally flawed in that the component
  * DLL could be released before the exit function was called; it is now a
  * stub implementation that does nothing.
@@ -116,7 +116,11 @@ static const XPCOMFunctions kFrozenFunct
     &NS_DestroyXPTCallStub_P,
     &NS_InvokeByIndex_P,
     &NS_CycleCollectorSuspect_P,
-    &NS_CycleCollectorForget_P
+    &NS_CycleCollectorForget_P,
+    &NS_StringSetIsVoid_P,
+    &NS_StringGetIsVoid_P,
+    &NS_CStringSetIsVoid_P,
+    &NS_CStringGetIsVoid_P
 };
 
 EXPORT_XPCOM_API(nsresult)
@@ -373,7 +377,7 @@ NS_StringContainerInit2(nsStringContaine
                         const PRUnichar   *aData,
                         PRUint32           aDataLength,
                         PRUint32           aFlags)
-{   
+{
   return NS_StringContainerInit2_P(aStr, aData, aDataLength, aFlags);
 }
 
@@ -427,6 +431,20 @@ NS_StringCopy(nsAString &aDest, const ns
   return NS_StringCopy_P(aDest, aSrc);
 }
 
+#undef NS_StringSetIsVoid
+EXPORT_XPCOM_API(void)
+NS_StringSetIsVoid(nsAString &aStr)
+{
+  NS_StringSetIsVoid_P(aStr);
+}
+
+#undef NS_StringGetIsVoid
+EXPORT_XPCOM_API(PRBool)
+NS_StringGetIsVoid(const nsAString &aStr)
+{
+  return NS_StringGetIsVoid_P(aStr);
+}
+
 #undef NS_CStringContainerInit
 EXPORT_XPCOM_API(nsresult)
 NS_CStringContainerInit(nsCStringContainer &aStr)
@@ -440,7 +458,7 @@ NS_CStringContainerInit2(nsCStringContai
                          const char         *aData,
                          PRUint32            aDataLength,
                          PRUint32            aFlags)
-{   
+{
   return NS_CStringContainerInit2_P(aStr, aData, aDataLength, aFlags);
 }
 
@@ -494,6 +512,20 @@ NS_CStringCopy(nsACString &aDest, const 
   return NS_CStringCopy_P(aDest, aSrc);
 }
 
+#undef NS_CStringSetIsVoid
+EXPORT_XPCOM_API(void)
+NS_CStringSetIsVoid(nsACString &aStr)
+{
+  NS_CStringSetIsVoid_P(aStr);
+}
+
+#undef NS_CStringGetIsVoid
+EXPORT_XPCOM_API(PRBool)
+NS_CStringGetIsVoid(const nsACString &aStr)
+{
+  return NS_CStringGetIsVoid_P(aStr);
+}
+
 #undef NS_CStringToUTF16
 EXPORT_XPCOM_API(nsresult)
 NS_CStringToUTF16(const nsACString &aSrc, nsCStringEncoding aSrcEncoding, nsAString &aDest)
Index: xpcom/tests/Makefile.in
===================================================================
RCS file: /cvsroot/mozilla/xpcom/tests/Makefile.in,v
retrieving revision 1.99
diff -u -p -r1.99 Makefile.in
--- xpcom/tests/Makefile.in	27 Mar 2007 03:38:21 -0000	1.99
+++ xpcom/tests/Makefile.in	6 Aug 2007 20:43:38 -0000
@@ -92,6 +92,12 @@ CPPSRCS += \
 		$(NULL)
 endif
 
+ifndef MOZILLA_INTERNAL_API
+CPPSRCS += \
+		TestStringAPI.cpp \
+		$(NULL)
+endif
+
 #CPPSRCS		+= TimerTest.cpp
 
 SIMPLE_PROGRAMS	= $(CPPSRCS:.cpp=$(BIN_SUFFIX))
Index: xpcom/tests/TestStringAPI.cpp
===================================================================
RCS file: xpcom/tests/TestStringAPI.cpp
diff -N xpcom/tests/TestStringAPI.cpp
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ xpcom/tests/TestStringAPI.cpp	6 Aug 2007 20:43:38 -0000
@@ -0,0 +1,134 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is XPCOM external strings test.
+ *
+ * The Initial Developer of the Original Code is
+ * Mook <mook.moz@gmail.com>.
+ * Portions created by the Initial Developer are Copyright (C) 2007
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include <cstdio>
+#include "nsStringAPI.h"
+
+#define CHECK(x) \
+  _doCheck(x, #x, __LINE__)
+
+int _doCheck(bool cond, const char* msg, int line) {
+  if (cond) return 0;
+  fprintf(stderr, "FAIL: line %d: %s\n", line, msg);
+  return 1;
+}
+
+int testEmpty() {
+  nsString s;
+  return CHECK(0 == s.Length()) +
+         CHECK(s.IsEmpty());
+}
+
+int testAccess() {
+  nsString s;
+  s.Assign(NS_LITERAL_STRING("hello"));
+  int res = CHECK(5 == s.Length()) +
+            CHECK(s.EqualsLiteral("hello"));
+  const PRUnichar *it, *end;
+  int len = s.BeginReading(&it, &end);
+  res += CHECK(5 == len);
+  res += CHECK(PRUnichar('h') == it[0]) +
+         CHECK(PRUnichar('e') == it[1]) +
+         CHECK(PRUnichar('l') == it[2]) +
+         CHECK(PRUnichar('l') == it[3]) +
+         CHECK(PRUnichar('o') == it[4]) +
+         CHECK(it + len == end);
+  res += CHECK(s[0] == s.First());
+  for (int i = 0; i < len; ++i) {
+    res += CHECK(s[i] == it[i]);
+    res += CHECK(s[i] == s.CharAt(i));
+  }
+  res += CHECK(it == s.BeginReading());
+  res += CHECK(end == s.EndReading());
+  return res;
+}
+
+int testWrite() {
+  nsString s(NS_LITERAL_STRING("xyzz"));
+  PRUnichar *begin, *end;
+  int res = CHECK(4 == s.Length());
+  PRUint32 len = s.BeginWriting(&begin, &end, 5);
+  res += CHECK(5 == s.Length()) +
+         CHECK(5 == len) +
+         CHECK(end == begin + 5) +
+         CHECK(begin == s.BeginWriting()) +
+         CHECK(end == s.EndWriting());
+  begin[4] = PRUnichar('y');
+  res += CHECK(s.Equals(NS_LITERAL_STRING("xyzzy")));
+  s.SetLength(4);
+  res += CHECK(4 == s.Length()) +
+         CHECK(s.Equals(NS_LITERAL_STRING("xyzz"))) +
+         CHECK(!s.Equals(NS_LITERAL_STRING("xyzzy"))) +
+         CHECK(!s.IsEmpty());
+  s.Truncate();
+  res += CHECK(0 == s.Length()) +
+         CHECK(s.IsEmpty());
+  const PRUnichar sample[] = { 's', 'a', 'm', 'p', 'l', 'e', '\0' };
+  s.Assign(sample);
+  res += CHECK(s.EqualsLiteral("sample"));
+  s.Assign(sample, 4);
+  res += CHECK(s.EqualsLiteral("samp"));
+  s.Assign(PRUnichar('q'));
+  res += CHECK(s.EqualsLiteral("q"));
+  return res;
+}
+
+int testVoid() {
+  nsString s;
+  int ret = CHECK(!s.IsVoid());
+  s.SetIsVoid(PR_FALSE);
+  ret += CHECK(!s.IsVoid());
+  s.SetIsVoid(PR_TRUE);
+  ret += CHECK(s.IsVoid());
+  s.SetIsVoid(PR_FALSE);
+  ret += CHECK(!s.IsVoid());
+  s.SetIsVoid(PR_TRUE);
+  s.AssignLiteral("hello");
+  ret += CHECK(!s.IsVoid());
+  return ret;
+}
+
+int main() {
+  int rv = 0;
+  rv += testEmpty();
+  rv += testAccess();
+  rv += testWrite();
+  rv += testVoid();
+  if (0 == rv) {
+    fprintf(stderr, "PASS: StringAPI tests\n");
+  }
+  return rv;
+}
