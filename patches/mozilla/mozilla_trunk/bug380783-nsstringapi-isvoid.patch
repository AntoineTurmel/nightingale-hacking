Index: xpcom/build/nsXPCOMPrivate.h
===================================================================
RCS file: /cvsroot/mozilla/xpcom/build/nsXPCOMPrivate.h,v
retrieving revision 1.45
diff -u -8 -p -r1.45 nsXPCOMPrivate.h
--- xpcom/build/nsXPCOMPrivate.h	6 Aug 2007 14:34:02 -0000	1.45
+++ xpcom/build/nsXPCOMPrivate.h	6 Aug 2007 20:32:21 -0000
@@ -78,26 +78,30 @@ typedef nsresult   (* StringContainerIni
 typedef nsresult   (* StringContainerInit2Func)(nsStringContainer&, const PRUnichar *, PRUint32, PRUint32);
 typedef void       (* StringContainerFinishFunc)(nsStringContainer&);
 typedef PRUint32   (* StringGetDataFunc)(const nsAString&, const PRUnichar**, PRBool*);
 typedef PRUint32   (* StringGetMutableDataFunc)(nsAString&, PRUint32, PRUnichar**);
 typedef PRUnichar* (* StringCloneDataFunc)(const nsAString&);
 typedef nsresult   (* StringSetDataFunc)(nsAString&, const PRUnichar*, PRUint32);
 typedef nsresult   (* StringSetDataRangeFunc)(nsAString&, PRUint32, PRUint32, const PRUnichar*, PRUint32);
 typedef nsresult   (* StringCopyFunc)(nsAString &, const nsAString &);
+typedef void       (* StringSetIsVoidFunc)(nsAString &);
+typedef PRBool     (* StringGetIsVoidFunc)(const nsAString &);

 typedef nsresult   (* CStringContainerInitFunc)(nsCStringContainer&);
 typedef nsresult   (* CStringContainerInit2Func)(nsCStringContainer&, const char *, PRUint32, PRUint32);
 typedef void       (* CStringContainerFinishFunc)(nsCStringContainer&);
 typedef PRUint32   (* CStringGetDataFunc)(const nsACString&, const char**, PRBool*);
 typedef PRUint32   (* CStringGetMutableDataFunc)(nsACString&, PRUint32, char**);
 typedef char*      (* CStringCloneDataFunc)(const nsACString&);
 typedef nsresult   (* CStringSetDataFunc)(nsACString&, const char*, PRUint32);
 typedef nsresult   (* CStringSetDataRangeFunc)(nsACString&, PRUint32, PRUint32, const char*, PRUint32);
 typedef nsresult   (* CStringCopyFunc)(nsACString &, const nsACString &);
+typedef void       (* CStringSetIsVoidFunc)(nsACString &);
+typedef PRBool     (* CStringGetIsVoidFunc)(const nsACString &);

 typedef nsresult   (* CStringToUTF16)(const nsACString &, nsCStringEncoding, nsAString &);
 typedef nsresult   (* UTF16ToCString)(const nsAString &, nsCStringEncoding, nsACString &);

 typedef void*      (* AllocFunc)(PRSize size);
 typedef void*      (* ReallocFunc)(void* ptr, PRSize size);
 typedef void       (* FreeFunc)(void* ptr);

@@ -180,32 +184,36 @@ typedef struct XPCOMFunctions{
     LogCtorFunc logDtorFunc;
     LogCOMPtrFunc logCOMPtrAddRefFunc;
     LogCOMPtrFunc logCOMPtrReleaseFunc;
     GetXPTCallStubFunc getXPTCallStubFunc;
     DestroyXPTCallStubFunc destroyXPTCallStubFunc;
     InvokeByIndexFunc invokeByIndexFunc;
     CycleCollectorFunc cycleSuspectFunc;
     CycleCollectorFunc cycleForgetFunc;
+    StringSetIsVoidFunc stringSetIsVoid;
+    StringGetIsVoidFunc stringGetIsVoid;
+    CStringSetIsVoidFunc cstringSetIsVoid;
+    CStringGetIsVoidFunc cstringGetIsVoid;

 } XPCOMFunctions;

 typedef nsresult (PR_CALLBACK *GetFrozenFunctionsFunc)(XPCOMFunctions *entryPoints, const char* libraryPath);
 XPCOM_API(nsresult)
 NS_GetFrozenFunctions(XPCOMFunctions *entryPoints, const char* libraryPath);

 // think hard before changing this
 #define XPCOM_GLUE_VERSION 1


 /* XPCOM Specific Defines
  *
- * XPCOM_DLL              - name of the loadable xpcom library on disk.
+ * XPCOM_DLL              - name of the loadable xpcom library on disk.
  * XUL_DLL                - name of the loadable XUL library on disk
- * XPCOM_SEARCH_KEY       - name of the environment variable that can be
+ * XPCOM_SEARCH_KEY       - name of the environment variable that can be
  *                          modified to include additional search paths.
  * GRE_CONF_NAME          - Name of the GRE Configuration file
  */

 #if defined(XP_WIN32) || defined(XP_OS2) || defined(WINCE)

 #define XPCOM_SEARCH_KEY  "PATH"
 #define GRE_CONF_NAME     "gre.config"
@@ -222,17 +230,17 @@ NS_GetFrozenFunctions(XPCOMFunctions *en
 #define XPCOM_DLL "libxpcom"MOZ_DLL_SUFFIX
 #define XUL_DLL   "libxul"MOZ_DLL_SUFFIX

 #else // Unix

 #define XPCOM_DLL "libxpcom"MOZ_DLL_SUFFIX

 // you have to love apple..
-#ifdef XP_MACOSX
+#ifdef XP_MACOSX
 #define XPCOM_SEARCH_KEY  "DYLD_LIBRARY_PATH"
 #define GRE_FRAMEWORK_NAME "XUL.framework"
 #define XUL_DLL            "XUL"
 #else
 #define XPCOM_SEARCH_KEY  "LD_LIBRARY_PATH"
 #define XUL_DLL   "libxul"MOZ_DLL_SUFFIX
 #endif

Index: xpcom/build/nsXPCOMStrings.cpp
===================================================================
RCS file: /cvsroot/mozilla/xpcom/build/nsXPCOMStrings.cpp,v
retrieving revision 1.3
diff -u -8 -p -r1.3 nsXPCOMStrings.cpp
--- xpcom/build/nsXPCOMStrings.cpp	8 Jul 2007 07:08:50 -0000	1.3
+++ xpcom/build/nsXPCOMStrings.cpp	6 Aug 2007 20:32:21 -0000
@@ -184,16 +184,28 @@ NS_StringSetDataRange(nsAString &aStr,

 XPCOM_API(nsresult)
 NS_StringCopy(nsAString &aDest, const nsAString &aSrc)
 {
   aDest.Assign(aSrc);
   return NS_OK; // XXX report errors
 }

+XPCOM_API(void)
+NS_StringSetIsVoid(nsAString &aStr)
+{
+  aStr.SetIsVoid(PR_TRUE);
+}
+
+XPCOM_API(PRBool)
+NS_StringGetIsVoid(const nsAString &aStr)
+{
+  return aStr.IsVoid();
+}
+
 /* ------------------------------------------------------------------------- */

 XPCOM_API(nsresult)
 NS_CStringContainerInit(nsCStringContainer &aContainer)
 {
   NS_ASSERTION(sizeof(nsStringContainer_base) >= sizeof(nsCString),
       "nsCStringContainer is not large enough");

@@ -331,16 +343,28 @@ NS_CStringSetDataRange(nsACString &aStr,

 XPCOM_API(nsresult)
 NS_CStringCopy(nsACString &aDest, const nsACString &aSrc)
 {
   aDest.Assign(aSrc);
   return NS_OK; // XXX report errors
 }

+XPCOM_API(void)
+NS_CStringSetIsVoid(nsACString &aStr)
+{
+  aStr.SetIsVoid(PR_TRUE);
+}
+
+XPCOM_API(PRBool)
+NS_CStringGetIsVoid(const nsACString &aStr)
+{
+  return aStr.IsVoid();
+}
+
 /* ------------------------------------------------------------------------- */

 XPCOM_API(nsresult)
 NS_CStringToUTF16(const nsACString &aSrc,
                   nsCStringEncoding aSrcEncoding,
                   nsAString &aDest)
 {
   switch (aSrcEncoding)
Index: xpcom/glue/nsStringAPI.cpp
===================================================================
RCS file: /cvsroot/mozilla/xpcom/glue/nsStringAPI.cpp,v
retrieving revision 3.10
diff -u -8 -p -r3.10 nsStringAPI.cpp
--- xpcom/glue/nsStringAPI.cpp	11 Jul 2007 17:26:12 -0000	3.10
+++ xpcom/glue/nsStringAPI.cpp	6 Aug 2007 20:32:21 -0000
@@ -108,16 +108,32 @@ PRBool
 nsAString::SetLength(PRUint32 aLen)
 {
   char_type *data;
   NS_StringGetMutableData(*this, aLen, &data);
   return data != nsnull;
 }

 void
+nsAString::SetIsVoid(PRBool val)
+{
+  if (val)
+    NS_StringSetIsVoid(*this);
+  else
+    if (IsVoid())
+      Truncate();
+}
+
+PRBool
+nsAString::IsVoid() const
+{
+  return NS_StringGetIsVoid(*this);
+}
+
+void
 nsAString::AssignLiteral(const char *aStr)
 {
   PRUint32 len = strlen(aStr);
   PRUnichar *buf = BeginWriting(len);
   if (!buf)
     return;

   for (; *aStr; ++aStr, ++buf)
@@ -559,16 +575,32 @@ PRBool
 nsACString::SetLength(PRUint32 aLen)
 {
   char_type *data;
   NS_CStringGetMutableData(*this, aLen, &data);
   return data != nsnull;
 }

 void
+nsACString::SetIsVoid(PRBool val)
+{
+  if (val)
+    NS_CStringSetIsVoid(*this);
+  else
+    if (IsVoid())
+      Truncate();
+}
+
+PRBool
+nsACString::IsVoid() const
+{
+  return NS_CStringGetIsVoid(*this);
+}
+
+void
 nsACString::StripChars(const char *aSet)
 {
   nsCString copy(*this);

   const char_type *source, *sourceEnd;
   copy.BeginReading(&source, &sourceEnd);

   char_type *dest;
Index: xpcom/glue/nsStringAPI.h
===================================================================
RCS file: /cvsroot/mozilla/xpcom/glue/nsStringAPI.h,v
retrieving revision 3.12
diff -u -8 -p -r3.12 nsStringAPI.h
--- xpcom/glue/nsStringAPI.h	8 Jul 2007 07:08:51 -0000	3.12
+++ xpcom/glue/nsStringAPI.h	6 Aug 2007 20:32:22 -0000
@@ -107,16 +107,19 @@ public:
     return NS_StringGetData(*this, &data);
   }

   NS_HIDDEN_(PRBool) IsEmpty() const
   {
     return Length() == 0;
   }

+  NS_HIDDEN_(void) SetIsVoid(PRBool);
+  NS_HIDDEN_(PRBool) IsVoid() const;
+
   NS_HIDDEN_(void) Assign(const self_type& aString)
   {
     NS_StringCopy(*this, aString);
   }
   NS_HIDDEN_(void) Assign(const char_type* aData, size_type aLength = PR_UINT32_MAX)
   {
     NS_StringSetData(*this, aData, aLength);
   }
@@ -382,16 +385,19 @@ public:
     return NS_CStringGetData(*this, &data);
   }

   NS_HIDDEN_(PRBool) IsEmpty() const
   {
     return Length() == 0;
   }

+  NS_HIDDEN_(void) SetIsVoid(PRBool);
+  NS_HIDDEN_(PRBool) IsVoid() const;
+
   NS_HIDDEN_(void) Assign(const self_type& aString)
   {
     NS_CStringCopy(*this, aString);
   }
   NS_HIDDEN_(void) Assign(const char_type* aData, size_type aLength = PR_UINT32_MAX)
   {
     NS_CStringSetData(*this, aData, aLength);
   }
Index: xpcom/glue/standalone/nsXPCOMGlue.cpp
===================================================================
RCS file: /cvsroot/mozilla/xpcom/glue/standalone/nsXPCOMGlue.cpp,v
retrieving revision 1.49
diff -u -8 -p -r1.49 nsXPCOMGlue.cpp
--- xpcom/glue/standalone/nsXPCOMGlue.cpp	6 Aug 2007 14:34:04 -0000	1.49
+++ xpcom/glue/standalone/nsXPCOMGlue.cpp	6 Aug 2007 20:32:22 -0000
@@ -300,16 +300,30 @@ NS_StringSetDataRange(nsAString &aStr, P
 XPCOM_API(nsresult)
 NS_StringCopy(nsAString &aDest, const nsAString &aSrc)
 {
     if (!xpcomFunctions.stringCopy)
         return NS_ERROR_NOT_INITIALIZED;
     return xpcomFunctions.stringCopy(aDest, aSrc);
 }

+XPCOM_API(void)
+NS_StringSetIsVoid(nsAString &aStr)
+{
+    if (xpcomFunctions.stringSetIsVoid)
+        xpcomFunctions.stringSetIsVoid(aStr);
+}
+
+XPCOM_API(PRBool)
+NS_StringGetIsVoid(const nsAString &aStr)
+{
+    if (!xpcomFunctions.stringGetIsVoid)
+        return PR_FALSE;
+    return xpcomFunctions.stringGetIsVoid(aStr);
+}

 XPCOM_API(nsresult)
 NS_CStringContainerInit(nsCStringContainer &aStr)
 {
     if (!xpcomFunctions.cstringContainerInit)
         return NS_ERROR_NOT_INITIALIZED;
     return xpcomFunctions.cstringContainerInit(aStr);
 }
@@ -380,16 +394,31 @@ NS_CStringSetDataRange(nsACString &aStr,
 XPCOM_API(nsresult)
 NS_CStringCopy(nsACString &aDest, const nsACString &aSrc)
 {
     if (!xpcomFunctions.cstringCopy)
         return NS_ERROR_NOT_INITIALIZED;
     return xpcomFunctions.cstringCopy(aDest, aSrc);
 }

+XPCOM_API(void)
+NS_CStringSetIsVoid(nsACString &aStr)
+{
+    if (xpcomFunctions.cstringSetIsVoid)
+        xpcomFunctions.cstringSetIsVoid(aStr);
+}
+
+XPCOM_API(PRBool)
+NS_CStringGetIsVoid(const nsACString &aStr)
+{
+    if (!xpcomFunctions.cstringGetIsVoid)
+        return PR_FALSE;
+    return xpcomFunctions.cstringGetIsVoid(aStr);
+}
+
 XPCOM_API(nsresult)
 NS_CStringToUTF16(const nsACString &aSrc, nsCStringEncoding aSrcEncoding, nsAString &aDest)
 {
     if (!xpcomFunctions.cstringToUTF16)
         return NS_ERROR_NOT_INITIALIZED;
     return xpcomFunctions.cstringToUTF16(aSrc, aSrcEncoding, aDest);
 }

Index: xpcom/string/public/nsXPCOMStrings.h
===================================================================
RCS file: /cvsroot/mozilla/xpcom/string/public/nsXPCOMStrings.h,v
retrieving revision 1.1
diff -u -8 -p -r1.1 nsXPCOMStrings.h
--- xpcom/string/public/nsXPCOMStrings.h	3 May 2006 16:11:00 -0000	1.1
+++ xpcom/string/public/nsXPCOMStrings.h	6 Aug 2007 20:32:22 -0000
@@ -55,25 +55,29 @@
 # define NS_StringContainerInit2          NS_StringContainerInit2_P
 # define NS_StringContainerFinish         NS_StringContainerFinish_P
 # define NS_StringGetData                 NS_StringGetData_P
 # define NS_StringGetMutableData          NS_StringGetMutableData_P
 # define NS_StringCloneData               NS_StringCloneData_P
 # define NS_StringSetData                 NS_StringSetData_P
 # define NS_StringSetDataRange            NS_StringSetDataRange_P
 # define NS_StringCopy                    NS_StringCopy_P
+# define NS_StringSetIsVoid               NS_StringSetIsVoid_P
+# define NS_StringGetIsVoid               NS_StringGetIsVoid_P
 # define NS_CStringContainerInit          NS_CStringContainerInit_P
 # define NS_CStringContainerInit2         NS_CStringContainerInit2_P
 # define NS_CStringContainerFinish        NS_CStringContainerFinish_P
 # define NS_CStringGetData                NS_CStringGetData_P
 # define NS_CStringGetMutableData         NS_CStringGetMutableData_P
 # define NS_CStringCloneData              NS_CStringCloneData_P
 # define NS_CStringSetData                NS_CStringSetData_P
 # define NS_CStringSetDataRange           NS_CStringSetDataRange_P
 # define NS_CStringCopy                   NS_CStringCopy_P
+# define NS_CStringSetIsVoid              NS_CStringSetIsVoid_P
+# define NS_CStringGetIsVoid              NS_CStringGetIsVoid_P
 # define NS_CStringToUTF16                NS_CStringToUTF16_P
 # define NS_UTF16ToCString                NS_UTF16ToCString_P
 #endif

 #include "nscore.h"

 /* The base string types */
 class nsAString;
@@ -440,16 +444,34 @@ NS_StringInsertData(nsAString &aStr, PRU
  * @return              NS_OK if function succeeded
  */
 inline NS_HIDDEN_(nsresult)
 NS_StringCutData(nsAString &aStr, PRUint32 aCutOffset, PRUint32 aCutLength)
 {
   return NS_StringSetDataRange(aStr, aCutOffset, aCutLength, nsnull, 0);
 }

+/**
+ * NS_StringSetIsVoid
+ *
+ * This function marks a string as being a "void string".  Any data in the
+ * string will be lost.  To unset the void status, set the string data.
+ */
+XPCOM_API(void)
+NS_StringSetIsVoid(nsAString& aStr);
+
+/**
+ * NS_StringGetIsVoid
+ *
+ * This function provides a way to test if a string is a "void string", as
+ * marked by NS_StringSetIsVoid.
+ */
+XPCOM_API(PRBool)
+NS_StringGetIsVoid(const nsAString& aStr);
+
 /* ------------------------------------------------------------------------- */

 /**
  * nsCStringContainer
  *
  * This is an opaque data type that is large enough to hold the canonical
  * implementation of nsACString.  The binary structure of this class is an
  * implementation detail.
@@ -745,16 +767,34 @@ NS_CStringInsertData(nsACString &aStr, P
  * @return              NS_OK if function succeeded
  */
 inline NS_HIDDEN_(nsresult)
 NS_CStringCutData(nsACString &aStr, PRUint32 aCutOffset, PRUint32 aCutLength)
 {
   return NS_CStringSetDataRange(aStr, aCutOffset, aCutLength, nsnull, 0);
 }

+/**
+ * NS_CStringSetIsVoid
+ *
+ * This function marks a string as being a "void string".  Any data in the
+ * string will be lost.  To unset the void status, set the string data.
+ */
+XPCOM_API(void)
+NS_CStringSetIsVoid(nsACString& aStr);
+
+/**
+ * NS_CStringGetIsVoid
+ *
+ * This function provides a way to test if a string is a "void string", as
+ * marked by NS_CStringSetIsVoid.
+ */
+XPCOM_API(PRBool)
+NS_CStringGetIsVoid(const nsACString& aStr);
+
 /* ------------------------------------------------------------------------- */

 /**
  * Encodings that can be used with the following conversion routines.
  */
 enum nsCStringEncoding {
   /* Conversion between ASCII and UTF-16 assumes that all bytes in the source
    * string are 7-bit ASCII and can be inflated to UTF-16 by inserting null
Index: xpcom/stub/nsXPComStub.cpp
===================================================================
RCS file: /cvsroot/mozilla/xpcom/stub/nsXPComStub.cpp,v
retrieving revision 1.12
diff -u -8 -p -r1.12 nsXPComStub.cpp
--- xpcom/stub/nsXPComStub.cpp	6 Aug 2007 14:34:04 -0000	1.12
+++ xpcom/stub/nsXPComStub.cpp	6 Aug 2007 20:32:22 -0000
@@ -39,18 +39,18 @@
 #include "nsXPCOMPrivate.h"
 #include "nsXPCOMStrings.h"
 #include "xptcall.h"

 #include <string.h>

 /**
  * Private Method to register an exit routine.  This method
- * used to allow you to setup a callback that will be called from
- * the NS_ShutdownXPCOM function after all services and
+ * used to allow you to setup a callback that will be called from
+ * the NS_ShutdownXPCOM function after all services and
  * components have gone away. It was fatally flawed in that the component
  * DLL could be released before the exit function was called; it is now a
  * stub implementation that does nothing.
  */
 XPCOM_API(nsresult)
 NS_RegisterXPCOMExitRoutine(XPCOMExitRoutine exitRoutine, PRUint32 priority);

 XPCOM_API(nsresult)
@@ -111,17 +111,21 @@ static const XPCOMFunctions kFrozenFunct
     &NS_LogCtor_P,
     &NS_LogDtor_P,
     &NS_LogCOMPtrAddRef_P,
     &NS_LogCOMPtrRelease_P,
     &NS_GetXPTCallStub_P,
     &NS_DestroyXPTCallStub_P,
     &NS_InvokeByIndex_P,
     &NS_CycleCollectorSuspect_P,
-    &NS_CycleCollectorForget_P
+    &NS_CycleCollectorForget_P,
+    &NS_StringSetIsVoid_P,
+    &NS_StringGetIsVoid_P,
+    &NS_CStringSetIsVoid_P,
+    &NS_CStringGetIsVoid_P
 };

 EXPORT_XPCOM_API(nsresult)
 NS_GetFrozenFunctions(XPCOMFunctions *functions, const char* /* libraryPath */)
 {
     if (!functions)
         return NS_ERROR_OUT_OF_MEMORY;

@@ -368,17 +372,17 @@ NS_StringContainerInit(nsStringContainer
 }

 #undef NS_StringContainerInit2
 EXPORT_XPCOM_API(nsresult)
 NS_StringContainerInit2(nsStringContainer &aStr,
                         const PRUnichar   *aData,
                         PRUint32           aDataLength,
                         PRUint32           aFlags)
-{
+{
   return NS_StringContainerInit2_P(aStr, aData, aDataLength, aFlags);
 }

 #undef NS_StringContainerFinish
 EXPORT_XPCOM_API(void)
 NS_StringContainerFinish(nsStringContainer &aStr)
 {
   NS_StringContainerFinish_P(aStr);
@@ -422,30 +426,44 @@ NS_StringSetDataRange(nsAString &aStr, P

 #undef NS_StringCopy
 EXPORT_XPCOM_API(nsresult)
 NS_StringCopy(nsAString &aDest, const nsAString &aSrc)
 {
   return NS_StringCopy_P(aDest, aSrc);
 }

+#undef NS_StringSetIsVoid
+EXPORT_XPCOM_API(void)
+NS_StringSetIsVoid(nsAString &aStr)
+{
+  NS_StringSetIsVoid_P(aStr);
+}
+
+#undef NS_StringGetIsVoid
+EXPORT_XPCOM_API(PRBool)
+NS_StringGetIsVoid(const nsAString &aStr)
+{
+  return NS_StringGetIsVoid_P(aStr);
+}
+
 #undef NS_CStringContainerInit
 EXPORT_XPCOM_API(nsresult)
 NS_CStringContainerInit(nsCStringContainer &aStr)
 {
   return NS_CStringContainerInit_P(aStr);
 }

 #undef NS_CStringContainerInit2
 EXPORT_XPCOM_API(nsresult)
 NS_CStringContainerInit2(nsCStringContainer &aStr,
                          const char         *aData,
                          PRUint32            aDataLength,
                          PRUint32            aFlags)
-{
+{
   return NS_CStringContainerInit2_P(aStr, aData, aDataLength, aFlags);
 }

 #undef NS_CStringContainerFinish
 EXPORT_XPCOM_API(void)
 NS_CStringContainerFinish(nsCStringContainer &aStr)
 {
   NS_CStringContainerFinish_P(aStr);
@@ -489,16 +507,30 @@ NS_CStringSetDataRange(nsACString &aStr,

 #undef NS_CStringCopy
 EXPORT_XPCOM_API(nsresult)
 NS_CStringCopy(nsACString &aDest, const nsACString &aSrc)
 {
   return NS_CStringCopy_P(aDest, aSrc);
 }

+#undef NS_CStringSetIsVoid
+EXPORT_XPCOM_API(void)
+NS_CStringSetIsVoid(nsACString &aStr)
+{
+  NS_CStringSetIsVoid_P(aStr);
+}
+
+#undef NS_CStringGetIsVoid
+EXPORT_XPCOM_API(PRBool)
+NS_CStringGetIsVoid(const nsACString &aStr)
+{
+  return NS_CStringGetIsVoid_P(aStr);
+}
+
 #undef NS_CStringToUTF16
 EXPORT_XPCOM_API(nsresult)
 NS_CStringToUTF16(const nsACString &aSrc, nsCStringEncoding aSrcEncoding, nsAString &aDest)
 {
   return NS_CStringToUTF16_P(aSrc, aSrcEncoding, aDest);
 }

 #undef NS_UTF16ToCString
Index: xpcom/tests/Makefile.in
===================================================================
RCS file: /cvsroot/mozilla/xpcom/tests/Makefile.in,v
retrieving revision 1.99
diff -u -8 -p -r1.99 Makefile.in
--- xpcom/tests/Makefile.in	27 Mar 2007 03:38:21 -0000	1.99
+++ xpcom/tests/Makefile.in	6 Aug 2007 20:32:22 -0000
@@ -87,16 +87,22 @@ CPPSRCS += \
 		TestXPIDLString.cpp \
 		TestDeque.cpp \
 		TestStrings.cpp \
 		TestStorageStream.cpp \
 		TestExpirationTracker.cpp \
 		$(NULL)
 endif

+ifndef MOZILLA_INTERNAL_API
+CPPSRCS += \
+		TestStringAPI.cpp \
+		$(NULL)
+endif
+
 #CPPSRCS		+= TimerTest.cpp

 SIMPLE_PROGRAMS	= $(CPPSRCS:.cpp=$(BIN_SUFFIX))

 include $(topsrcdir)/config/config.mk

 ifndef MOZILLA_INTERNAL_API
 LIBS +=	$(DIST)/lib/$(LIB_PREFIX)xpcomglue_s.$(LIB_SUFFIX)
