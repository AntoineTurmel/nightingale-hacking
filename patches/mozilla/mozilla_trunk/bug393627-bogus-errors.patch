Index: js/src/xpconnect/src/xpcwrappedjsclass.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/src/xpcwrappedjsclass.cpp,v
retrieving revision 1.107
retrieving revision 1.108
diff -u -8 -p -r1.107 -r1.108
--- js/src/xpconnect/src/xpcwrappedjsclass.cpp	18 Sep 2007 07:34:54 -0000	1.107
+++ js/src/xpconnect/src/xpcwrappedjsclass.cpp	25 Oct 2007 05:59:37 -0000	1.108
@@ -107,28 +107,26 @@ AutoScriptEvaluate::~AutoScriptEvaluate(
     }
     JS_SetErrorReporter(mJSContext, mOldErrorReporter);
 }
 
 // It turns out that some errors may be not worth reporting. So, this
 // function is factored out to manage that.
 JSBool xpc_IsReportableErrorCode(nsresult code)
 {
-    if(NS_SUCCEEDED(code))
-        return JS_FALSE;
-
     switch(code)
     {
-        // Error codes that we don't want to report as errors...
-        // These generally indicate bad interface design AFAIC. 
-        case NS_ERROR_FACTORY_REGISTER_AGAIN:
-        case NS_BASE_STREAM_WOULD_BLOCK:
-            return JS_FALSE;
+        case NS_ERROR_XPC_JS_THREW_NULL:
+        case NS_ERROR_XPC_JS_THREW_JS_OBJECT:
+        case NS_ERROR_XPC_JS_THREW_NATIVE_OBJECT:
+        case NS_ERROR_XPC_JAVASCRIPT_ERROR_WITH_DETAILS:
+        case NS_ERROR_XPC_JAVASCRIPT_ERROR:
+            return JS_TRUE;
     }
-    return JS_TRUE;
+    return JS_FALSE;
 }
 
 // static
 nsresult
 nsXPCWrappedJSClass::GetNewOrUsed(XPCCallContext& ccx, REFNSIID aIID,
                                   nsXPCWrappedJSClass** resultClazz)
 {
     nsXPCWrappedJSClass* clazz = nsnull;
Index: js/src/xpconnect/src/xpcconvert.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/src/xpcconvert.cpp,v
retrieving revision 1.115
retrieving revision 1.116
diff -u -8 -p -r1.115 -r1.116
--- js/src/xpconnect/src/xpcconvert.cpp	31 Aug 2007 00:52:58 -0000	1.115
+++ js/src/xpconnect/src/xpcconvert.cpp	25 Oct 2007 05:59:37 -0000	1.116
@@ -1474,24 +1474,24 @@ XPCConvert::JSValToXPCException(XPCCallC
             rv = (nsresult) JSVAL_TO_INT(s);
             if(NS_FAILED(rv))
                 isResult = JS_TRUE;
             else
                 number = (double) JSVAL_TO_INT(s);
         }
         else
         {
-                number = *(JSVAL_TO_DOUBLE(s));
-                if(number > 0.0 &&
-                   number < (double)0xffffffff &&
-                   0.0 == fmod(number,1))
-                {
-                    rv = (nsresult) number;
-                    if(NS_FAILED(rv))
-                        isResult = JS_TRUE;
+            number = *(JSVAL_TO_DOUBLE(s));
+            if(number > 0.0 &&
+               number < (double)0xffffffff &&
+               0.0 == fmod(number,1))
+            {
+                rv = (nsresult) number;
+                if(NS_FAILED(rv))
+                    isResult = JS_TRUE;
             }
         }
 
         if(isResult)
             return ConstructException(rv, nsnull, ifaceName, methodName,
                                       nsnull, exceptn);
         else
         {
