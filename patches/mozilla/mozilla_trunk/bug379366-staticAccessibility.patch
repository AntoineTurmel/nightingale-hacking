Index: accessible/src/msaa/nsAccessNodeWrap.cpp
===================================================================
RCS file: /cvsroot/mozilla/accessible/src/msaa/nsAccessNodeWrap.cpp,v
retrieving revision 1.30
diff -u -p -8 -r1.30 nsAccessNodeWrap.cpp
--- accessible/src/msaa/nsAccessNodeWrap.cpp	2 May 2007 15:47:10 -0000	1.30
+++ accessible/src/msaa/nsAccessNodeWrap.cpp	8 May 2007 03:31:27 -0000
@@ -60,16 +60,18 @@
 HINSTANCE nsAccessNodeWrap::gmAccLib = nsnull;
 HINSTANCE nsAccessNodeWrap::gmUserLib = nsnull;
 LPFNACCESSIBLEOBJECTFROMWINDOW nsAccessNodeWrap::gmAccessibleObjectFromWindow = nsnull;
 LPFNNOTIFYWINEVENT nsAccessNodeWrap::gmNotifyWinEvent = nsnull;
 LPFNGETGUITHREADINFO nsAccessNodeWrap::gmGetGUIThreadInfo = nsnull;
 
 PRBool nsAccessNodeWrap::gIsEnumVariantSupportDisabled = 0;
 
+nsCOMPtr<nsIAccessibleTextChangeEvent> nsAccessNodeWrap::gTextEvent;
+
 /* For documentation of the accessibility architecture, 
  * see http://lxr.mozilla.org/seamonkey/source/accessible/accessible-docs.html
  */
 
 /*
  * Class nsAccessNodeWrap
  */
 
@@ -534,14 +536,16 @@ void nsAccessNodeWrap::InitAccessibility
       gmGetGUIThreadInfo = (LPFNGETGUITHREADINFO)GetProcAddress(gmUserLib,"GetGUIThreadInfo");
   }
 
   nsAccessNode::InitXPAccessibility();
 }
 
 void nsAccessNodeWrap::ShutdownAccessibility()
 {
+  gTextEvent = nsnull;
+
   if (!gIsAccessibilityActive) {
     return;
   }
 
   nsAccessNode::ShutdownXPAccessibility();
 }
Index: accessible/src/msaa/nsAccessNodeWrap.h
===================================================================
RCS file: /cvsroot/mozilla/accessible/src/msaa/nsAccessNodeWrap.h,v
retrieving revision 1.7
diff -u -p -8 -r1.7 nsAccessNodeWrap.h
--- accessible/src/msaa/nsAccessNodeWrap.h	1 May 2007 17:08:26 -0000	1.7
+++ accessible/src/msaa/nsAccessNodeWrap.h	8 May 2007 03:31:27 -0000
@@ -40,16 +40,17 @@
  * see http://lxr.mozilla.org/seamonkey/source/accessible/accessible-docs.html
  */
 
 #ifndef _nsAccessNodeWrap_H_
 #define _nsAccessNodeWrap_H_
 
 #include "nsCOMPtr.h"
 #include "nsIAccessible.h"
+#include "nsIAccessibleEvent.h"
 #include "nsIWinAccessNode.h"
 #include "ISimpleDOMNode.h"
 #include "nsIDOMElement.h"
 #include "nsIContent.h"
 #include "nsAccessNode.h"
 #include "OLEIDL.H"
 #include "OLEACC.H"
 #include "winable.h"
@@ -138,12 +139,18 @@ class nsAccessNodeWrap :  public nsAcces
     static LPFNNOTIFYWINEVENT gmNotifyWinEvent;
     static LPFNGETGUITHREADINFO gmGetGUIThreadInfo;
 
   protected:
     void GetAccessibleFor(nsIDOMNode *node, nsIAccessible **newAcc);
     ISimpleDOMNode* MakeAccessNode(nsIDOMNode *node);
 
     static PRBool gIsEnumVariantSupportDisabled;
+
+    /**
+     * It is used in nsHyperTextAccessibleWrap for IA2::newText/oldText
+     * implementation.
+     */
+    static nsCOMPtr<nsIAccessibleTextChangeEvent> gTextEvent;
 };
 
 #endif
 
Index: accessible/src/msaa/nsHyperTextAccessibleWrap.cpp
===================================================================
RCS file: /cvsroot/mozilla/accessible/src/msaa/nsHyperTextAccessibleWrap.cpp,v
retrieving revision 1.1
diff -u -p -8 -r1.1 nsHyperTextAccessibleWrap.cpp
--- accessible/src/msaa/nsHyperTextAccessibleWrap.cpp	1 May 2007 17:08:26 -0000	1.1
+++ accessible/src/msaa/nsHyperTextAccessibleWrap.cpp	8 May 2007 03:31:27 -0000
@@ -35,58 +35,77 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "nsHyperTextAccessibleWrap.h"
 
-nsString nsHyperTextAccessibleWrap::sText;
-PRInt32 nsHyperTextAccessibleWrap::sOffset = 0;
-PRUint32 nsHyperTextAccessibleWrap::sLength = 0;
-PRBool nsHyperTextAccessibleWrap::sIsInserted = PR_FALSE;
-
 NS_IMPL_ISUPPORTS_INHERITED0(nsHyperTextAccessibleWrap,
                              nsHyperTextAccessible)
 
 IMPL_IUNKNOWN_INHERITED2(nsHyperTextAccessibleWrap, nsAccessibleWrap,
                          CAccessibleText, CAccessibleEditableText);
 
 NS_IMETHODIMP
 nsHyperTextAccessibleWrap::FireAccessibleEvent(nsIAccessibleEvent *aEvent)
 {
   PRUint32 eventType;
   aEvent->GetEventType(&eventType);
 
   if (eventType == nsIAccessibleEvent::EVENT_TEXT_CHANGED) {
-    nsCOMPtr<nsIAccessibleTextChangeEvent> textEvent(do_QueryInterface(aEvent));
-    NS_ENSURE_STATE(textEvent);
-
-    textEvent->GetStart(&sOffset);
-    textEvent->GetLength(&sLength);
-    textEvent->IsInserted(&sIsInserted);
-
-    GetText(sOffset, sOffset + sLength, sText);
+    nsCOMPtr<nsIAccessible> accessible;
+    aEvent->GetAccessible(getter_AddRefs(accessible));
+    if (accessible) {
+      nsCOMPtr<nsIWinAccessNode> winAccessNode(do_QueryInterface(accessible));
+      if (winAccessNode) {
+        void *instancePtr = NULL;
+        nsresult rv = winAccessNode->QueryNativeInterface(IID_IAccessibleText,
+                                                          &instancePtr);
+        if (NS_SUCCEEDED(rv)) {
+          gTextEvent = do_QueryInterface(aEvent);
+          (NS_STATIC_CAST(IUnknown*, instancePtr))->Release();
+        }
+      }
+    }
   }
 
   return nsHyperTextAccessible::FireAccessibleEvent(aEvent);
 }
 
 nsresult
 nsHyperTextAccessibleWrap::GetModifiedText(PRBool aGetInsertedText,
                                            nsAString& aText,
                                            PRUint32 *aStartOffset,
                                            PRUint32 *aEndOffset)
 {
-  if ((aGetInsertedText && sIsInserted) || (!aGetInsertedText && !sIsInserted)) {
-    aText.Assign(sText);
-    *aStartOffset = sOffset;
-    *aEndOffset = sOffset + sLength;
-  } else {
-    aText.Truncate();
-    *aStartOffset = 0;
-    *aEndOffset = 0;
-  }
+  aText.Truncate();
+  *aStartOffset = 0;
+  *aEndOffset = 0;
+
+  if (!gTextEvent)
+    return NS_OK;
+
+  nsCOMPtr<nsIAccessible> targetAcc;
+  gTextEvent->GetAccessible(getter_AddRefs(targetAcc));
+  if (targetAcc != this)
+    return NS_OK;
+
+  PRBool isInserted;
+  gTextEvent->IsInserted(&isInserted);
+
+  if (aGetInsertedText != isInserted)
+    return NS_OK;
+
+  nsAutoString text;
+  PRInt32 offset;
+  PRUint32 length;
+
+  gTextEvent->GetStart(&offset);
+  gTextEvent->GetLength(&length);
+  GetText(offset, offset + length, aText);
+  *aStartOffset = offset;
+  *aEndOffset = offset + length;
 
   return NS_OK;
 }
 
Index: accessible/src/msaa/nsHyperTextAccessibleWrap.h
===================================================================
RCS file: /cvsroot/mozilla/accessible/src/msaa/nsHyperTextAccessibleWrap.h,v
retrieving revision 1.1
diff -u -p -8 -r1.1 nsHyperTextAccessibleWrap.h
--- accessible/src/msaa/nsHyperTextAccessibleWrap.h	1 May 2007 17:08:26 -0000	1.1
+++ accessible/src/msaa/nsHyperTextAccessibleWrap.h	8 May 2007 03:31:27 -0000
@@ -56,23 +56,16 @@ public:
   // IUnknown
   DECL_IUNKNOWN_INHERITED
 
   // nsISupports
   NS_DECL_ISUPPORTS_INHERITED
 
   // nsIAccessible
   NS_IMETHOD FireAccessibleEvent(nsIAccessibleEvent *aEvent);
-
 protected:
   virtual nsresult GetModifiedText(PRBool aGetInsertedText, nsAString& aText,
                                    PRUint32 *aStartOffset,
                                    PRUint32 *aEndOffset);
-
-private:
-  static nsString sText;
-  static PRInt32 sOffset;
-  static PRUint32 sLength;
-  static PRBool sIsInserted;
 };
 
 #endif
 
