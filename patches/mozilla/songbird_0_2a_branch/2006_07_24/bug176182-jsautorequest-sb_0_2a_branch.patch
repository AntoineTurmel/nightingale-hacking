? .mozconfig.mk
? .mozconfig.out
? bug176182-jsautorequest-sb_0_2a_branch.patch
? bug204114-unicharutils-sb_0_2a_branch.patch
? bug280236-classinfo_v1.6-sb_0_2a_branch.patch
? bug330640-accessibility-sb_0_2a_branch.patch
? js_gclogging-sb_0_2a_branch.patch
? js_tracerefcnt-sb_0_2a_branch.patch
? sanity.diff
Index: caps/src/nsScriptSecurityManager.cpp
===================================================================
RCS file: /cvsroot/mozilla/caps/src/nsScriptSecurityManager.cpp,v
retrieving revision 1.266.2.14
diff -u -p -r1.266.2.14 nsScriptSecurityManager.cpp
--- caps/src/nsScriptSecurityManager.cpp	6 Jul 2006 21:07:15 -0000	1.266.2.14
+++ caps/src/nsScriptSecurityManager.cpp	30 Aug 2006 22:59:01 -0000
@@ -98,6 +98,7 @@ JSRuntime       *nsScriptSecurityManager
 static inline const PRUnichar *
 JSValIDToString(JSContext *cx, const jsval idval)
 {
+    JSAutoRequest ar(cx);
     JSString *str = JS_ValueToString(cx, idval);
     if(!str)
         return nsnull;
@@ -112,6 +113,7 @@ GetScriptContext(JSContext *cx)
 
 inline void SetPendingException(JSContext *cx, const char *aMsg)
 {
+    JSAutoRequest ar(cx);
     JSString *str = JS_NewStringCopyZ(cx, aMsg);
     if (str)
         JS_SetPendingException(cx, STRING_TO_JSVAL(str));
@@ -119,6 +121,7 @@ inline void SetPendingException(JSContex
 
 inline void SetPendingException(JSContext *cx, const PRUnichar *aMsg)
 {
+    JSAutoRequest ar(cx);
     JSString *str = JS_NewUCStringCopyZ(cx,
                         NS_REINTERPRET_CAST(const jschar*, aMsg));
     if (str)
@@ -511,6 +514,8 @@ nsScriptSecurityManager::CheckConnect(JS
     nsresult rv = CheckLoadURIFromScript(cx, aTargetURI);
     if (NS_FAILED(rv)) return rv;
 
+    JSAutoRequest ar(cx);
+
     JSString* propertyName = ::JS_InternString(cx, aPropertyName);
     if (!propertyName)
         return NS_ERROR_OUT_OF_MEMORY;
@@ -2747,6 +2752,8 @@ nsScriptSecurityManager::CheckComponentP
     printf("### CheckComponentPermissions(ClassID.%s) ",cid.get());
 #endif
 
+    JSAutoRequest ar(cx);
+
     // Look up the policy for this class.
     // while this isn't a property we'll treat it as such, using ACCESS_CALL_METHOD
     jsval cidVal = STRING_TO_JSVAL(::JS_InternString(cx, cid.get()));
@@ -3370,6 +3377,8 @@ nsScriptSecurityManager::InitDomainPolic
         if (end)
             *end = '\0';
 
+        JSAutoRequest ar(cx);
+
         JSString* propertyKey = ::JS_InternString(cx, start);
         if (!propertyKey)
             return NS_ERROR_OUT_OF_MEMORY;
Index: caps/src/nsSecurityManagerFactory.cpp
===================================================================
RCS file: /cvsroot/mozilla/caps/src/nsSecurityManagerFactory.cpp,v
retrieving revision 1.41
diff -u -p -r1.41 nsSecurityManagerFactory.cpp
--- caps/src/nsSecurityManagerFactory.cpp	22 Jul 2005 19:05:40 -0000	1.41
+++ caps/src/nsSecurityManagerFactory.cpp	30 Aug 2006 22:59:01 -0000
@@ -294,6 +294,7 @@ nsSecurityNameSet::InitializeNameSet(nsI
      */
     JSObject *obj = global;
     JSObject *proto;
+    JSAutoRequest ar(cx);
     while ((proto = JS_GetPrototype(cx, obj)) != nsnull)
         obj = proto;
     JSClass *objectClass = JS_GetClass(cx, obj);
Index: content/base/src/nsScriptLoader.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/base/src/nsScriptLoader.cpp,v
retrieving revision 1.74.2.4
diff -u -p -r1.74.2.4 nsScriptLoader.cpp
--- content/base/src/nsScriptLoader.cpp	7 Jul 2006 02:12:00 -0000	1.74.2.4
+++ content/base/src/nsScriptLoader.cpp	30 Aug 2006 22:59:01 -0000
@@ -774,6 +774,8 @@ nsScriptLoader::EvaluateScript(nsScriptL
   // Put the old script back in case it wants to do anything else.
   mCurrentScript = oldCurrent;
 
+  JSAutoRequest ar(cx);
+
   ::JS_ReportPendingException(cx);
   if (changed) {
     ::JS_SetOptions(cx, options);
Index: content/base/src/nsXMLHttpRequest.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/base/src/nsXMLHttpRequest.cpp,v
retrieving revision 1.156.2.6
diff -u -p -r1.156.2.6 nsXMLHttpRequest.cpp
--- content/base/src/nsXMLHttpRequest.cpp	1 Aug 2006 22:19:28 -0000	1.156.2.6
+++ content/base/src/nsXMLHttpRequest.cpp	30 Aug 2006 22:59:02 -0000
@@ -1046,6 +1046,7 @@ nsXMLHttpRequest::Open(const nsACString&
     }
 
     if (argc > 2) {
+      JSAutoRequest ar(cx);
       JSBool asyncBool;
       ::JS_ValueToBoolean(cx, argv[2], &asyncBool);
       async = (PRBool)asyncBool;
Index: content/events/src/nsEventListenerManager.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/events/src/nsEventListenerManager.cpp,v
retrieving revision 1.206.2.8
diff -u -p -r1.206.2.8 nsEventListenerManager.cpp
--- content/events/src/nsEventListenerManager.cpp	15 Jun 2006 03:15:46 -0000	1.206.2.8
+++ content/events/src/nsEventListenerManager.cpp	30 Aug 2006 22:59:02 -0000
@@ -1428,6 +1428,7 @@ nsEventListenerManager::RegisterScriptEv
 
   if (cx) {
     if (sAddListenerID == JSVAL_VOID) {
+      JSAutoRequest ar(cx);
       sAddListenerID =
         STRING_TO_JSVAL(::JS_InternString(cx, "addEventListener"));
     }
Index: content/html/document/src/nsHTMLDocument.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/html/document/src/nsHTMLDocument.cpp,v
retrieving revision 3.615.2.31
diff -u -p -r3.615.2.31 nsHTMLDocument.cpp
--- content/html/document/src/nsHTMLDocument.cpp	18 Aug 2006 17:33:28 -0000	3.615.2.31
+++ content/html/document/src/nsHTMLDocument.cpp	30 Aug 2006 22:59:03 -0000
@@ -2357,6 +2357,8 @@ nsHTMLDocument::ScriptWriteCommon(PRBool
     NS_ENSURE_TRUE(argv, NS_ERROR_UNEXPECTED);
 
     if (argc == 1) {
+      JSAutoRequest ar(cx);
+
       JSString *jsstr = JS_ValueToString(cx, argv[0]);
       NS_ENSURE_TRUE(jsstr, NS_ERROR_OUT_OF_MEMORY);
 
@@ -2371,6 +2373,8 @@ nsHTMLDocument::ScriptWriteCommon(PRBool
       nsAutoString string_buffer;
 
       for (i = 0; i < argc; ++i) {
+        JSAutoRequest ar(cx);
+
         JSString *str = JS_ValueToString(cx, argv[i]);
         NS_ENSURE_TRUE(str, NS_ERROR_OUT_OF_MEMORY);
 
Index: content/xbl/src/nsXBLBinding.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/xbl/src/nsXBLBinding.cpp,v
retrieving revision 1.199.2.2
diff -u -p -r1.199.2.2 nsXBLBinding.cpp
--- content/xbl/src/nsXBLBinding.cpp	15 Jun 2006 03:15:46 -0000	1.199.2.2
+++ content/xbl/src/nsXBLBinding.cpp	30 Aug 2006 22:59:03 -0000
@@ -1001,6 +1001,7 @@ nsXBLBinding::DoInitJSClass(JSContext *c
 
   nsCAutoString className(aClassName);
   JSObject* parent_proto = nsnull;  // If we have an "obj" we can set this
+  JSAutoRequest ar(cx);
   if (obj) {
     // Retrieve the current prototype of obj.
     parent_proto = ::JS_GetPrototype(cx, obj);
Index: content/xbl/src/nsXBLDocumentInfo.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/xbl/src/nsXBLDocumentInfo.cpp,v
retrieving revision 1.29.2.7
diff -u -p -r1.29.2.7 nsXBLDocumentInfo.cpp
--- content/xbl/src/nsXBLDocumentInfo.cpp	16 Aug 2006 23:49:16 -0000	1.29.2.7
+++ content/xbl/src/nsXBLDocumentInfo.cpp	30 Aug 2006 22:59:03 -0000
@@ -266,6 +266,8 @@ nsXBLDocGlobalObject::GetContext()
 
     JSContext *cx = (JSContext *)mScriptContext->GetNativeContext();
 
+    JSAutoRequest ar(cx);
+
     JS_SetErrorReporter(cx, XBL_ProtoErrorReporter);
     mJSObject = ::JS_NewObject(cx, &gSharedGlobalClass, nsnull, nsnull);
     if (!mJSObject)
Index: content/xbl/src/nsXBLProtoImplField.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/xbl/src/nsXBLProtoImplField.cpp,v
retrieving revision 1.12.26.2
diff -u -p -r1.12.26.2 nsXBLProtoImplField.cpp
--- content/xbl/src/nsXBLProtoImplField.cpp	26 Sep 2005 13:30:07 -0000	1.12.26.2
+++ content/xbl/src/nsXBLProtoImplField.cpp	30 Aug 2006 22:59:04 -0000
@@ -138,8 +138,9 @@ nsXBLProtoImplField::InstallMember(nsISc
   if (!undefined) {
     // Define the evaluated result as a JS property
     nsDependentString name(mName);
+    JSAutoRequest ar(cx);
     if (!::JS_DefineUCProperty(cx, scriptObject, NS_REINTERPRET_CAST(const jschar*, mName), 
-                               name.Length(), result, nsnull, nsnull, mJSAttributes))
+                                 name.Length(), result, nsnull, nsnull, mJSAttributes))
       return NS_ERROR_OUT_OF_MEMORY;
   }
   
Index: content/xbl/src/nsXBLProtoImplMethod.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/xbl/src/nsXBLProtoImplMethod.cpp,v
retrieving revision 1.22.2.4
diff -u -p -r1.22.2.4 nsXBLProtoImplMethod.cpp
--- content/xbl/src/nsXBLProtoImplMethod.cpp	1 Jun 2006 21:51:48 -0000	1.22.2.4
+++ content/xbl/src/nsXBLProtoImplMethod.cpp	30 Aug 2006 22:59:04 -0000
@@ -156,6 +156,7 @@ nsXBLProtoImplMethod::InstallMember(nsIS
   // now we want to reevaluate our property using aContext and the script object for this window...
   if (mJSMethodObject && targetClassObject) {
     nsDependentString name(mName);
+    JSAutoRequest ar(cx);
     JSObject * method = ::JS_CloneFunctionObject(cx, mJSMethodObject, globalObject);
     if (!method) {
       return NS_ERROR_OUT_OF_MEMORY;
@@ -320,14 +321,14 @@ nsXBLProtoImplAnonymousMethod::Execute(n
   rv = wrapper->GetJSObject(&thisObject);
   NS_ENSURE_SUCCESS(rv, rv);
 
+  JSAutoRequest ar(cx);
+
   // Clone the function object, using thisObject as the parent so "this" is in
   // the scope chain of the resulting function (for backwards compat to the
   // days when this was an event handler).
-  JSObject* method = ::JS_CloneFunctionObject(cx, mJSMethodObject,
-                                              thisObject);
-  if (!method) {
+  JSObject* method = ::JS_CloneFunctionObject(cx, mJSMethodObject, thisObject);
+  if (!method)
     return NS_ERROR_OUT_OF_MEMORY;
-  }
 
   // Now call the method
 
Index: content/xbl/src/nsXBLProtoImplProperty.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/xbl/src/nsXBLProtoImplProperty.cpp,v
retrieving revision 1.19.2.4
diff -u -p -r1.19.2.4 nsXBLProtoImplProperty.cpp
--- content/xbl/src/nsXBLProtoImplProperty.cpp	10 Mar 2006 18:39:43 -0000	1.19.2.4
+++ content/xbl/src/nsXBLProtoImplProperty.cpp	30 Aug 2006 22:59:04 -0000
@@ -194,6 +194,7 @@ nsXBLProtoImplProperty::InstallMember(ns
   // now we want to reevaluate our property using aContext and the script object for this window...
   if ((mJSGetterObject || mJSSetterObject) && targetClassObject) {
     JSObject * getter = nsnull;
+    JSAutoRequest ar(cx);
     if (mJSGetterObject)
       if (!(getter = ::JS_CloneFunctionObject(cx, mJSGetterObject, globalObject)))
         return NS_ERROR_OUT_OF_MEMORY;
Index: content/xul/content/src/nsXULElement.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/xul/content/src/nsXULElement.cpp,v
retrieving revision 1.578.2.17
diff -u -p -r1.578.2.17 nsXULElement.cpp
--- content/xul/content/src/nsXULElement.cpp	3 Aug 2006 00:47:51 -0000	1.578.2.17
+++ content/xul/content/src/nsXULElement.cpp	30 Aug 2006 22:59:04 -0000
@@ -3343,6 +3343,7 @@ nsXULPrototypeScript::Serialize(nsIObjec
 
     JSScript *script = NS_REINTERPRET_CAST(JSScript*,
                                            ::JS_GetPrivate(cx, mJSObject));
+    JSAutoRequest ar(cx);
     if (! ::JS_XDRScript(xdr, &script)) {
         rv = NS_ERROR_FAILURE;  // likely to be a principals serialization error
     } else {
@@ -3478,6 +3479,7 @@ nsXULPrototypeScript::Deserialize(nsIObj
             rv = NS_ERROR_OUT_OF_MEMORY;
         } else {
             xdr->userdata = (void*) aStream;
+            JSAutoRequest ar(cx);
             ::JS_XDRMemSetData(xdr, data, size);
 
             JSScript *script = nsnull;
Index: content/xul/document/src/nsXULPrototypeDocument.cpp
===================================================================
RCS file: /cvsroot/mozilla/content/xul/document/src/nsXULPrototypeDocument.cpp,v
retrieving revision 1.64.2.4
diff -u -p -r1.64.2.4 nsXULPrototypeDocument.cpp
--- content/xul/document/src/nsXULPrototypeDocument.cpp	16 Aug 2006 23:49:16 -0000	1.64.2.4
+++ content/xul/document/src/nsXULPrototypeDocument.cpp	30 Aug 2006 22:59:05 -0000
@@ -829,6 +829,8 @@ nsXULPDGlobalObject::GetContext()
 
         JSContext *cx = (JSContext *)mScriptContext->GetNativeContext();
 
+        JSAutoRequest ar(cx);
+
         mJSObject = ::JS_NewObject(cx, &gSharedGlobalClass, nsnull, nsnull);
         if (!mJSObject)
             return nsnull;
Index: dom/src/base/nsDOMClassInfo.cpp
===================================================================
RCS file: /cvsroot/mozilla/dom/src/base/nsDOMClassInfo.cpp,v
retrieving revision 1.292.2.51
diff -u -p -r1.292.2.51 nsDOMClassInfo.cpp
--- dom/src/base/nsDOMClassInfo.cpp	4 Aug 2006 18:23:16 -0000	1.292.2.51
+++ dom/src/base/nsDOMClassInfo.cpp	30 Aug 2006 22:59:07 -0000
@@ -1318,6 +1318,8 @@ nsDOMClassInfo::DefineStaticJSVals(JSCon
     return NS_ERROR_OUT_OF_MEMORY;                                            \
   }
 
+  JSAutoRequest ar(cx);
+
   SET_JSVAL_TO_STRING(sTop_id,             cx, "top");
   SET_JSVAL_TO_STRING(sParent_id,          cx, "parent");
   SET_JSVAL_TO_STRING(sScrollbars_id,      cx, "scrollbars");
@@ -1427,6 +1429,8 @@ nsDOMClassInfo::WrapNative(JSContext *cx
 nsresult
 nsDOMClassInfo::ThrowJSException(JSContext *cx, nsresult aResult)
 {
+  JSAutoRequest ar(cx);
+
   do {
     nsCOMPtr<nsIExceptionService> xs =
       do_GetService(NS_EXCEPTIONSERVICE_CONTRACTID);
@@ -3032,6 +3036,8 @@ nsDOMClassInfo::GetArrayIndexFromId(JSCo
     *aIsNumber = PR_FALSE;
   }
 
+  JSAutoRequest ar(cx);
+
   if (!::JS_ValueToNumber(cx, id, &array_index)) {
     return -1;
   }
@@ -3223,6 +3229,8 @@ nsDOMClassInfo::PostCreate(nsIXPConnectW
 
   wrapper->GetJSObjectPrototype(&proto);
 
+  JSAutoRequest ar(cx);
+
   JSObject *proto_proto = ::JS_GetPrototype(cx, proto);
 
   JSClass *proto_proto_class = JS_GET_CLASS(cx, proto_proto);
@@ -3352,6 +3360,7 @@ nsDOMClassInfo::ResolveConstructor(JSCon
   JSObject *global = GetGlobalJSObject(cx, obj);
 
   jsval val;
+  JSAutoRequest ar(cx);
   if (!::JS_GetProperty(cx, global, mData->mName, &val)) {
     return NS_ERROR_UNEXPECTED;
   }
@@ -3829,6 +3838,7 @@ nsWindowSH::PreCreate(nsISupports *nativ
 
   if (!sObjectClass) {
     JSObject *obj, *proto = globalObj;
+    JSAutoRequest ar(cx);
 
     do {
       obj = proto;
@@ -4008,6 +4018,8 @@ nsWindowSH::InvalidateGlobalScopePollute
 {
   JSObject *proto;
 
+  JSAutoRequest ar(cx);
+
   while ((proto = ::JS_GetPrototype(cx, obj))) {
     if (JS_GET_CLASS(cx, proto) == &sGlobalScopePolluterClass) {
       nsIHTMLDocument *doc = (nsIHTMLDocument *)::JS_GetPrivate(cx, proto);
@@ -4038,6 +4050,8 @@ nsWindowSH::InstallGlobalScopePolluter(J
     return NS_OK;
   }
 
+  JSAutoRequest ar(cx);
+
   JSObject *gsp = ::JS_NewObject(cx, &sGlobalScopePolluterClass, nsnull, obj);
   if (!gsp) {
     return NS_ERROR_OUT_OF_MEMORY;
@@ -4100,18 +4114,23 @@ nsWindowSH::GetProperty(nsIXPConnectWrap
 {
   nsGlobalWindow *win = nsGlobalWindow::FromWrapper(wrapper);
 
+  JSAutoRequest ar(cx);
+
 #ifdef DEBUG_SH_FORWARDING
   {
-    nsDependentJSString str(::JS_ValueToString(cx, id));
+    jschar *jsstr = ::JS_ValueToString(cx, id);
+    if (jsstr) {
+      nsDependentJSString str(jsstr);
 
-    if (win->IsInnerWindow()) {
+      if (win->IsInnerWindow()) {
 #ifdef DEBUG_PRINT_INNER
-      printf("Property '%s' get on inner window %p\n",
-             NS_ConvertUTF16toUTF8(str).get(), (void *)win);
+        printf("Property '%s' get on inner window %p\n",
+              NS_ConvertUTF16toUTF8(str).get(), (void *)win);
 #endif
-    } else {
-      printf("Property '%s' get on outer window %p\n",
-             NS_ConvertUTF16toUTF8(str).get(), (void *)win);
+      } else {
+        printf("Property '%s' get on outer window %p\n",
+              NS_ConvertUTF16toUTF8(str).get(), (void *)win);
+      }
     }
   }
 #endif
@@ -4290,6 +4309,8 @@ nsWindowSH::SetProperty(nsIXPConnectWrap
   }
 
   if (id == sLocation_id) {
+    JSAutoRequest ar(cx);
+
     JSString *val = ::JS_ValueToString(cx, *vp);
     NS_ENSURE_TRUE(val, NS_ERROR_UNEXPECTED);
 
@@ -6016,6 +6037,8 @@ nsWindowSH::NewResolve(nsIXPConnectWrapp
 
         sDoSecurityCheckInAddProperty = PR_FALSE;
 
+        JSAutoRequest ar(cx);
+
         PRBool ok = ::JS_DefineUCProperty(cx, obj, chars,
                                           ::JS_GetStringLength(str), v, nsnull,
                                           nsnull, 0);
@@ -6037,6 +6060,8 @@ nsWindowSH::NewResolve(nsIXPConnectWrapp
   // for assignment, since only read-write properties get dealt
   // with there.
   if (!(flags & JSRESOLVE_ASSIGNING)) {
+    JSAutoRequest ar(cx);
+
     // Call GlobalResolve() after we call FindChildWithName() so
     // that named child frames will override external properties
     // which have been registered with the script namespace manager.
@@ -6060,6 +6085,8 @@ nsWindowSH::NewResolve(nsIXPConnectWrapp
 
     JSObject *windowObj = win->GetGlobalJSObject();
 
+    JSAutoRequest ar(cx);
+
     JSFunction *fun = ::JS_NewFunction(cx, ContentWindowGetter, 0, 0,
                                        windowObj, "_content");
     if (!fun) {
@@ -6118,6 +6145,8 @@ nsWindowSH::NewResolve(nsIXPConnectWrapp
     PRBool doSecurityCheckInAddProperty = sDoSecurityCheckInAddProperty;
     sDoSecurityCheckInAddProperty = PR_FALSE;
 
+    JSAutoRequest ar(cx);
+
     JSBool ok = ::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
                                       ::JS_GetStringLength(str), v, nsnull,
                                       nsnull, JSPROP_ENUMERATE);
@@ -6142,6 +6171,8 @@ nsWindowSH::NewResolve(nsIXPConnectWrapp
       // undefined to override the predefined property. This is done
       // for compatibility with other browsers.
 
+      JSAutoRequest ar(cx);
+
       if (!::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
                                  ::JS_GetStringLength(str),
                                  JSVAL_VOID, nsnull, nsnull,
@@ -6165,6 +6196,8 @@ nsWindowSH::NewResolve(nsIXPConnectWrapp
                       getter_AddRefs(holder));
       NS_ENSURE_SUCCESS(rv, rv);
 
+      JSAutoRequest ar(cx);
+
       if (!::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
                                  ::JS_GetStringLength(str), v, nsnull,
                                  nsnull, JSPROP_ENUMERATE)) {
@@ -6199,14 +6232,15 @@ nsWindowSH::NewResolve(nsIXPConnectWrapp
       win = win->GetOuterWindowInternal();
       NS_ENSURE_TRUE(win, NS_ERROR_NOT_AVAILABLE);
 
+      JSAutoRequest ar(cx);
+
       if (!::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
-                                 ::JS_GetStringLength(str),
-                                 OBJECT_TO_JSVAL(win->GetGlobalJSObject()),
-                                 nsnull, nsnull,
-                                 JSPROP_READONLY | JSPROP_ENUMERATE)) {
+                                ::JS_GetStringLength(str),
+                                OBJECT_TO_JSVAL(win->GetGlobalJSObject()),
+                                nsnull, nsnull,
+                                JSPROP_READONLY | JSPROP_ENUMERATE)) {
         return NS_ERROR_FAILURE;
       }
-
       *objp = obj;
 
       return NS_OK;
@@ -6875,6 +6909,8 @@ nsEventReceiverSH::SetProperty(nsIXPConn
                                JSContext *cx, JSObject *obj, jsval id,
                                jsval *vp, PRBool *_retval)
 {
+  JSAutoRequest ar(cx);
+
   if ((::JS_TypeOfValue(cx, *vp) != JSTYPE_FUNCTION && !JSVAL_IS_NULL(*vp)) ||
       !JSVAL_IS_STRING(id) || id == sAddEventListener_id) {
     return NS_OK;
@@ -7050,6 +7086,7 @@ nsGenericArraySH::Enumerate(nsIXPConnect
   sCurrentlyEnumerating = PR_TRUE;
 
   jsval len_val;
+  JSAutoRequest ar(cx);
   JSBool ok = ::JS_GetProperty(cx, obj, "length", &len_val);
 
   if (ok && JSVAL_IS_INT(len_val)) {
@@ -7426,6 +7463,8 @@ nsDocumentSH::NewResolve(nsIXPConnectWra
     PRBool doSecurityCheckInAddProperty = sDoSecurityCheckInAddProperty;
     sDoSecurityCheckInAddProperty = PR_FALSE;
 
+    JSAutoRequest ar(cx);
+
     JSString *str = JSVAL_TO_STRING(id);
     JSBool ok = ::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
                                       ::JS_GetStringLength(str), v, nsnull,
@@ -7522,6 +7561,8 @@ nsDocumentSH::SetProperty(nsIXPConnectWr
     NS_ENSURE_SUCCESS(rv, rv);
 
     if (location) {
+      JSAutoRequest ar(cx);
+
       JSString *val = ::JS_ValueToString(cx, *vp);
       NS_ENSURE_TRUE(val, NS_ERROR_UNEXPECTED);
 
@@ -8177,6 +8218,9 @@ nsHTMLDocumentSH::NewResolve(nsIXPConnec
 
   if (!(flags & JSRESOLVE_ASSIGNING)) {
     // For native wrappers, do not resolve random names on document
+
+    JSAutoRequest ar(cx);
+
     if (!ObjectIsNativeWrapper(cx, obj)) {
       nsCOMPtr<nsISupports> result;
 
@@ -8299,6 +8343,8 @@ nsHTMLDocumentSH::GetProperty(nsIXPConne
   
   nsCOMPtr<nsISupports> result;
 
+  JSAutoRequest ar(cx);
+
   rv = ResolveImpl(cx, wrapper, id, getter_AddRefs(result));
   NS_ENSURE_SUCCESS(rv, rv);
 
@@ -8354,6 +8400,7 @@ nsHTMLElementSH::NewResolve(nsIXPConnect
 {
   if (id == sScrollIntoView_id && !(JSRESOLVE_ASSIGNING & flags)) {
     JSString *str = JSVAL_TO_STRING(id);
+    JSAutoRequest ar(cx);
     JSFunction *cfnc =
       ::JS_DefineFunction(cx, obj, ::JS_GetStringBytes(str), ScrollIntoView,
                           0, 0);
@@ -8513,6 +8560,7 @@ nsHTMLFormElementSH::NewResolve(nsIXPCon
     FindNamedItem(form, str, getter_AddRefs(result));
 
     if (result) {
+      JSAutoRequest ar(cx);
       *_retval = ::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
                                        ::JS_GetStringLength(str),
                                        JSVAL_VOID, nsnull, nsnull, 0);
@@ -8624,6 +8672,9 @@ nsHTMLFormElementSH::NewEnumerate(nsIXPC
           // If name is not there, use index instead
           attr.AppendInt(index);
         }
+
+        JSAutoRequest ar(cx);
+
         JSString *jsname =
           JS_NewUCStringCopyN(cx, NS_REINTERPRET_CAST(const jschar *,
                                                       attr.get()),
@@ -8687,9 +8738,10 @@ nsresult
 nsHTMLSelectElementSH::SetOption(JSContext *cx, jsval *vp, PRUint32 aIndex,
                                  nsIDOMNSHTMLOptionCollection *aOptCollection)
 {
+  JSAutoRequest ar(cx);
+
   // vp must refer to an object
-  if (!JSVAL_IS_OBJECT(*vp) && !::JS_ConvertValue(cx, *vp, JSTYPE_OBJECT,
-                                                  vp)) {
+  if (!JSVAL_IS_OBJECT(*vp) && !::JS_ConvertValue(cx, *vp, JSTYPE_OBJECT, vp)) {
     return NS_ERROR_UNEXPECTED;
   }
 
@@ -8801,6 +8853,8 @@ IsObjInProtoChain(JSContext *cx, JSObjec
 {
   JSObject *o = obj;
 
+  JSAutoRequest ar(cx);
+
   while (o) {
     JSObject *p = ::JS_GetPrototype(cx, o);
 
@@ -8869,6 +8923,8 @@ nsHTMLExternalObjSH::PostCreate(nsIXPCon
   rv = wrapper->GetJSObjectPrototype(&my_proto);
   NS_ENSURE_SUCCESS(rv, rv);
 
+  JSAutoRequest ar(cx);
+
   // Set 'this.__proto__' to pi
   if (!::JS_SetPrototype(cx, obj, pi_obj)) {
     return NS_ERROR_UNEXPECTED;
@@ -8947,6 +9003,8 @@ nsHTMLExternalObjSH::GetProperty(nsIXPCo
                                  JSContext *cx, JSObject *obj, jsval id,
                                  jsval *vp, PRBool *_retval)
 {
+  JSAutoRequest ar(cx);
+
   JSObject *pi_obj = ::JS_GetPrototype(cx, obj);
 
   const jschar *id_chars = nsnull;
@@ -8989,6 +9047,8 @@ nsHTMLExternalObjSH::SetProperty(nsIXPCo
                                  JSContext *cx, JSObject *obj, jsval id,
                                  jsval *vp, PRBool *_retval)
 {
+  JSAutoRequest ar(cx);
+
   JSObject *pi_obj = ::JS_GetPrototype(cx, obj);
 
   const jschar *id_chars = nsnull;
@@ -9054,6 +9114,7 @@ nsHTMLExternalObjSH::Call(nsIXPConnectWr
   // XPConnect passes us the XPConnect wrapper JSObject as obj, and
   // not the 'this' parameter that the JS engine passes in. Pass in
   // the real this parameter from JS (argv[-1]) here.
+  JSAutoRequest ar(cx);
   *_retval = ::JS_CallFunctionValue(cx, JSVAL_TO_OBJECT(argv[-1]),
                                     OBJECT_TO_JSVAL(pi_obj), argc, argv, vp);
 
@@ -9328,6 +9389,9 @@ nsHTMLOptionsCollectionSH::NewResolve(ns
 {
   if (id == sAdd_id) {
     JSString *str = JSVAL_TO_STRING(id);
+
+    JSAutoRequest ar(cx);
+
     JSFunction *fnc =
       ::JS_DefineFunction(cx, obj, ::JS_GetStringBytes(str),
                           Add, 0, JSPROP_ENUMERATE);
@@ -9545,6 +9609,8 @@ nsStringArraySH::GetProperty(nsIXPConnec
 
   // XXX: Null strings?
 
+  JSAutoRequest ar(cx);
+
   JSString *str =
     ::JS_NewUCStringCopyN(cx, NS_REINTERPRET_CAST(const jschar *, val.get()),
                           val.Length());
Index: dom/src/base/nsGlobalWindow.cpp
===================================================================
RCS file: /cvsroot/mozilla/dom/src/base/nsGlobalWindow.cpp,v
retrieving revision 1.761.2.56
diff -u -p -r1.761.2.56 nsGlobalWindow.cpp
--- dom/src/base/nsGlobalWindow.cpp	19 Aug 2006 05:56:13 -0000	1.761.2.56
+++ dom/src/base/nsGlobalWindow.cpp	30 Aug 2006 22:59:09 -0000
@@ -53,6 +53,7 @@
 #include "nsXPIDLString.h"
 #include "nsJSUtils.h"
 #include "prmem.h"
+#include "jsapi.h"              // for JSAutoRequest
 #include "jsdbgapi.h"           // for JS_ClearWatchPointsForObject
 #include "nsReadableUtils.h"
 #include "nsDOMClassInfo.h"
@@ -524,6 +525,8 @@ nsGlobalWindow::FreeInnerObjects(JSConte
   mDocument = nsnull;
 
   if (mJSObject && cx) {
+    JSAutoRequest ar(cx);
+
     ::JS_ClearScope(cx, mJSObject);
     ::JS_ClearWatchPointsForObject(cx, mJSObject);
 
@@ -852,6 +855,8 @@ WindowStateHolder::~WindowStateHolder()
       return;
     }
 
+    JSAutoRequest ar(cx);
+
     mInnerWindow->FreeInnerObjects(cx);
   }
 }
@@ -1059,6 +1064,8 @@ nsGlobalWindow::SetNewDocument(nsIDOMDoc
 
     PRUint32 flags = 0;
 
+    JSAutoRequest ar(cx);
+
     // Make sure to clear scope on the outer window *before* we
     // initialize the new inner window. If we don't, things
     // (Object.prototype etc) could leak from the old outer to the new
@@ -1180,6 +1187,9 @@ nsGlobalWindow::SetNewDocument(nsIDOMDoc
             // calling scope.
             NS_ASSERTION(!currentInner->IsFrozen(),
                 "How does this opened window get into session history");
+
+            JSAutoRequest ar(cx);
+
             callerScx->SetTerminationFunction(ClearWindowScope,
                                               NS_STATIC_CAST(nsIDOMWindow *,
                                                              currentInner));
@@ -1192,6 +1202,7 @@ nsGlobalWindow::SetNewDocument(nsIDOMDoc
         // held in the bfcache.
         if (!currentInner->IsFrozen()) {
           if (!termFuncSet) {
+            JSAutoRequest ar(cx);
             ::JS_ClearScope(cx, currentInner->mJSObject);
             ::JS_ClearWatchPointsForObject(cx, currentInner->mJSObject);
           }
@@ -1211,6 +1222,8 @@ nsGlobalWindow::SetNewDocument(nsIDOMDoc
       // Loading a new page and creating a new inner window, *not*
       // restoring from session history.
 
+      JSAutoRequest ar(cx);
+
       // InitClassesWithNewWrappedGlobal() for the new inner window
       // sets the global object in cx to be the new wrapped global. We
       // don't want that, but re-initializing the outer window will
@@ -1312,6 +1325,8 @@ nsGlobalWindow::SetNewDocument(nsIDOMDoc
         // case we don't clear the inner window's scope, but we must
         // make sure the cached document property gets updated.
 
+        JSAutoRequest ar(cx);
+
         ::JS_DeleteProperty(cx, currentInner->mJSObject, "document");
       } else {
         rv = newInnerWindow->SetNewDocument(aDocument, nsnull,
@@ -1328,6 +1343,8 @@ nsGlobalWindow::SetNewDocument(nsIDOMDoc
           JSObject *nav;
           navigatorHolder->GetJSObject(&nav);
 
+          JSAutoRequest ar(cx);
+
           ::JS_DefineProperty(cx, newInnerWindow->mJSObject, "navigator",
                               OBJECT_TO_JSVAL(nav), nsnull, nsnull,
                               JSPROP_ENUMERATE);
@@ -1337,6 +1354,8 @@ nsGlobalWindow::SetNewDocument(nsIDOMDoc
       if (mArguments) {
         jsval args = OBJECT_TO_JSVAL(mArguments);
 
+        JSAutoRequest ar(cx);
+
         ::JS_SetProperty(cx, newInnerWindow->mJSObject, "arguments",
                          &args);
 
@@ -1383,6 +1402,8 @@ nsGlobalWindow::SetDocShell(nsIDocShell*
     nsGlobalWindow *currentInner = GetCurrentInnerWindowInternal();
 
     if (currentInner) {
+      JSAutoRequest ar(cx);
+
       currentInner->FreeInnerObjects(cx);
 
       nsCOMPtr<nsIDocument> doc =
@@ -1779,6 +1800,8 @@ nsGlobalWindow::SetNewArguments(PRUint32
                  (cx = (JSContext *)mContext->GetNativeContext()),
                  NS_ERROR_NOT_INITIALIZED);
 
+  JSAutoRequest ar(cx);
+
   if (mArguments) {
     ::JS_UnlockGCThing(cx, mArguments);
     mArguments = nsnull;
@@ -3479,18 +3502,18 @@ nsGlobalWindow::Prompt(nsAString& aRetur
   PRUint32 savePassword = nsIAuthPrompt::SAVE_PASSWORD_NEVER;
 
   if (argc > 0) {
-    nsJSUtils::ConvertJSValToString(message, cx, argv[0]);
-
-    if (argc > 1) {
-      nsJSUtils::ConvertJSValToString(initial, cx, argv[1]);
-
-      if (argc > 2) {
+    JSAutoRequest ar(cx);
+    switch (argc) {
+      default:
+      case 4:
+        nsJSUtils::ConvertJSValToUint32(&savePassword, cx, argv[3]);
+      case 3:
         nsJSUtils::ConvertJSValToString(title, cx, argv[2]);
-
-        if (argc > 3) {
-          nsJSUtils::ConvertJSValToUint32(&savePassword, cx, argv[3]);
-        }
-      }
+      case 2:
+        nsJSUtils::ConvertJSValToString(initial, cx, argv[1]);
+      case 1:
+        nsJSUtils::ConvertJSValToString(message, cx, argv[0]);
+        break;
     }
   }
 
@@ -4354,14 +4377,16 @@ nsGlobalWindow::Open(nsIDOMWindow **_ret
   ncc->GetArgvPtr(&argv);
 
   if (argc > 0) {
-    nsJSUtils::ConvertJSValToString(url, cx, argv[0]);
-
-    if (argc > 1) {
-      nsJSUtils::ConvertJSValToString(name, cx, argv[1]);
-
-      if (argc > 2) {
+    JSAutoRequest ar(cx);
+    switch (argc) {
+      default:
+      case 3:
         nsJSUtils::ConvertJSValToString(options, cx, argv[2]);
-      }
+      case 2:
+        nsJSUtils::ConvertJSValToString(name, cx, argv[1]);
+      case 1:
+        nsJSUtils::ConvertJSValToString(url, cx, argv[0]);
+        break;
     }
   }
 
@@ -4419,14 +4444,16 @@ nsGlobalWindow::OpenDialog(nsIDOMWindow*
   ncc->GetArgvPtr(&argv);
 
   if (argc > 0) {
-    nsJSUtils::ConvertJSValToString(url, cx, argv[0]);
-
-    if (argc > 1) {
-      nsJSUtils::ConvertJSValToString(name, cx, argv[1]);
-
-      if (argc > 2) {
+    JSAutoRequest ar(cx);
+    switch (argc) {
+      default:
+      case 3:
         nsJSUtils::ConvertJSValToString(options, cx, argv[2]);
-      }
+      case 2:
+        nsJSUtils::ConvertJSValToString(name, cx, argv[1]);
+      case 1:
+        nsJSUtils::ConvertJSValToString(url, cx, argv[0]);
+        break;
     }
   }
 
@@ -4951,38 +4978,44 @@ nsGlobalWindow::Find(PRBool *aDidFind)
   PRBool searchInFrames = PR_FALSE;
 
   if (argc > 0) {
-    // First arg is the search pattern
-    nsJSUtils::ConvertJSValToString(searchStr, cx, argv[0]);
-  }
-
-  if (argc > 1 && !JS_ValueToBoolean(cx, argv[1], &caseSensitive)) {
-    // Second arg is the case sensitivity
-    caseSensitive = PR_FALSE;
-  }
-
-  if (argc > 2 && !JS_ValueToBoolean(cx, argv[2], &backwards)) {
-    // Third arg specifies whether to search backwards
-    backwards = PR_FALSE;
-  }
-
-  if (argc > 3 && !JS_ValueToBoolean(cx, argv[3], &wrapAround)) {
-    // Fourth arg specifies whether we should wrap the search
-    wrapAround = PR_FALSE;
-  }
-
-  if (argc > 4 && !JS_ValueToBoolean(cx, argv[4], &wholeWord)) {
-    // Fifth arg specifies whether we should show the Find dialog
-    wholeWord = PR_FALSE;
-  }
-
-  if (argc > 5 && !JS_ValueToBoolean(cx, argv[5], &searchInFrames)) {
-    // Sixth arg specifies whether we should search only for whole words
-    searchInFrames = PR_FALSE;
-  }
-
-  if (argc > 6 && !JS_ValueToBoolean(cx, argv[6], &showDialog)) {
-    // Seventh arg specifies whether we should search in all frames
-    showDialog = PR_FALSE;
+    JSAutoRequest ar(cx);
+    switch (argc) {
+      default:
+      case 7:
+        if (!JS_ValueToBoolean(cx, argv[6], &showDialog)) {
+          // Seventh arg specifies whether we should search in all frames
+          showDialog = PR_FALSE;
+        }
+      case 6:
+        if (!JS_ValueToBoolean(cx, argv[5], &searchInFrames)) {
+          // Sixth arg specifies whether we should search only for whole words
+          searchInFrames = PR_FALSE;
+        }
+      case 5:
+        if (!JS_ValueToBoolean(cx, argv[4], &wholeWord)) {
+          // Fifth arg specifies whether we should show the Find dialog
+          wholeWord = PR_FALSE;
+        }
+      case 4:
+        if (!JS_ValueToBoolean(cx, argv[3], &wrapAround)) {
+          // Fourth arg specifies whether we should wrap the search
+          wrapAround = PR_FALSE;
+        }
+      case 3:
+        if (!JS_ValueToBoolean(cx, argv[2], &backwards)) {
+          // Third arg specifies whether to search backwards
+          backwards = PR_FALSE;
+        }
+      case 2:
+        if (!JS_ValueToBoolean(cx, argv[1], &caseSensitive)) {
+          // Second arg is the case sensitivity
+          caseSensitive = PR_FALSE;
+        }
+      case 1:
+        // First arg is the search pattern
+        nsJSUtils::ConvertJSValToString(searchStr, cx, argv[0]);
+        break;
+    }
   }
 
   return FindInternal(searchStr, caseSensitive, backwards, wrapAround,
@@ -5500,6 +5533,8 @@ nsGlobalWindow::GetObjectProperty(const 
 
   jsval propertyVal;
 
+  JSAutoRequest ar(cx);
+
   if (!::JS_LookupUCProperty(cx, mJSObject,
                              NS_REINTERPRET_CAST(const jschar *, aProperty),
                              nsCRT::strlen(aProperty), &propertyVal)) {
@@ -6274,6 +6309,8 @@ nsGlobalWindow::ClearWindowScope(nsISupp
     JSContext *cx = (JSContext *)scx->GetNativeContext();
     JSObject *global = sgo->GetGlobalJSObject();
 
+    JSAutoRequest ar(cx);
+
     if (global) {
       ::JS_ClearScope(cx, global);
       ::JS_ClearWatchPointsForObject(cx, global);
@@ -6329,17 +6366,19 @@ nsGlobalWindow::SetTimeoutOrInterval(PRB
   nsTimeout *timeout;
   jsdouble interval = 0.0;
 
+  JSAutoRequest ar(cx);
+
   if (argc < 1) {
     ::JS_ReportError(cx, "Function %s requires at least 1 parameter",
-                     aIsInterval ? kSetIntervalStr : kSetTimeoutStr);
+                    aIsInterval ? kSetIntervalStr : kSetTimeoutStr);
 
     return ncc->SetExceptionWasThrown(PR_TRUE);
   }
 
   if (argc > 1 && !::JS_ValueToNumber(cx, argv[1], &interval)) {
     ::JS_ReportError(cx,
-                     "Second argument to %s must be a millisecond interval",
-                     aIsInterval ? kSetIntervalStr : kSetTimeoutStr);
+                    "Second argument to %s must be a millisecond interval",
+                    aIsInterval ? kSetIntervalStr : kSetTimeoutStr);
 
     return ncc->SetExceptionWasThrown(PR_TRUE);
   }
@@ -6359,7 +6398,7 @@ nsGlobalWindow::SetTimeoutOrInterval(PRB
 
   default:
     ::JS_ReportError(cx, "useless %s call (missing quotes around argument?)",
-                     aIsInterval ? kSetIntervalStr : kSetTimeoutStr);
+                    aIsInterval ? kSetIntervalStr : kSetTimeoutStr);
 
     return ncc->SetExceptionWasThrown(PR_TRUE);
   }
@@ -6969,6 +7008,8 @@ nsGlobalWindow::ClearTimeoutOrInterval()
 
   int32 timer_id;
 
+  JSAutoRequest ar(cx);
+
   if (argv[0] == JSVAL_VOID || !::JS_ValueToInt32(cx, argv[0], &timer_id) ||
       timer_id <= 0) {
     // Undefined or non-positive number passed as argument, return
@@ -8182,6 +8223,8 @@ nsNavigator::Preference()
   rv = ncc->GetJSContext(&cx);
   NS_ENSURE_SUCCESS(rv, rv);
 
+  JSAutoRequest ar(cx);
+
   //--Check to see if the caller is allowed to access prefs
   if (sPrefInternal_id == JSVAL_VOID) {
     sPrefInternal_id =
Index: dom/src/base/nsJSEnvironment.cpp
===================================================================
RCS file: /cvsroot/mozilla/dom/src/base/nsJSEnvironment.cpp,v
retrieving revision 1.262.2.12
diff -u -p -r1.262.2.12 nsJSEnvironment.cpp
--- dom/src/base/nsJSEnvironment.cpp	31 Jul 2006 07:03:19 -0000	1.262.2.12
+++ dom/src/base/nsJSEnvironment.cpp	30 Aug 2006 22:59:09 -0000
@@ -902,8 +902,11 @@ nsJSContext::EvaluateStringWithValue(con
     if (ok) {
       JSVersion oldVersion = JSVERSION_UNKNOWN;
 
+      JSAutoRequest ar(mContext);
+
       if (aVersion)
         oldVersion = ::JS_SetVersion(mContext, newVersion);
+
       ok = ::JS_EvaluateUCScriptForPrincipals(mContext,
                                               (JSObject *)aScopeObject,
                                               jsprin,
@@ -1086,8 +1089,11 @@ nsJSContext::EvaluateString(const nsAStr
     if (ok) {
       JSVersion oldVersion = JSVERSION_UNKNOWN;
 
+      JSAutoRequest ar(mContext);
+
       if (aVersion)
         oldVersion = ::JS_SetVersion(mContext, newVersion);
+
       ok = ::JS_EvaluateUCScriptForPrincipals(mContext,
                                               (JSObject *)aScopeObject,
                                               jsprin,
@@ -1116,6 +1122,7 @@ nsJSContext::EvaluateString(const nsAStr
 
   // If all went well, convert val to a string (XXXbe unless undefined?).
   if (ok) {
+    JSAutoRequest ar(mContext);
     rv = JSValueToAString(mContext, val, aRetValue, aIsUndefined);
   }
   else {
@@ -1178,6 +1185,9 @@ nsJSContext::CompileScript(const PRUnich
     if (!aVersion ||
         (newVersion = ::JS_StringToVersion(aVersion)) != JSVERSION_UNKNOWN) {
       JSVersion oldVersion = JSVERSION_UNKNOWN;
+
+      JSAutoRequest ar(mContext);
+
       if (aVersion)
         oldVersion = ::JS_SetVersion(mContext, newVersion);
 
@@ -1195,8 +1205,7 @@ nsJSContext::CompileScript(const PRUnich
           ::JS_DestroyScript(mContext, script);
           script = nsnull;
         }
-      }
-      if (!script)
+      } else
         rv = NS_ERROR_OUT_OF_MEMORY;
 
       if (aVersion)
@@ -1250,6 +1259,7 @@ nsJSContext::ExecuteScript(void* aScript
   JSBool ok;
 
   nsJSContext::TerminationFuncHolder holder(this);
+  JSAutoRequest ar(mContext);
   ok = ::JS_ExecuteScript(mContext,
                           (JSObject*) aScopeObject,
                           (JSScript*) ::JS_GetPrivate(mContext,
@@ -1258,7 +1268,6 @@ nsJSContext::ExecuteScript(void* aScript
 
   if (ok) {
     // If all went well, convert val to a string (XXXbe unless undefined?).
-
     rv = JSValueToAString(mContext, val, aRetValue, aIsUndefined);
   } else {
     if (aIsUndefined) {
@@ -1347,6 +1356,8 @@ nsJSContext::CompileEventHandler(void *a
 
   const char *argList[] = { aEventName };
 
+  JSAutoRequest ar(mContext);
+
   JSFunction* fun =
       ::JS_CompileUCFunctionForPrincipals(mContext,
                                           aShared ? nsnull : target, jsprin,
@@ -1396,6 +1407,9 @@ nsJSContext::CompileFunction(void* aTarg
   }
 
   JSObject *target = (JSObject*)aTarget;
+
+  JSAutoRequest ar(mContext);
+
   JSFunction* fun =
       ::JS_CompileUCFunctionForPrincipals(mContext,
                                           aShared ? nsnull : target, jsprin,
@@ -1444,8 +1458,10 @@ nsJSContext::CallEventHandler(JSObject *
 
   if (NS_SUCCEEDED(rv)) {
     jsval funval = OBJECT_TO_JSVAL(aHandler);
-    PRBool ok = ::JS_CallFunctionValue(mContext, aTarget, funval, argc, argv,
-                                       rval);
+
+    JSAutoRequest ar(mContext);
+
+    PRBool ok = ::JS_CallFunctionValue(mContext, aTarget, funval, argc, argv, rval);
 
     if (!ok) {
       // Tell XPConnect about any pending exceptions. This is needed
@@ -1465,6 +1481,8 @@ nsJSContext::CallEventHandler(JSObject *
   if (NS_FAILED(stack->Pop(nsnull)))
     return NS_ERROR_FAILURE;
 
+  JSAutoRequest ar(mContext);
+
   // Need to lock, since ScriptEvaluated can GC.
   PRBool locked = PR_FALSE;
   if (NS_SUCCEEDED(rv) && JSVAL_IS_GCTHING(*rval)) {
@@ -1505,6 +1523,8 @@ nsJSContext::BindCompiledEventHandler(vo
     return NS_ERROR_FAILURE;
   }
 
+  JSAutoRequest ar(mContext);
+
   // Make sure the handler function is parented by its event target object
   if (funobj && ::JS_GetParent(mContext, funobj) != target) {
     funobj = ::JS_CloneFunctionObject(mContext, funobj, target);
@@ -1645,6 +1665,7 @@ nsJSContext::InitContext(nsIScriptGlobal
     // Now check whether we need to grab a pointer to the
     // XPCNativeWrapper class
     if (!NS_DOMClassInfo_GetXPCNativeWrapperClass()) {
+      JSAutoRequest ar(mContext);
       rv = FindXPCNativeWrapperClass(holder);
       NS_ENSURE_SUCCESS(rv, rv);
     }
@@ -1713,6 +1734,7 @@ nsJSContext::InitializeLiveConnectClasse
         do_QueryInterface(jvmManager);
 
       if (liveConnectManager) {
+        JSAutoRequest ar(mContext);
         rv = liveConnectManager->InitLiveConnectClasses(mContext, aGlobalObj);
       }
     }
@@ -2016,6 +2038,8 @@ nsJSContext::InitClasses(JSObject *aGlob
   rv = InitializeLiveConnectClasses(aGlobalObj);
   NS_ENSURE_SUCCESS(rv, rv);
 
+  JSAutoRequest ar(mContext);
+
   // Initialize the options object and set default options in mContext
   JSObject *optionsObj = ::JS_DefineObject(mContext, aGlobalObj, "_options",
                                            &OptionsClass, nsnull, 0);
Index: dom/src/base/nsLocation.cpp
===================================================================
RCS file: /cvsroot/mozilla/dom/src/base/nsLocation.cpp,v
retrieving revision 1.136.2.2
diff -u -p -r1.136.2.2 nsLocation.cpp
--- dom/src/base/nsLocation.cpp	22 Jun 2006 22:19:29 -0000	1.136.2.2
+++ dom/src/base/nsLocation.cpp	30 Aug 2006 22:59:09 -0000
@@ -913,6 +913,7 @@ nsLocation::Reload()
     rv = ncc->GetJSContext(&cx);
     NS_ENSURE_SUCCESS(rv, rv);
 
+    JSAutoRequest ar(cx);
     JS_ValueToBoolean(cx, argv[0], &force_get);
   }
 
Index: dom/src/base/nsPluginArray.cpp
===================================================================
RCS file: /cvsroot/mozilla/dom/src/base/nsPluginArray.cpp,v
retrieving revision 1.29.12.1
diff -u -p -r1.29.12.1 nsPluginArray.cpp
--- dom/src/base/nsPluginArray.cpp	25 Jun 2006 06:57:13 -0000	1.29.12.1
+++ dom/src/base/nsPluginArray.cpp	30 Aug 2006 22:59:09 -0000
@@ -270,6 +270,7 @@ nsPluginArray::Refresh()
     rv = ncc->GetJSContext(&cx);
     NS_ENSURE_SUCCESS(rv, rv);
 
+    JSAutoRequest ar(cx);
     JS_ValueToBoolean(cx, argv[0], &reload_doc);
   }
 
Index: dom/src/events/nsJSEventListener.cpp
===================================================================
RCS file: /cvsroot/mozilla/dom/src/events/nsJSEventListener.cpp,v
retrieving revision 1.50.2.1
diff -u -p -r1.50.2.1 nsJSEventListener.cpp
--- dom/src/events/nsJSEventListener.cpp	19 Sep 2005 19:09:11 -0000	1.50.2.1
+++ dom/src/events/nsJSEventListener.cpp	30 Aug 2006 22:59:09 -0000
@@ -60,6 +60,8 @@ nsJSEventListener::nsJSEventListener(nsI
   if (aScopeObject && aContext) {
     JSContext *cx = (JSContext *)aContext->GetNativeContext();
 
+    JSAutoRequest ar(cx);
+
     ::JS_LockGCThing(cx, aScopeObject);
   }
 }
@@ -69,6 +71,8 @@ nsJSEventListener::~nsJSEventListener() 
   if (mScopeObject && mContext) {
     JSContext *cx = (JSContext *)mContext->GetNativeContext();
 
+    JSAutoRequest ar(cx);
+
     ::JS_UnlockGCThing(cx, mScopeObject);
   }
 }
@@ -138,6 +142,8 @@ nsJSEventListener::HandleEvent(nsIDOMEve
   rv = wrapper->GetJSObject(&obj);
   NS_ENSURE_SUCCESS(rv, rv);
 
+  JSAutoRequest ar(cx);
+
   if (!JS_LookupUCProperty(cx, obj,
                            NS_REINTERPRET_CAST(const jschar *,
                                                eventString.get()),
@@ -170,7 +176,7 @@ nsJSEventListener::HandleEvent(nsIDOMEve
 
   if (!handledScriptError) {
     rv = xpc->WrapNative(cx, obj, aEvent, NS_GET_IID(nsIDOMEvent),
-                         getter_AddRefs(wrapper));
+                        getter_AddRefs(wrapper));
     NS_ENSURE_SUCCESS(rv, rv);
 
     JSObject *eventObj = nsnull;
@@ -185,9 +191,8 @@ nsJSEventListener::HandleEvent(nsIDOMEve
   rv = mContext->CallEventHandler(obj, JSVAL_TO_OBJECT(funval), argc, argv,
                                   &rval);
 
-  if (argv != &arg) {
+  if (argv != &arg)
     ::JS_PopArguments(cx, stackPtr);
-  }
 
   if (NS_SUCCEEDED(rv)) {
     if (eventString.EqualsLiteral("onbeforeunload")) {
@@ -218,9 +223,8 @@ nsJSEventListener::HandleEvent(nsIDOMEve
       // the usual (false means cancel), then prevent default.
 
       if (JSVAL_TO_BOOLEAN(rval) ==
-          (mReturnResult == nsReturnResult_eReverseReturnResult)) {
+           (mReturnResult == nsReturnResult_eReverseReturnResult))
         aEvent->PreventDefault();
-      }
     }
   }
 
Index: embedding/components/windowwatcher/src/nsWindowWatcher.cpp
===================================================================
RCS file: /cvsroot/mozilla/embedding/components/windowwatcher/src/nsWindowWatcher.cpp,v
retrieving revision 1.100.2.15
diff -u -p -r1.100.2.15 nsWindowWatcher.cpp
--- embedding/components/windowwatcher/src/nsWindowWatcher.cpp	15 Aug 2006 00:06:30 -0000	1.100.2.15
+++ embedding/components/windowwatcher/src/nsWindowWatcher.cpp	30 Aug 2006 22:59:10 -0000
@@ -2083,7 +2083,8 @@ nsWindowWatcher::AddSupportsTojsvals(nsI
 
       p->GetData(data);
 
-      
+      JSAutoRequest ar(cx);
+
       JSString *str = ::JS_NewStringCopyN(cx, data.get(), data.Length());
       NS_ENSURE_TRUE(str, NS_ERROR_OUT_OF_MEMORY);
 
@@ -2099,6 +2100,8 @@ nsWindowWatcher::AddSupportsTojsvals(nsI
 
       p->GetData(data);
 
+      JSAutoRequest ar(cx);
+
       // cast is probably safe since wchar_t and jschar are expected
       // to be equivalent; both unsigned 16-bit entities
       JSString *str =
@@ -2166,6 +2169,8 @@ nsWindowWatcher::AddSupportsTojsvals(nsI
 
       p->GetData(&data);
 
+      JSAutoRequest ar(cx);
+
       JSString *str = ::JS_NewStringCopyN(cx, &data, 1);
       NS_ENSURE_TRUE(str, NS_ERROR_OUT_OF_MEMORY);
 
@@ -2205,6 +2210,8 @@ nsWindowWatcher::AddSupportsTojsvals(nsI
 
       p->GetData(&data);
 
+      JSAutoRequest ar(cx);
+
       jsdouble *d = ::JS_NewDouble(cx, data);
 
       *aArgv = DOUBLE_TO_JSVAL(d);
@@ -2219,6 +2226,8 @@ nsWindowWatcher::AddSupportsTojsvals(nsI
 
       p->GetData(&data);
 
+      JSAutoRequest ar(cx);
+
       jsdouble *d = ::JS_NewDouble(cx, data);
 
       *aArgv = DOUBLE_TO_JSVAL(d);
Index: js/jsd/jsd_high.c
===================================================================
RCS file: /cvsroot/mozilla/js/jsd/jsd_high.c,v
retrieving revision 3.12
diff -u -p -r3.12 jsd_high.c
--- js/jsd/jsd_high.c	18 Apr 2004 21:57:30 -0000	3.12
+++ js/jsd/jsd_high.c	30 Aug 2006 22:59:14 -0000
@@ -135,12 +135,14 @@ _newJSDContext(JSRuntime*         jsrt, 
     if( ! jsdc->dumbContext )
         goto label_newJSDContext_failure;
 
+    JS_BeginRequest(jsdc->dumbContext);
     jsdc->glob = JS_NewObject(jsdc->dumbContext, &global_class, NULL, NULL);
     if( ! jsdc->glob )
         goto label_newJSDContext_failure;
 
     if( ! JS_InitStandardClasses(jsdc->dumbContext, jsdc->glob) )
         goto label_newJSDContext_failure;
+    JS_EndRequest(jsdc->dumbContext);
 
     jsdc->data = NULL;
     jsdc->inited = JS_TRUE;
@@ -156,6 +158,7 @@ label_newJSDContext_failure:
     jsd_DestroyAtomTable(jsdc);
     if( jsdc )
         free(jsdc);
+    JS_EndRequest(jsdc->dumbContext);
     return NULL;
 }
 
Index: js/jsd/jsd_stak.c
===================================================================
RCS file: /cvsroot/mozilla/js/jsd/jsd_stak.c,v
retrieving revision 3.21
diff -u -p -r3.21 jsd_stak.c
--- js/jsd/jsd_stak.c	8 Aug 2004 19:56:49 -0000	3.21
+++ js/jsd/jsd_stak.c	30 Aug 2006 22:59:14 -0000
@@ -316,7 +316,9 @@ jsd_GetScopeChainForStackFrame(JSDContex
 
     if( jsd_IsValidFrameInThreadState(jsdc, jsdthreadstate, jsdframe) )
     {
+        JS_BeginRequest(jsdthreadstate->context);
         obj = JS_GetFrameScopeChain(jsdthreadstate->context, jsdframe->fp); 
+        JS_EndRequest(jsdthreadstate->context);
         if(obj)                                                             
             jsdval = JSD_NewValue(jsdc, OBJECT_TO_JSVAL(obj));              
     }
Index: js/jsd/jsd_val.c
===================================================================
RCS file: /cvsroot/mozilla/js/jsd/jsd_val.c,v
retrieving revision 3.9.28.1
diff -u -p -r3.9.28.1 jsd_val.c
--- js/jsd/jsd_val.c	7 Jul 2006 02:12:01 -0000	3.9.28.1
+++ js/jsd/jsd_val.c	30 Aug 2006 22:59:14 -0000
@@ -153,15 +153,16 @@ jsd_IsValueNative(JSDContext* jsdc, JSDV
 
     if(jsd_IsValueFunction(jsdc, jsdval))
     {
+        JSBool ok;
+        JS_BeginRequest(cx);
         exceptionState = JS_SaveExceptionState(cx);
         fun = JS_ValueToFunction(cx, val);
         JS_RestoreExceptionState(cx, exceptionState);
-        if(!fun)
-        {
-            JS_ASSERT(0);
-            return JS_FALSE;
-        }
-        return JS_GetFunctionScript(cx, fun) ? JS_FALSE : JS_TRUE;
+        if(fun)
+          ok = JS_GetFunctionScript(cx, fun) ? JS_TRUE : JS_FALSE;
+        JS_EndRequest(cx);
+        JS_ASSERT(fun);
+        return ok;
     }
     return !JSVAL_IS_PRIMITIVE(val);
 }
@@ -208,6 +209,7 @@ jsd_GetValueString(JSDContext* jsdc, JSD
             jsdval->string = JSVAL_TO_STRING(jsdval->val);
         else
         {
+            JS_BeginRequest(cx);
             exceptionState = JS_SaveExceptionState(cx);
             jsdval->string = JS_ValueToString(cx, jsdval->val);
             JS_RestoreExceptionState(cx, exceptionState);
@@ -216,6 +218,7 @@ jsd_GetValueString(JSDContext* jsdc, JSD
                 if(!JS_AddNamedRoot(cx, &jsdval->string, "ValueString"))
                     jsdval->string = NULL;
             }
+            JS_EndRequest(cx);
         }
     }
     return jsdval->string;
@@ -230,9 +233,11 @@ jsd_GetValueFunctionName(JSDContext* jsd
 
     if(!jsdval->funName && jsd_IsValueFunction(jsdc, jsdval))
     {
+        JS_BeginRequest(cx);
         exceptionState = JS_SaveExceptionState(cx);
         fun = JS_ValueToFunction(cx, jsdval->val);
         JS_RestoreExceptionState(cx, exceptionState);
+        JS_EndRequest(cx);
         if(!fun)
             return NULL;
         jsdval->funName = JS_GetFunctionName(fun);
@@ -252,7 +257,11 @@ jsd_NewValue(JSDContext* jsdc, jsval val
 
     if(JSVAL_IS_GCTHING(val))
     {
-        if(!JS_AddNamedRoot(jsdc->dumbContext, &jsdval->val, "JSDValue"))
+        JSBool ok = JS_FALSE;
+        JS_BeginRequest(jsdc->dumbContext);
+        ok = JS_AddNamedRoot(jsdc->dumbContext, &jsdval->val, "JSDValue");
+        JS_EndRequest(jsdc->dumbContext);
+        if(!ok)
         {
             free(jsdval);
             return NULL;
@@ -273,7 +282,11 @@ jsd_DropValue(JSDContext* jsdc, JSDValue
     {
         jsd_RefreshValue(jsdc, jsdval);
         if(JSVAL_IS_GCTHING(jsdval->val))
+        {
+            JS_BeginRequest(jsdc->dumbContext);
             JS_RemoveRoot(jsdc->dumbContext, &jsdval->val);
+            JS_EndRequest(jsdc->dumbContext);
+        }
         free(jsdval);
     }
 }
@@ -340,8 +353,12 @@ static JSBool _buildProps(JSDContext* js
     if(!JSVAL_IS_OBJECT(jsdval->val) || JSVAL_IS_NULL(jsdval->val))
         return JS_FALSE;
 
+    JS_BeginRequest(cx);
     if(!JS_GetPropertyDescArray(cx, JSVAL_TO_OBJECT(jsdval->val), &pda))
+    {
+        JS_EndRequest(cx);
         return JS_FALSE;
+    }
 
     for(i = 0; i < pda.length; i++)
     {
@@ -354,6 +371,7 @@ static JSBool _buildProps(JSDContext* js
         JS_APPEND_LINK(&prop->links, &jsdval->props);
     }
     JS_PutPropertyDescArray(cx, &pda);
+    JS_EndRequest(cx);
     SET_BIT_FLAG(jsdval->flags, GOT_PROPS);
     return !JS_CLIST_IS_EMPTY(&jsdval->props);
 }
@@ -370,7 +388,11 @@ jsd_RefreshValue(JSDContext* jsdc, JSDVa
     {
         /* if the jsval is a string, then we didn't need to root the string */
         if(!JSVAL_IS_STRING(jsdval->val))
+        {
+            JS_BeginRequest(cx);
             JS_RemoveRoot(cx, &jsdval->string);
+            JS_EndRequest(cx);
+        }
         jsdval->string = NULL;
     }
 
@@ -459,9 +481,14 @@ jsd_GetValueProperty(JSDContext* jsdc, J
     nameChars = JS_GetStringChars(name);
     nameLen   = JS_GetStringLength(name);
 
+    JS_BeginRequest(cx);
+
     JS_GetUCPropertyAttributes(cx, obj, nameChars, nameLen, &attrs, &found);
     if (!found)
+    {
+        JS_EndRequest(cx);
         return NULL;
+    }
 
     JS_ClearPendingException(cx);
 
@@ -470,7 +497,10 @@ jsd_GetValueProperty(JSDContext* jsdc, J
         if (JS_IsExceptionPending(cx))
         {
             if (!JS_GetPendingException(cx, &pd.value))
+            {
+                JS_EndRequest(cx);
                 return NULL;
+            }
             pd.flags = JSPD_EXCEPTION;
         }
         else
@@ -484,6 +514,8 @@ jsd_GetValueProperty(JSDContext* jsdc, J
         pd.value = val;
     }
 
+    JS_EndRequest(cx);
+
     pd.id = STRING_TO_JSVAL(name);
     pd.alias = pd.slot = pd.spare = 0;
     pd.flags |= (attrs & JSPROP_ENUMERATE) ? JSPD_ENUMERATE : 0
@@ -507,7 +539,10 @@ jsd_GetValuePrototype(JSDContext* jsdc, 
             return NULL;
         if(!(obj = JSVAL_TO_OBJECT(jsdval->val)))
             return NULL;
-        if(!(proto = JS_GetPrototype(jsdc->dumbContext, obj)))
+        JS_BeginRequest(jsdc->dumbContext);
+        proto = JS_GetPrototype(jsdc->dumbContext,obj);
+        JS_EndRequest(jsdc->dumbContext);
+        if(!proto)
             return NULL;
         jsdval->proto = jsd_NewValue(jsdc, OBJECT_TO_JSVAL(proto));
     }
@@ -529,7 +564,10 @@ jsd_GetValueParent(JSDContext* jsdc, JSD
             return NULL;
         if(!(obj = JSVAL_TO_OBJECT(jsdval->val)))
             return NULL;
-        if(!(parent = JS_GetParent(jsdc->dumbContext,obj)))
+        JS_BeginRequest(jsdc->dumbContext);
+        parent = JS_GetParent(jsdc->dumbContext,obj);
+        JS_EndRequest(jsdc->dumbContext);
+        if(!parent)
             return NULL;
         jsdval->parent = jsd_NewValue(jsdc, OBJECT_TO_JSVAL(parent));
     }
@@ -554,7 +592,10 @@ jsd_GetValueConstructor(JSDContext* jsdc
             return NULL;
         if(!(proto = JS_GetPrototype(jsdc->dumbContext,obj)))
             return NULL;
-        if(!(ctor = JS_GetConstructor(jsdc->dumbContext,proto)))
+        JS_BeginRequest(jsdc->dumbContext);
+        ctor = JS_GetConstructor(jsdc->dumbContext,proto);
+        JS_EndRequest(jsdc->dumbContext);
+        if(!ctor)
             return NULL;
         jsdval->ctor = jsd_NewValue(jsdc, OBJECT_TO_JSVAL(ctor));
     }
@@ -572,8 +613,10 @@ jsd_GetValueClassName(JSDContext* jsdc, 
         JSObject* obj;
         if(!(obj = JSVAL_TO_OBJECT(val)))
             return NULL;
+        JS_BeginRequest(jsdc->dumbContext);
         if(JS_GET_CLASS(jsdc->dumbContext, obj))
             jsdval->className = JS_GET_CLASS(jsdc->dumbContext, obj)->name;
+        JS_EndRequest(jsdc->dumbContext);
     }
     return jsdval->className;
 }
Index: js/jsd/jsd_xpc.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/jsd/jsd_xpc.cpp,v
retrieving revision 1.72.2.1
diff -u -p -r1.72.2.1 jsd_xpc.cpp
--- js/jsd/jsd_xpc.cpp	20 Jun 2006 15:54:58 -0000	1.72.2.1
+++ js/jsd/jsd_xpc.cpp	30 Aug 2006 22:59:15 -0000
@@ -1017,6 +1017,7 @@ PCMapEntry *
 jsdScript::CreatePPLineMap()
 {    
     JSContext  *cx  = JSD_GetDefaultJSContext (mCx);
+    JSAutoRequest ar(cx);
     JSObject   *obj = JS_NewObject(cx, NULL, NULL, NULL);
     JSFunction *fun = JSD_GetJSFunction (mCx, mScript);
     JSScript   *script;
@@ -1262,18 +1263,19 @@ jsdScript::GetFunctionSource(nsAString &
         return NS_ERROR_FAILURE;
     }
     JSFunction *fun = JSD_GetJSFunction (mCx, mScript);
+
+    JSAutoRequest ar(cx);
+
     JSString *jsstr;
     if (fun)
-    {
         jsstr = JS_DecompileFunction (cx, fun, 4);
-    }
-    else
-    {
+    else {
         JSScript *script = JSD_GetJSScript (mCx, mScript);
         jsstr = JS_DecompileScript (cx, script, "ppscript", 4);
     }
     if (!jsstr)
         return NS_ERROR_FAILURE;
+
     aFunctionSource = NS_REINTERPRET_CAST(PRUnichar*, JS_GetStringChars(jsstr));
     return NS_OK;
 }
@@ -1911,6 +1913,9 @@ jsdStackFrame::Eval (const nsAString &by
     jsval jv;
 
     JSContext *cx = JSD_GetJSContext (mCx, mThreadState);
+
+    JSAutoRequest ar(cx);
+
     estate = JS_SaveExceptionState (cx);
     JS_ClearPendingException (cx);
 
@@ -1926,6 +1931,7 @@ jsdStackFrame::Eval (const nsAString &by
     }
 
     JS_RestoreExceptionState (cx, estate);
+
     JSDValue *jsdv = JSD_NewValue (mCx, jv);
     if (!jsdv)
         return NS_ERROR_FAILURE;
@@ -2231,8 +2237,13 @@ jsdValue::GetProperty (const char *name,
 {
     ASSERT_VALID_EPHEMERAL;
     JSContext *cx = JSD_GetDefaultJSContext (mCx);
+
+    JSAutoRequest ar(cx);
+
     /* not rooting this */
     JSString *jstr_name = JS_NewStringCopyZ (cx, name);
+    if (!jstr_name)
+        return NS_ERROR_OUT_OF_MEMORY;
 
     JSDProperty *prop = JSD_GetValueProperty (mCx, mValue, jstr_name);
     
Index: js/src/xpconnect/loader/mozJSSubScriptLoader.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/loader/mozJSSubScriptLoader.cpp,v
retrieving revision 1.18.56.2
diff -u -p -r1.18.56.2 mozJSSubScriptLoader.cpp
--- js/src/xpconnect/loader/mozJSSubScriptLoader.cpp	24 Jun 2006 02:27:01 -0000	1.18.56.2
+++ js/src/xpconnect/loader/mozJSSubScriptLoader.cpp	30 Aug 2006 22:59:15 -0000
@@ -137,6 +137,8 @@ mozJSSubScriptLoader::LoadSubScript (con
             return rv;
 
     }
+
+    JSAutoRequest ar(cx);
     
     char     *url;
     JSObject *target_obj = nsnull;
Index: js/src/xpconnect/shell/xpcshell.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/shell/xpcshell.cpp,v
retrieving revision 1.87.2.1
diff -u -p -r1.87.2.1 xpcshell.cpp
--- js/src/xpconnect/shell/xpcshell.cpp	1 Sep 2005 23:21:12 -0000	1.87.2.1
+++ js/src/xpconnect/shell/xpcshell.cpp	30 Aug 2006 22:59:15 -0000
@@ -1087,12 +1087,19 @@ main(int argc, char **argv, char **envp)
             NS_ASSERTION(glob == nsnull, "bad GetJSObject?");
             return 1;
         }
-        if (!JS_DefineFunctions(cx, glob, glob_functions))
+
+        JS_BeginRequest(cx);
+
+        if (!JS_DefineFunctions(cx, glob, glob_functions)) {
+            JS_EndRequest(cx);
             return 1;
+        }
 
         envobj = JS_DefineObject(cx, glob, "environment", &env_class, NULL, 0);
-        if (!envobj || !JS_SetPrivate(cx, envobj, envp))
+        if (!envobj || !JS_SetPrivate(cx, envobj, envp)) {
+            JS_EndRequest(cx);
             return 1;
+        }
 
         argc--;
         argv++;
Index: js/src/xpconnect/src/XPCNativeWrapper.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/src/XPCNativeWrapper.cpp,v
retrieving revision 1.31.2.9
diff -u -p -r1.31.2.9 XPCNativeWrapper.cpp
--- js/src/xpconnect/src/XPCNativeWrapper.cpp	15 Jun 2006 03:59:46 -0000	1.31.2.9
+++ js/src/xpconnect/src/XPCNativeWrapper.cpp	30 Aug 2006 22:59:15 -0000
@@ -693,6 +693,8 @@ XPC_NW_NewResolve(JSContext *cx, JSObjec
       return JS_TRUE;
     }
 
+    JSAutoRequest ar(cx);
+
     jsid interned_id;
     JSObject *pobj;
     JSProperty *prop;
@@ -877,8 +879,8 @@ XPC_NW_NewResolve(JSContext *cx, JSObjec
   }
 
   if (!::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
-                             ::JS_GetStringLength(str), v, nsnull, nsnull,
-                             attrs)) {
+                            ::JS_GetStringLength(str), v, nsnull, nsnull,
+                            attrs)) {
     return JS_FALSE;
   }
 
Index: js/src/xpconnect/src/xpcdebug.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/src/xpcdebug.cpp,v
retrieving revision 1.14
diff -u -p -r1.14 xpcdebug.cpp
--- js/src/xpconnect/src/xpcdebug.cpp	23 May 2005 21:00:06 -0000	1.14
+++ js/src/xpconnect/src/xpcdebug.cpp	30 Aug 2006 22:59:16 -0000
@@ -48,6 +48,7 @@
 
 static const char* JSVAL2String(JSContext* cx, jsval val, JSBool* isString)
 {
+    JSAutoRequest ar(cx);
     const char* value = nsnull;
     JSString* value_str = JS_ValueToString(cx, val);
     if(value_str)
@@ -89,6 +90,9 @@ static char* FormatJSFrame(JSContext* cx
 
     JSScript* script = JS_GetFrameScript(cx, fp);
     jsbytecode* pc = JS_GetFramePC(cx, fp);
+
+    JSAutoRequest ar(cx);
+
     if(script && pc)
     {
         filename = JS_GetScriptFilename(cx, script);
@@ -337,6 +341,8 @@ xpc_DumpEvalInJSStackFrame(JSContext* cx
         return JS_FALSE;
     }
 
+    JSAutoRequest ar(cx);
+
     JSExceptionState* exceptionState = JS_SaveExceptionState(cx);
     JSErrorReporter older = JS_SetErrorReporter(cx, xpcDumpEvalErrorReporter);
 
Index: js/src/xpconnect/src/xpcjsruntime.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/src/xpcjsruntime.cpp,v
retrieving revision 1.43.4.1
diff -u -p -r1.43.4.1 xpcjsruntime.cpp
--- js/src/xpconnect/src/xpcjsruntime.cpp	30 Jul 2006 20:17:24 -0000	1.43.4.1
+++ js/src/xpconnect/src/xpcjsruntime.cpp	30 Aug 2006 22:59:17 -0000
@@ -942,7 +942,10 @@ XPCJSRuntime::SyncXPCContextList(JSConte
 
         // if it is our first context then we need to generate our string ids
         if(!mStrIDs[0])
+        {
+            JSAutoRequest ar(cur);
             GenerateStringIDs(cur);
+        }
 
         if(cx && cx == cur)
             found = xpcc;
Index: js/src/xpconnect/src/xpcwrappednativeinfo.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/src/xpcwrappednativeinfo.cpp,v
retrieving revision 1.12.4.3
diff -u -p -r1.12.4.3 xpcwrappednativeinfo.cpp
--- js/src/xpconnect/src/xpcwrappednativeinfo.cpp	10 Mar 2006 18:38:07 -0000	1.12.4.3
+++ js/src/xpconnect/src/xpcwrappednativeinfo.cpp	30 Aug 2006 22:59:18 -0000
@@ -180,6 +180,8 @@ XPCNativeMember::Resolve(XPCCallContext&
         callback = XPC_WN_GetterSetter;
     }
 
+    JSAutoRequest ar(cx);
+
     JSFunction *fun = JS_NewFunction(cx, callback, argc, flags, nsnull,
                                      iface->GetMemberName(ccx, this));
     if(!fun)
Index: modules/plugin/base/src/ns4xPlugin.cpp
===================================================================
RCS file: /cvsroot/mozilla/modules/plugin/base/src/ns4xPlugin.cpp,v
retrieving revision 1.127.2.5
diff -u -p -r1.127.2.5 ns4xPlugin.cpp
--- modules/plugin/base/src/ns4xPlugin.cpp	7 Aug 2006 23:20:48 -0000	1.127.2.5
+++ modules/plugin/base/src/ns4xPlugin.cpp	30 Aug 2006 22:59:22 -0000
@@ -1561,6 +1561,7 @@ _getstringidentifier(const NPUTF8* name)
   if (!cx)
     return NULL;
 
+  JSAutoRequest ar(cx);
   return doGetIdentifier(cx, name);
 }
 
@@ -1578,6 +1579,8 @@ _getstringidentifiers(const NPUTF8** nam
   if (!cx)
     return;
 
+  JSAutoRequest ar(cx);
+
   for (int32_t i = 0; i < nameCount; ++i) {
     identifiers[i] = doGetIdentifier(cx, names[i]);
   }
Index: modules/plugin/base/src/nsJSNPRuntime.cpp
===================================================================
RCS file: /cvsroot/mozilla/modules/plugin/base/src/nsJSNPRuntime.cpp,v
retrieving revision 1.7.2.6
diff -u -p -r1.7.2.6 nsJSNPRuntime.cpp
--- modules/plugin/base/src/nsJSNPRuntime.cpp	7 Aug 2006 23:20:48 -0000	1.7.2.6
+++ modules/plugin/base/src/nsJSNPRuntime.cpp	30 Aug 2006 22:59:22 -0000
@@ -504,6 +504,7 @@ nsJSObjWrapper::NP_HasMethod(NPObject *n
 
   nsJSObjWrapper *npjsobj = (nsJSObjWrapper *)npobj;
   jsval v;
+  JSAutoRequest ar(cx);
   JSBool ok = GetProperty(cx, npjsobj->mJSObj, identifier, &v);
 
   return ok && !JSVAL_IS_PRIMITIVE(v) &&
@@ -523,6 +524,8 @@ doInvoke(NPObject *npobj, NPIdentifier m
     return PR_FALSE;
   }
 
+  JSAutoRequest ar(cx);
+
   // Initialize *result
   VOID_TO_NPVARIANT(*result);
 
@@ -619,6 +622,8 @@ nsJSObjWrapper::NP_HasProperty(NPObject 
   jsval id = (jsval)identifier;
   JSBool found, ok = JS_FALSE;
 
+  JSAutoRequest ar(cx);
+
   if (JSVAL_IS_STRING(id)) {
     JSString *str = JSVAL_TO_STRING(id);
 
@@ -649,6 +654,7 @@ nsJSObjWrapper::NP_GetProperty(NPObject 
   AutoCXPusher pusher(cx);
 
   jsval v;
+  JSAutoRequest ar(cx);
   return (GetProperty(cx, npjsobj->mJSObj, identifier, &v) &&
           JSValToNPVariant(npp, cx, v, result));
 }
@@ -669,6 +675,7 @@ nsJSObjWrapper::NP_SetProperty(NPObject 
   JSBool ok = JS_FALSE;
 
   AutoCXPusher pusher(cx);
+  JSAutoRequest ar(cx);
 
   jsval v = NPVariantToJSVal(npp, cx, value);
   JSAutoTempValueRooter tvr(cx, v);
@@ -704,6 +711,7 @@ nsJSObjWrapper::NP_RemoveProperty(NPObje
   JSBool ok = JS_FALSE;
 
   AutoCXPusher pusher(cx);
+  JSAutoRequest ar(cx);
 
   if (JSVAL_IS_STRING(id)) {
     JSString *str = JSVAL_TO_STRING(id);
@@ -848,6 +856,8 @@ nsJSObjWrapper::GetNewOrUsed(NPP npp, JS
 
   NS_ASSERTION(wrapper->mNpp == npp, "nsJSObjWrapper::mNpp not initialized!");
 
+  JSAutoRequest ar(cx);
+
   // Root the JSObject, its lifetime is now tied to that of the
   // NPObject.
   if (!::JS_AddNamedRoot(cx, &wrapper->mJSObj, "nsJSObjWrapper::mJSObject")) {
@@ -1280,6 +1290,8 @@ nsNPObjWrapper::GetNewOrUsed(NPP npp, JS
   entry->mNPObj = npobj;
   entry->mNpp = npp;
 
+  JSAutoRequest ar(cx);
+
   // No existing JSObject, create one.
 
   JSObject *obj = ::JS_NewObject(cx, &sNPObjectJSWrapperClass, nsnull, nsnull);
