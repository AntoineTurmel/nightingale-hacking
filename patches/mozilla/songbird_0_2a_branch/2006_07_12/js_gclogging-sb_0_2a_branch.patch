Index: js/src/jsgc.c
===================================================================
RCS file: /cvsroot/mozilla/js/src/jsgc.c,v
retrieving revision 3.104.2.11
diff -p -U8 -r3.104.2.11 jsgc.c
--- js/src/jsgc.c	7 Jul 2006 02:12:01 -0000	3.104.2.11
+++ js/src/jsgc.c	13 Jul 2006 00:34:43 -0000
@@ -67,16 +67,20 @@
 #include "jsiter.h"
 #include "jslock.h"
 #include "jsnum.h"
 #include "jsobj.h"
 #include "jsscope.h"
 #include "jsscript.h"
 #include "jsstr.h"
 
+#ifdef MOZILLA_CLIENT
+#include "nsTraceRefcnt.h"
+#endif
+
 #if JS_HAS_XML_SUPPORT
 #include "jsxml.h"
 #endif
 
 /*
  * GC arena sizing depends on amortizing arena overhead using a large number
  * of things per arena, and on the thing/flags ratio of 8:1 on most platforms.
  *
@@ -1236,16 +1240,20 @@ js_NewGCThing(JSContext *cx, uintN flags
 
         /* Consider doing a "last ditch" GC unless already tried. */
         if (doGC)
             goto fail;
         rt->gcPoke = JS_TRUE;
         doGC = JS_TRUE;
     }
 
+#if defined(DEBUG_SB_GC) && defined(MOZILLA_CLIENT)
+    NS_LOG_CREATE(thing, "JSGCThing");
+#endif
+
     /* We successfully allocated the thing. */
 #ifdef JS_THREADSAFE
   success:
 #endif
     lrs = cx->localRootStack;
     if (lrs) {
         /*
          * If we're in a local root scope, don't set cx->newborn[type] at all,
@@ -1734,16 +1742,17 @@ MarkGCThingChildren(JSContext *cx, void 
 #ifndef GC_MARK_DEBUG
   start:
 #endif
     JS_ASSERT(flagp);
     JS_ASSERT(*flagp & GCF_MARK); /* the caller must already mark the thing */
     METER(if (++rt->gcStats.depth > rt->gcStats.maxdepth)
               rt->gcStats.maxdepth = rt->gcStats.depth);
 #ifdef GC_MARK_DEBUG
+    js_DumpGCHeap = stdout;
     if (js_DumpGCHeap)
         gc_dump_thing(cx, thing, js_DumpGCHeap);
 #endif
 
     switch (*flagp & GCF_TYPEMASK) {
       case GCX_OBJECT:
         if (RECURSION_TOO_DEEP())
             goto add_to_unscanned_bag;
@@ -2497,16 +2506,19 @@ js_GC(JSContext *cx, uintN gcflags)
         if (acx->thread == cx->thread)
             continue;
         memset(acx->thread->gcFreeLists, 0, sizeof acx->thread->gcFreeLists);
     }
 #endif
 
 restart:
     rt->gcNumber++;
+#ifdef DEBUG_SB_GC
+    printf("Doing JS gC.\n");
+#endif
     JS_ASSERT(!rt->gcUnscannedArenaStackTop);
     JS_ASSERT(rt->gcUnscannedBagSize == 0);
 
     /*
      * Mark phase.
      */
     JS_DHashTableEnumerate(&rt->gcRootsHash, gc_root_marker, cx);
     if (rt->gcLocksHash)
@@ -2652,16 +2664,19 @@ restart:
                 JS_ASSERT(offset < limit);
                 flagp = a->base + offset / sizeof(JSGCThing);
                 if (flagp >= firstPage)
                     flagp += GC_THINGS_SIZE;
                 flags = *flagp;
                 if (flags & GCF_MARK) {
                     *flagp &= ~GCF_MARK;
                 } else if (!(flags & (GCF_LOCK | GCF_FINAL))) {
+#if defined(DEBUG_SB_GC) && defined(MOZILLA_CLIENT)
+                    NS_LOG_DESTROY(thing, "JSGCThing");
+#endif
                     /* Call the finalizer with GCF_FINAL ORed into flags. */
                     type = flags & GCF_TYPEMASK;
                     finalizer = gc_finalizers[type];
                     if (finalizer) {
                         thing = (JSGCThing *)(firstPage + offset);
                         *flagp = (uint8)(flags | GCF_FINAL);
                         if (type >= GCX_EXTERNAL_STRING)
                             js_PurgeDeflatedStringCache(rt, (JSString *)thing);
Index: js/src/jsgc.h
===================================================================
RCS file: /cvsroot/mozilla/js/src/jsgc.h,v
retrieving revision 3.33.4.1
diff -p -U8 -r3.33.4.1 jsgc.h
--- js/src/jsgc.h	7 Jul 2006 02:12:01 -0000	3.33.4.1
+++ js/src/jsgc.h	13 Jul 2006 00:34:44 -0000
@@ -41,16 +41,20 @@
 #define jsgc_h___
 /*
  * JS Garbage Collector.
  */
 #include "jsprvtd.h"
 #include "jspubtd.h"
 #include "jsdhash.h"
 
+#ifdef DEBUG_ben_off
+#define GC_MARK_DEBUG
+#endif
+
 JS_BEGIN_EXTERN_C
 
 /* GC thing type indexes. */
 #define GCX_OBJECT              0               /* JSObject */
 #define GCX_STRING              1               /* JSString */
 #define GCX_DOUBLE              2               /* jsdouble */
 #define GCX_MUTABLE_STRING      3               /* JSString that's mutable --
                                                    single-threaded only! */
@@ -305,15 +309,19 @@ struct JSGCArenaList {
     JSGCArenaStats stats;
 #endif
 };
 
 #ifdef DEBUG_notme
 #define TOO_MUCH_GC 1
 #endif
 
+#ifdef DEBUG_SB_GC
+#define TOO_MUCH_GC 1
+#endif
+
 #ifdef WAY_TOO_MUCH_GC
 #define TOO_MUCH_GC 1
 #endif
 
 JS_END_EXTERN_C
 
 #endif /* jsgc_h___ */
