Index: caps/src/nsScriptSecurityManager.cpp
===================================================================
RCS file: /cvsroot/mozilla/caps/src/nsScriptSecurityManager.cpp,v
retrieving revision 1.342
diff -u -p -r1.342 nsScriptSecurityManager.cpp
--- caps/src/nsScriptSecurityManager.cpp	31 Jan 2008 08:16:54 -0000	1.342
+++ caps/src/nsScriptSecurityManager.cpp	1 Feb 2008 19:29:53 -0000
@@ -594,6 +594,12 @@ nsScriptSecurityManager::CheckObjectAcce
     if (!ssm)
         return JS_FALSE;
 
+    nsCOMPtr<nsISupports> native;
+    nsresult rv =
+        sXPConnect->GetNativeOfJSObject(cx, obj,
+                                        NS_GET_IID(nsISupports),
+                                        getter_AddRefs(native));
+
     // Get the object being accessed.  We protect these cases:
     // 1. The Function.prototype.caller property's value, which might lead
     //    an attacker up a call-stack to a function or another object from
@@ -606,11 +612,12 @@ nsScriptSecurityManager::CheckObjectAcce
 
     // Do the same-origin check -- this sets a JS exception if the check fails.
     // Pass the parent object's class name, as we have no class-info for it.
-    nsresult rv =
-        ssm->CheckPropertyAccess(cx, target, STOBJ_GET_CLASS(obj)->name, id,
-                                 (mode & JSACC_WRITE) ?
-                                 nsIXPCSecurityManager::ACCESS_SET_PROPERTY :
-                                 nsIXPCSecurityManager::ACCESS_GET_PROPERTY);
+    rv = ssm->CheckPropertyAccessImpl(( (mode & JSACC_WRITE) ?
+                                        nsIXPCSecurityManager::ACCESS_SET_PROPERTY :
+                                        nsIXPCSecurityManager::ACCESS_GET_PROPERTY ),
+                                      nsnull, cx, target, native, nsnull,
+                                      nsnull, STOBJ_GET_CLASS(obj)->name, id,
+                                      nsnull);
 
     if (NS_FAILED(rv))
         return JS_FALSE; // Security check failed (XXX was an error reported?)
@@ -877,14 +884,24 @@ nsScriptSecurityManager::CheckPropertyAc
     nsXPIDLCString objectSecurityLevel;
     if (checkedComponent)
     {
-        nsCOMPtr<nsIXPConnectWrappedNative> wrapper;
-        nsCOMPtr<nsIInterfaceInfo> interfaceInfo;
-        const nsIID* objIID;
-        rv = aCallContext->GetCalleeWrapper(getter_AddRefs(wrapper));
-        if (NS_SUCCEEDED(rv))
-            rv = wrapper->FindInterfaceWithMember(aProperty, getter_AddRefs(interfaceInfo));
-        if (NS_SUCCEEDED(rv))
-            rv = interfaceInfo->GetIIDShared(&objIID);
+        const nsIID* objIID = nsnull;
+        if (aCallContext) {
+            // If we have a call context, find the wrapper and the IID
+            // with the member in question to pass to
+            // nsISecurityCheckedComponent, if not, pass a null IID
+            // and it's up to the implementation to decide if it wants
+            // to permit access or not.
+            nsCOMPtr<nsIXPConnectWrappedNative> wrapper;
+            nsCOMPtr<nsIInterfaceInfo> interfaceInfo;
+            rv = aCallContext->GetCalleeWrapper(getter_AddRefs(wrapper));
+            if (NS_SUCCEEDED(rv))
+                rv = wrapper->FindInterfaceWithMember(aProperty, getter_AddRefs(interfaceInfo));
+            if (NS_SUCCEEDED(rv))
+                rv = interfaceInfo->GetIIDShared(&objIID);
+        } else {
+            rv = NS_OK;
+        }
+
         if (NS_SUCCEEDED(rv))
         {
             switch (aAction)
Index: js/src/xpconnect/idl/nsIXPConnect.idl
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/idl/nsIXPConnect.idl,v
retrieving revision 1.70
diff -u -p -r1.70 nsIXPConnect.idl
--- js/src/xpconnect/idl/nsIXPConnect.idl	15 Jan 2008 15:51:00 -0000	1.70
+++ js/src/xpconnect/idl/nsIXPConnect.idl	1 Feb 2008 19:29:53 -0000
@@ -638,6 +638,17 @@ interface nsIXPConnect : nsISupports
                                   in PRBool aWantNativeWrappers);
 
     /**
+     * Get a native pointer of type aIID from aJSObject if the object
+     * is a wrapped native or a wrapped JS object, but never create a
+     * new wrapper, only use existing ones.
+     */
+    void
+    getNativeOfJSObject(in JSContextPtr aJSContext,
+                        in JSObjectPtr  aJSObj,
+                        in nsIIDRef     aIID,
+                        [iid_is(aIID),retval] out nsQIResult result);
+
+    /**
      * Restore an old prototype for wrapped natives of type
      * aClassInfo. This should be used only when restoring an old
      * scope into a state close to where it was prior to
Index: js/src/xpconnect/src/XPCDispConvert.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/src/XPCDispConvert.cpp,v
retrieving revision 1.17
diff -u -p -r1.17 XPCDispConvert.cpp
--- js/src/xpconnect/src/XPCDispConvert.cpp	31 Aug 2007 00:52:58 -0000	1.17
+++ js/src/xpconnect/src/XPCDispConvert.cpp	1 Feb 2008 19:29:53 -0000
@@ -331,6 +331,7 @@ JSBool XPCDispConvert::JSToCOM(XPCCallCo
                 obj, 
                 &NSID_IDISPATCH,
                 nsnull, 
+                PR_TRUE, 
                 &err))
             {
                 // Avoid cleaning up garbage
Index: js/src/xpconnect/src/nsXPConnect.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/src/nsXPConnect.cpp,v
retrieving revision 1.163
diff -u -p -r1.163 nsXPConnect.cpp
--- js/src/xpconnect/src/nsXPConnect.cpp	30 Jan 2008 02:05:44 -0000	1.163
+++ js/src/xpconnect/src/nsXPConnect.cpp	1 Feb 2008 19:29:53 -0000
@@ -1236,7 +1236,7 @@ nsXPConnect::WrapJS(JSContext * aJSConte
 
     nsresult rv;
     if(!XPCConvert::JSObject2NativeInterface(ccx, result, aJSObj,
-                                             &aIID, nsnull, &rv))
+                                             &aIID, nsnull, PR_TRUE, &rv))
         return rv;
     return NS_OK;
 }
@@ -1262,7 +1262,7 @@ nsXPConnect::WrapJSAggregatedToNative(ns
 
     nsresult rv;
     if(!XPCConvert::JSObject2NativeInterface(ccx, result, aJSObj,
-                                             &aIID, aOuter, &rv))
+                                             &aIID, aOuter, PR_TRUE, &rv))
         return rv;
     return NS_OK;
 }
@@ -2265,6 +2265,30 @@ nsXPConnect::RemoveJSHolder(void* aHolde
     return mRuntime->RemoveJSHolder(aHolder);
 }
 
+/* void getNativeOfJSObject(in JSContextPtr aJSContext, in JSObjectPtr aJSObj, in nsIIDRef aIID, [iid_is(aIID),retval] out nsQIResult result); */
+NS_IMETHODIMP
+nsXPConnect::GetNativeOfJSObject(JSContext * aJSContext,
+                                 JSObject * aJSObj,
+                                 const nsIID & aIID,
+                                 void * *result)
+{
+    NS_ASSERTION(aJSContext, "bad param");
+    NS_ASSERTION(aJSObj, "bad param");
+    NS_ASSERTION(result, "bad param");
+
+    *result = nsnull;
+
+    XPCCallContext ccx(NATIVE_CALLER, aJSContext);
+    if(!ccx.IsValid())
+        return UnexpectedFailure(NS_ERROR_FAILURE);
+
+    nsresult rv;
+    if(!XPCConvert::JSObject2NativeInterface(ccx, result, aJSObj,
+                                             &aIID, nsnull, PR_FALSE, &rv))
+        return rv;
+    return NS_OK;
+}
+
 #ifdef DEBUG
 /* These are here to be callable from a debugger */
 JS_BEGIN_EXTERN_C
Index: js/src/xpconnect/src/xpcconvert.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/src/xpcconvert.cpp,v
retrieving revision 1.124
diff -u -p -r1.124 xpcconvert.cpp
--- js/src/xpconnect/src/xpcconvert.cpp	28 Jan 2008 23:19:52 -0000	1.124
+++ js/src/xpconnect/src/xpcconvert.cpp	1 Feb 2008 19:29:53 -0000
@@ -1031,7 +1031,7 @@ XPCConvert::JSData2Native(XPCCallContext
             }
 
             return JSObject2NativeInterface(ccx, (void**)d, obj, iid,
-                                            nsnull, pErr);
+                                            nsnull, PR_TRUE, pErr);
         }
         default:
             NS_ASSERTION(0, "bad type");
@@ -1231,6 +1231,7 @@ XPCConvert::JSObject2NativeInterface(XPC
                                      void** dest, JSObject* src,
                                      const nsID* iid,
                                      nsISupports* aOuter,
+                                     PRBool createNew,
                                      nsresult* pErr)
 {
     NS_ASSERTION(dest, "bad param");
@@ -1240,7 +1241,7 @@ XPCConvert::JSObject2NativeInterface(XPC
     JSContext* cx = ccx.GetJSContext();
 
     *dest = nsnull;
-     if(pErr)
+    if(pErr)
         *pErr = NS_ERROR_XPC_BAD_CONVERT_JS;
 
     nsISupports* iface;
@@ -1289,8 +1290,15 @@ XPCConvert::JSObject2NativeInterface(XPC
 
     // else...
 
+    nsresult rv;
+
     nsXPCWrappedJS* wrapper;
-    nsresult rv = nsXPCWrappedJS::GetNewOrUsed(ccx, src, *iid, aOuter, &wrapper);
+    if (createNew) {
+        rv = nsXPCWrappedJS::GetNewOrUsed(ccx, src, *iid, aOuter, &wrapper);
+    } else {
+        rv = nsXPCWrappedJS::GetUsedOnly(ccx, src, *iid, aOuter, &wrapper);
+    }
+
     if(pErr)
         *pErr = rv;
     if(NS_SUCCEEDED(rv) && wrapper)
Index: js/src/xpconnect/src/xpcprivate.h
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/src/xpcprivate.h,v
retrieving revision 1.278
diff -u -p -r1.278 xpcprivate.h
--- js/src/xpconnect/src/xpcprivate.h	30 Jan 2008 02:28:58 -0000	1.278
+++ js/src/xpconnect/src/xpcprivate.h	1 Feb 2008 19:29:53 -0000
@@ -2514,6 +2514,12 @@ public:
                  REFNSIID aIID,
                  nsISupports* aOuter,
                  nsXPCWrappedJS** wrapper);
+    static nsresult
+    GetUsedOnly(XPCCallContext& ccx,
+                JSObject* aJSObj,
+                REFNSIID aIID,
+                nsISupports* aOuter,
+                nsXPCWrappedJS** wrapperResult);
 
     nsISomeInterface* GetXPTCStub() { return mXPTCStub; }
     JSObject* GetJSObject() const {return mJSObj;}
@@ -2691,6 +2697,7 @@ public:
                                            void** dest, JSObject* src,
                                            const nsID* iid,
                                            nsISupports* aOuter,
+                                           PRBool createNew,
                                            nsresult* pErr);
 
     /**
Index: js/src/xpconnect/src/xpcwrappedjs.cpp
===================================================================
RCS file: /cvsroot/mozilla/js/src/xpconnect/src/xpcwrappedjs.cpp,v
retrieving revision 1.70
diff -u -p -r1.70 xpcwrappedjs.cpp
--- js/src/xpconnect/src/xpcwrappedjs.cpp	1 Feb 2008 01:06:53 -0000	1.70
+++ js/src/xpconnect/src/xpcwrappedjs.cpp	1 Feb 2008 19:29:53 -0000
@@ -407,6 +407,68 @@ return_wrapper:
     return NS_OK;
 }
 
+// static
+nsresult
+nsXPCWrappedJS::GetUsedOnly(XPCCallContext& ccx,
+                            JSObject* aJSObj,
+                            REFNSIID aIID,
+                            nsISupports* aOuter,
+                            nsXPCWrappedJS** wrapperResult)
+{
+    JSObject2WrappedJSMap* map;
+    JSBool hasProp;
+    JSObject* rootJSObj;
+    nsXPCWrappedJS* root;
+    nsXPCWrappedJS* wrapper = nsnull;
+    nsXPCWrappedJSClass *clazz = nsnull;
+    XPCJSRuntime* rt = ccx.GetRuntime();
+
+    map = rt->GetWrappedJSMap();
+    if(!map)
+    {
+        NS_ASSERTION(map,"bad map");
+        return NS_ERROR_FAILURE;
+    }
+
+    nsXPCWrappedJSClass::GetNewOrUsed(ccx, aIID, &clazz);
+    if(!clazz)
+        return NS_ERROR_FAILURE;
+
+    // GetRootJSObject will attempt to call a QueryInterface function on
+    // aJSObj. If QueryInterface doesn't exist on the object then a strict
+    // warning will be emitted, so check to make sure that the QueryInterface
+    // function exists before proceeding.
+    if(JS_HasProperty(ccx.GetJSContext(), aJSObj,
+                      rt->GetStringName(XPCJSRuntime::IDX_QUERY_INTERFACE),
+                      &hasProp) && hasProp)
+        rootJSObj = clazz->GetRootJSObject(ccx, aJSObj);
+    else
+        rootJSObj = aJSObj;
+
+    NS_RELEASE(clazz);
+
+    if(!rootJSObj)
+        return NS_ERROR_FAILURE;
+
+    // look for the root wrapper
+    {   // scoped lock
+        XPCAutoLock lock(rt->GetMapLock());
+        root = map->Find(rootJSObj);
+    }
+
+    if(root)
+    {
+        if((nsnull != (wrapper = root->Find(aIID))) ||
+           (nsnull != (wrapper = root->FindInherited(aIID))))
+        {
+            NS_ADDREF(wrapper);
+        }
+    }
+
+    *wrapperResult = wrapper;
+    return NS_OK;
+}
+
 nsXPCWrappedJS::nsXPCWrappedJS(XPCCallContext& ccx,
                                JSObject* aJSObj,
                                nsXPCWrappedJSClass* aClass,
