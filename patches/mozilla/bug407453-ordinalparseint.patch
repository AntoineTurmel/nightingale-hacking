Index: toolkit/content/widgets/tree.xml
===================================================================
RCS file: /cvsroot/mozilla/toolkit/content/widgets/tree.xml,v
retrieving revision 1.53
diff -u -8 -p -r1.53 tree.xml
--- toolkit/content/widgets/tree.xml	22 Oct 2007 13:19:37 -0000	1.53
+++ toolkit/content/widgets/tree.xml	11 Dec 2007 23:19:46 -0000
@@ -165,36 +165,36 @@
         <parameter name="aColBefore"/>
         <parameter name="aBefore"/>
         <body><![CDATA[
           this._ensureColumnOrder();
 
           var i;
           var cols = [];
           var col = this.columns.getColumnFor(aColBefore);
-          if (aColBefore.ordinal < aColMove.ordinal) {
+          if (parseInt(aColBefore.ordinal) < parseInt(aColMove.ordinal)) {
             if (aBefore)
               cols.push(aColBefore);
             for (col = col.getNext(); col.element != aColMove;
                  col = col.getNext())
               cols.push(col.element);
 
             aColMove.ordinal = cols[0].ordinal;
             for (i = 0; i < cols.length; ++i)
-              cols[i].ordinal += 2;
+              cols[i].ordinal = parseInt(cols[i].ordinal) + 2;
           } else if (aColBefore.ordinal != aColMove.ordinal) {
             if (!aBefore)
               cols.push(aColBefore);
             for (col = col.getPrevious(); col.element != aColMove;
                  col = col.getPrevious())
               cols.push(col.element);
 
             aColMove.ordinal = cols[0].ordinal;
             for (i = 0; i < cols.length; ++i)
-              cols[i].ordinal -= 2;
+              cols[i].ordinal = parseInt(cols[i].ordinal) - 2;
           }
         ]]></body>
       </method>
       
       <method name="_getColumnAtX">
         <parameter name="aX"/>
         <parameter name="aThresh"/>
         <parameter name="aPos"/>
@@ -1189,26 +1189,43 @@
           var col = document.treecolDragging;
           if (!col) return;
           
           if (!col.mDragGesturing) {
             if (col.mTargetCol) {
               // remove insertbefore/after attributes
               var before = col.mTargetCol.hasAttribute("insertbefore");
               col.mTargetCol.removeAttribute(before ? "insertbefore" : "insertafter");
-              if (before) {
-                var sib = col.mTargetCol._previousVisibleColumn;
-                if (sib)
-                  sib.removeAttribute("insertafter");
+
+              var sib = col.mTargetCol._previousVisibleColumn;
+              if (before && sib) {
+                sib.removeAttribute("insertafter");
+              }
+
+              // Move the column only if it will result in a different column
+              // ordering
+              var move = true;
+
+              // If this is a before move and the previous visible column is
+              // the same as the column we're moving, don't move
+              if (before && col == sib) {
+                move = false;
+              }
+              else {
+                // If this is an after move and the column we're moving is
+                // the same as the target column, don't move.
+                if (!before && col == col.mTargetCol) {
+                  move = false;
+                }
               }
-                          
-              // move the column
-              if (col != col.mTargetCol)
+
+              if (move) {
                 col.parentNode.parentNode._reorderColumn(col, col.mTargetCol, before);
-            
+              }
+
               // repaint to remove lines
               col.parentNode.parentNode.treeBoxObject.invalidate();
   
               col.mTargetCol = null;
             }
           } else
             col.mDragGesturing = false;
                     
