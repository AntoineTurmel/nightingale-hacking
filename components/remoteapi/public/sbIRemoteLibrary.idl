/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
 */

/**
 * \file sbIRemotePlayer.idl
 * \brief Definition of the Remote API Interfaces
 */

#include "nsISupports.idl"
#include "sbIRemoteMediaList.idl"

interface nsISimpleEnumerator;
interface nsIStringEnumerator;
interface sbIMediaItem;

/*
Class: Library

A <Library> is a collection of <MediaItems> and <MediaLists>.
It is possible to create a <Library> using the <Songbird::siteLibrary>
function.

Example:
  (start code)
  //Create or get a library.
  var library = songbird.siteLibrary("", "");

  //Create a medialist using the library.
  var mediaList = songbird.createMediaList("simple");

  //Create some mediaitems and add them to the medialist.
  var itemURLs = ["http://path/to/song.mp3", "http://path/to/another/song.mp3"];
  for(var url in itemURLs) {

    //Calling createMediaItem may throw an exception when it fails
    //to create the mediaitem.

    try {
      var mediaItem = library.createMediaItem(url);
      mediaList.add(mediaItem);
    }
    catch(e) {

      //Dump it.
      dump("Failed creation of mediaitem: " + e);

      //Or alert it.
      alert("Failed creation of mediaitem: " + e);

      //Oops the URL was not valid.
      if(e.result == Components.results.NS_ERROR_INVALID_ARG) {
        alert("The URL: " + url + " was not valid.");
      }

    }
  }
  (end code)

See Also:
  <Songbird>
  <MediaItem>
  <MediaList>
*/

/**
 * \interface sbIRemoteLibrary
 * \brief An interface to control a media library from remote web pages.
 *
 * The remote library interface allows websites to create media items in a
 *   manner more web-like than the internal sbILibrary interface. Access to
 *   the main or web libraries is controlled through permissions set by the
 *   user. Some or all calls made to objects that implement this interface
 *   may fail based on the permissions set by the user.
 *
 */
[scriptable, uuid(a8193c8e-4f9a-4b31-ae7b-4f4ee07f4efb)]
interface sbIRemoteLibrary : nsISupports
{
  /**
   * \brief Control whether or not media is scanned when created
   *
   * This attribute controlls whether or not the library will cause the
   *   metadata to be scanned for any tracks created. If a website wants
   *   to hand-set it's metadata then it should set this to false. By
   *   default this is true. If metadat for a particular track has already
   *   been scanned, that metadata will show up automatically ( for instance
   *   for 2 items created from the same URL ).
   */
  /*
  Prop: scanMediaOnCreation

  Set this property to true if you wish all new <MediaItems>
  created to be scanned for metadata.

  Set this property to false if you wish to skip scanning
  for metadata when <MediaItems> are created.

  If you are attempting to set all of your own metadata for <MediaItems>
  you create, you may set this to false to prevent your metadata
  from being overwritten.

  Note:
    This property defaults to _true_.

  Type:
    Boolean
  */
  attribute boolean scanMediaOnCreation;

  /**
   * \brief Create a media item from a URL
   *
   * Create and insert a media item into the library
   *
   * \param An http or https URL that points to a valid media file
   *
   * \returns the media item that gets created
   * \returns NS_ERROR_INVALID_ARG if URL is not an http: or https: URL
   */

  /*
  Func: createMediaItem()

  Create a <MediaItem> from a URL. You may pass in
  http and https URLs. Local file URLs are not permitted.

  Prototype:
    <MediaItem> createMediaItem(String url)

  Parameters:
    url - A URL referring to a media file.

  Returns:
    The newly created <MediaItem>.

  Throws:
    Invalid Argument (Components.results.NS_ERROR_INVALID_ARG)
    if the URL isn't http or https.

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create the mediaitem from a url pointing to a media file.
    var mediaItem = null;

    //This function may throw if it fails to create the item because
    //the URL is invalid.
    try {
      mediaItem = library.createMediaItem("http://path/to/file.mp3");
    }
    catch(e) {
      //Oops, bad URL.
      if(e.result == Components.results.NS_ERROR_INVALID_ARG) {
        alert("Oops, the URL was not valid.");
      }
    }
    (end)

  See Also:
    <createMediaList()>
    <createMediaListFromURL()>
  */
  sbIMediaItem createMediaItem(in AString aURL);

  /**
   * \brief Create a media list
   *
   * Create and insert a media list into the library for the type
   * passed in.
   *
   * \param aType A string, either 'simple' or 'smart'
   *
   * \returns the media list that gets created.
   */

  /*
  Func: createMediaList()

  Create an empty <MediaList> of a certain type.

  Prototype:
    <MediaList> createMediaList(String type)

  Parameters:
    type - The type of <MediaList> to create.

  Returns:
    The newly created <MediaList> or null.

  Note:
    Currently only the type "simple" is supported.

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create an empty medialist.
    var mediaList = library.createMediaList("simple");
    (end)

  See Also:
    <createMediaItem()>
    <createMediaListFromURL()>
  */
  sbIRemoteMediaList createMediaList(in AString aType);

  /**
   * \brief Create a media list from an exising playlist file
   *
   * Create and insert a media list into the library. The URL passed in must
   * be an http or https url that points to a type of playlist file supported
   * by Songbird. That is currently: .pls, .m3u, .html, and rss type feeds.
   *
   * \param aURL A string that points to a type of playlist file that is
   *             supported by Songbird. It must be either http: or https: and
   *             one of the following playlist types: .pls, .m3u, .html and rss
   *             type feeds.
   *
   * \returns the media list that gets created.
   */

  /*
  Func: createMediaListFromURL()

  Create a <MediaList> from a URL. The URL may point to an
  m3u, pls, rss or html file. After being created, the <MediaList>
  will contain all valid <MediaItems> it could create from the URLs
  it found in the file.

  Prototype:
    <MediaList> createMediaListFromFile(String url)

  Parameters:
    url - The URL of the file to use for creating the <MediaList>.

  Returns:
    The newly created <MediaList> or null.

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create the medialist from a url pointing to a file.
    var mediaList = library.createMediaListFromURL("http://path/to/file.m3u");
    (end)

  See Also:
    <createMediaItem()>
    <createMediaList()>
  */
  sbIRemoteMediaList createMediaListFromURL(in AString aURL);

  /**
   * \brief Connect the remote library to the main or web library
   *
   * This method retrieves the internal data model's library for use by
   *   the webpage.
   *
   * \param aLibName - Only accepted values are 'main' or 'web'
   */
  [noscript] void connectToDefaultLibrary(in AString aLibName);

  /**
   * \brief Get the media list with the given name.
   * \param aName - The name of the media list to fetch
   * \return The corresponding media list, or null if not found
   * \sa createMediaList
   */
  /*
  Func: getMediaListByName()

  Get the site media list with the given name.  Note that to compare for
  identity one must compare the guid (instead of JS object comparisions).

  Prototype:
    <MediaList> getMediaListByName(String name)

  Paramters:
    name - The name of the media list to fetch

  Returns:
    The corresponding media list, or null if not found

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Fetch the shopping cart media list
    var mediaList = library.getMediaListByName("Shopping Cart");

    // comparisons for equality must be done on the guid
    var cart = library.getMediaListByName("Shopping Cart");
    alert(mediaList.guid == cart.guid);
    (end)

  See Also:
    <createMediaList()>
  */
  sbIRemoteMediaList getMediaListByName( in AString aName );

  nsIStringEnumerator getArtists();
  nsIStringEnumerator getAlbums();
  nsIStringEnumerator getGenres();
  nsIStringEnumerator getYears();

  nsISimpleEnumerator getPlaylists();
};

/**
 * \interface sbIRemoteSiteLibrary
 * \brief An interface for a sandbox library created by the website.
 *
 * This interface is used by the player to connect a library to a specific
 *   library for a website. The library serves as an area a website can
 *   use to create the media items and lists needed to populate web playlists
 *   and to transfer into the user's main library. The restrictions on the
 *   site library are lighter allowing a website to do more with the limited
 *   scope of the site library.
 */
[scriptable, uuid(023734d0-0ba2-4c19-9fe6-58646282b586)]
interface sbIRemoteSiteLibrary : sbIRemoteLibrary
{
  /**
   * \brief The filename of the library file
   * Set only in debug builds
   */
  readonly attribute AString filename;

  /**
   * \brief Connects the remote library to a library from the internal data
   *        model.
   *
   * This method is used to create or load the data model library for a
   *   specific site's library. The strings passed in follow the format for
   *   cookies, in that the domain and path must meet the requirements for
   *   RFC 2109.
   * In the case of a bad match, the method fails and no library is hooked
   *   up. Any further attempt to access the library will fail.
   *
   * \param aDomain - The domain, or subdomain for the site library. The
   *        requesting website must be on this domain. A site on foo.bar.com
   *        may pass in bar.com, but not the other way around.
   * \param aPath - The path or subpath for the site library. The requesting
   *        site must be on this patch. A site at foo.com/my/path/index.html
   *        can pass in '/my/path/', '/my', '/', or ''. In the case of the '/'
   *        a root level library is created, accessibel by ALL paths in the
   *        domain. In the case of '' the deepest path is used, which would
   *        match 'my/path/'. The leading slash MUST be there, except when
   *        not passing any path (''). Currently the trailing slash is
   *        important, while this will succeed with or without the slash you
   *        will get different libraries as a result. This will be fixed --
   *        bug 4176
   */
  [noscript] void connectToSiteLibrary(in AUTF8String aDomain,
                                       in AUTF8String aPath);
};
