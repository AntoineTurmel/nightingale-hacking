/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

/**
 * \file sbIRemotePlayer.idl
 * \brief Definition of the sbIRemotePlayer Interface
 * \sa sbSongbird.js 
 */

#include "nsISupports.idl"

interface sbILibrary;
interface sbIMediaList;
interface nsIObserver;
interface nsIDOMElement;
interface nsISimpleEnumerator;

/**
 * \interface sbIRemotePlayer
 *
 * This interface is a composition of many of our other interfaces with the
 *  goal of exposing a more web-friendly interface to web sites. The defines
 *  our "Remote API" the websites can call to get information about and interact
 *  with Sonbird.
 */
[scriptable, uuid(40964944-5243-4a16-886b-14c1cbaa79d9)]
interface sbIRemotePlayer : nsISupports
{

  /**
   * \brief The name of the player
   */
  readonly attribute AString name;

  /**
   * \brief An array of sbIMediaLists
   * NOTE: NOT IMPLEMENTED
   */
  readonly attribute nsISimpleEnumerator playlists;

  /**
   * \brief The current web playlist
   * NOTE: NOT IMPLEMENTED
   */
  readonly attribute sbIMediaList webPlaylist;

  /**
   * \brief The current web playlist's DOM element
   * NOTE: NOT IMPLEMENTED
   */
  readonly attribute nsIDOMElement webPlaylistElement;

  /**
   * \brief The name of the artist for the currently playing track
   */
  readonly attribute AString currentArtist;

  /**
   * \brief The name of the album for the currently playing track
   */
  readonly attribute AString currentAlbum;

  /**
   * \brief The name of the currently playing track
   */
  readonly attribute AString currentTrack;

  /**
   * \brief Bind an observer to get called on changes to Songbird metadata/state
   */
  void addListener( in AString aKey,
                    in nsIObserver aObserver );

  /**
   * \brief Remove an observer from the metadata key
   */
  void removeListener( in AString aKey,
                       in nsIObserver aObserver );

  /**
   * \brief Being playback at the current location
   */
  void play();

  /**
   * \brief Play an media file by URL
   */
  void playURL(in AString aURL);

  /**
   * \brief Stop playback. Sets position to beginning.
   */
  void stop();

  /**
   * \brief Stop playback, leaves position at current location.
   */
  void pause();

  /**
   * \brief Skip to the next track and begin playing
   */
  void next();

  /**
   * \brief Skip to the previous track and begin playing
   */
  void previous();

  //
  // Library creation and retrieval
  //

  /**
   * \brief Return a handle to the specific library for the domain
   * \arg The path (section of url past .tld/) to clearly identify
   *      the library to retrieve. Must be a at least a section of
   *      the prefix for the current site's path
   */
  sbILibrary getSiteLibrary(in AString aPath);


};

