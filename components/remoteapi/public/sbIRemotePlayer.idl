/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

/**
 * \file sbIRemotePlayer.idl
 * \brief Definition of the sbIRemotePlayer Interface
 * \sa sbSongbird.js 
 */

#include "nsISupports.idl"

interface sbILibrary;
interface sbIMediaList;
interface nsIArray;
interface nsIDOMElement;
interface nsIObserver;
interface nsISimpleEnumerator;

// forward decl for sbIRemoteCommands
interface sbIRemotePlayer;

[scriptable, uuid(3025cbf8-7969-4e79-8641-967a9f4e51b8)]
interface sbIRemoteLibrary : nsISupports
{
  // this will hook up the remotelibrary to the internal library,
  // setGUID is a bad name, will change.
  void setGUID(in AString aGUID);
  // I think these need to be exposed via nsIXPCScriptable
  // readonly nsIArray artists
  // readonly nsIArray albums

  // void addMedia(in AString aURL);
  // void addMediaListFromURL(in AString aURL);
  // void addMediaListElement(in sbIRemoteMediaList aMediaList);
};


[scriptable, uuid(cff760df-5fe0-4657-8eb5-1d5d3ca12369)]
interface sbIRemoteCommands : nsISupports
{
  // the remotePlayer sets this after it creates it.
  [noscript] attribute sbIRemotePlayer owner;

  void addCommand(in AString aType, in AString aID, in AString aName, in AString aTooltip);
  // void removeCommand(in AString aID);

  // Ew. this is so ugly. I'm hoping to be able to clean this up with nsIXPCScriptable
  void setCommandData( in unsigned long aNumCommands,
                       [const, array, size_is(aNumCommands)] in wstring aTypeArray,
                       [const, array, size_is(aNumCommands)] in wstring aIDArray,
                       [const, array, size_is(aNumCommands)] in wstring aNameArray,
                       [const, array, size_is(aNumCommands)] in wstring aTooltipArray);
};

/**
 * \interface sbIRemotePlayer
 *
 * This interface is a composition of many of our other interfaces with the
 *  goal of exposing a more web-friendly interface to web sites. The defines
 *  our "Remote API" the websites can call to get information about and interact
 *  with Sonbird.
 */
[scriptable, uuid(40964944-5243-4a16-886b-14c1cbaa79d9)]
interface sbIRemotePlayer : nsISupports
{

  /**
   * \brief The name of the player
   */
  readonly attribute AString name;

  /**
   * \brief An array of sbIMediaLists
   * NOTE: NOT IMPLEMENTED
   */
  readonly attribute nsISimpleEnumerator playlists;

  /**
   * \brief The current web playlist
   * NOTE: NOT IMPLEMENTED
   */
  readonly attribute sbIMediaList webPlaylist;

  /**
   * \brief The current web playlist's DOM element
   * NOTE: NOT IMPLEMENTED
   */
  readonly attribute nsIDOMElement webPlaylistElement;

  /**
   * \brief The name of the artist for the currently playing track
   */
  readonly attribute AString currentArtist;

  /**
   * \brief The name of the album for the currently playing track
   */
  readonly attribute AString currentAlbum;

  /**
   * \brief The name of the currently playing track
   */
  readonly attribute AString currentTrack;

  /**
   * \brief Bind an observer to get called on changes to Songbird metadata/state
   */
  void addListener( in AString aKey,
                    in nsIObserver aObserver );

  /**
   * \brief Remove an observer from the metadata key
   */
  void removeListener( in AString aKey,
                       in nsIObserver aObserver );

  /**
   * \brief Being playback at the current location
   */
  void play();

  /**
   * \brief Play an media file by URL
   */
  void playURL(in AString aURL);

  /**
   * \brief Stop playback. Sets position to beginning.
   */
  void stop();

  /**
   * \brief Stop playback, leaves position at current location.
   */
  void pause();

  /**
   * \brief Skip to the next track and begin playing
   */
  void next();

  /**
   * \brief Skip to the previous track and begin playing
   */
  void previous();

  //
  // Commands
  //

  /**
   * \brief The collection of commands associated with the current page.
   */
  readonly attribute sbIRemoteCommands remoteCommands;

  /**
   * \brief Causes the current commands to get registered
   * Will cause the commands to show up in the web playlist
   */
  void registerCommands(in boolean aUseDefaultCommands);


  //
  // Library creation and retrieval
  //
  // XXXredfive - this is probably only going to be accessed via 
  //              nsIXPCScriptable methods.

  /**
   * \brief Creates a separate library for the current domain/path combo
   * probably changing/going away, see next attribute
   */
  sbIRemoteLibrary addSiteLibrary(in AString aPath);

  /**
   * \brief The library created by addSiteLibrary
   *
   * The calling convention here will probably change to this
   * being a method that takes the string above.
   */
  readonly attribute sbIRemoteLibrary siteLibrary;

  /**
   * \brief Fires the event to the webpage
   * This is an internal method only, implemented as protected code
   * and only callable by the sbRemoteCommands object.
   */
  [noscript] void FireEventToContent(in AString aClass, in AString aType);
};

