/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbILibrary.idl
 * \brief Definition of the sbILibrary interface
 * \sa sbILibraryFactory.idl, sbILibraryManager.idl
 */

#include "sbILibraryResource.idl"

interface nsIChannel;
interface nsIStringEnumerator;
interface nsIURI;
interface sbIDevice;
interface sbIMediaItem;
interface sbIMediaList;
interface sbIMediaListFactory;

/**
* \interface sbILibrary
* \brief Media library abstraction
*
* The library interface is the primary means of exposing media library data
* to Songbird.  Implementors of this interface must also provide
* implementations of sbIMediaItem and sbIMediaList.
*
* \sa sbIMediaItem, sbIMediaList
*/
[scriptable, uuid(cd0a02c7-3c0d-4e54-ab92-e8ac4f22c17f)]
interface sbILibrary : sbILibraryResource
{
  /**
   * \brief Reference to the device that this library is stored on
   */
  readonly attribute sbIDevice device;

  /**
   * \brief Declares if this library will host foreign media items
   */
  readonly attribute boolean supportsForeignMediaItems;

  /**
   * \brief Resolves a songbird schemed URL to a channel.  Throws an exception
   * if the item referenced in the URL is not found
   * \param aUri The nsIURI to a media item to resolve
   * \return An open channel to the content of the referenced media item
   */
  nsIChannel resolve(in nsIURI aUri);

  /**
   * \brief Creates a new media item
   * \prarm aContentUri The URI pointing to the content of the new media item
   * \return A new, persisted media item
   */
  sbIMediaItem createMediaItem(in nsIURI aContentUri);

  /**
   * \brief Creates a new media list
   *
   * \param aType - The type of media list to create.
   * 
   * \return A new media list.
   */
  sbIMediaList createMediaList(in AString aType);

  /**
   * \brief Get a media item
   * \param aGuid Guid of media item to get
   * \return The requested media item
   */
  sbIMediaItem getMediaItem(in AString aGuid);

  /**
   * \brief A list of available media list types.
   */
  readonly attribute nsIStringEnumerator mediaListTypes;

  /**
   * \brief Register a new media list type at run time
   *
   * \param aFactory - The factory that will create the media list
   */
  void registerMediaListFactory(in sbIMediaListFactory aFactory);

  /**
   * Hints for transfer service to possibly add a transcode step
   */
/*
  AString getPreferedAudioMimeType();
  AString getPreferedVideoMimeType();
*/

  /**
   * \brief Called when the library should remove unsupported media list types,
   *        unknown property types, temporary items, or otherwise optimize its
   *        performance or size.
   */
  void optimize();

  /**
   * \brief Called when the library should clean up in preparation for shutdown
   *        of the application.
   */
  void shutdown();
};
