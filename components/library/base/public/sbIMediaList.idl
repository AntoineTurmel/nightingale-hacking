/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbIMediaList.idl
 * \brief Definition of the sbIMediaList interface
 * \sa sbIMediaList.idl
 */

#include "sbIMediaItem.idl"

interface nsIArray;
interface nsIPropertyBag;
interface nsISimpleEnumerator;
interface nsIStringEnumerator;
interface nsITreeView;
interface sbICascadeFilterSet;
interface sbILibrary;
interface sbIMediaListEnumerationListener;
interface sbIMediaListListener;
interface sbIMediaListView;
interface sbIPropertyArray;

/**
* \interface sbIMediaList
* \brief A brief description of the contents of this interface
*
* A detailed description of this interface
*
* \sa List of "see also" interfaces
*/
[scriptable, uuid(3cb74885-8dd7-4261-a300-740da293e339)]
interface sbIMediaList : sbIMediaItem
{
  /**
   * \brief The name of the media list
   */
  
  /*
  Prop: name
  
  The name of the media list.

  Type:
    String

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create a medialist.
    var mediaList = library.createMediaList("simple");

    //Give it a name.
    mediaList.name = "80's hits";
    (end)
  */
  attribute AString name;

  /**
   * \brief The type of media list (eg "simple")
   */

  /*
  Prop: type

  The type of this media list.

  Type:
    String

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create a medialist.
    var mediaList = library.createMediaList("simple");

    //Tell everyone this is a simple medialist.
    alert("Hello everyone, this is a " + mediaList.type + " medialist!");
    (end)
  */
  readonly attribute AString type;

  /**
   * \brief Returns the length of the list
   */

  /*
  Prop: length

  The length (in number of items) present in the media list.

  Type:
    Number

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create a mediaitem.
    var mediaItem = library.createMediaItem("http://path/to/item.mp3");

    //Create a medialist.
    var mediaList = library.createMediaList("simple");

    //Add same item twice. We now have mediaItem at index 0 and 1.
    mediaList.add(mediaItem);
    mediaList.add(mediaItem);

    //Tell everyone there are 2 tracks in the medialist.
    alert("There are " + mediaList.length + " mediaitems in the medialist.");
    (end)
  */
  readonly attribute unsigned long length;

  /**
   * \brief Is the list empty?
   */

  /*
  Prop: isEmpty

  Is the <MediaList> empty?

  Type:
    Boolean

  Returns:
    true - <MediaList> is empty.
    false - <MediaList> is _not_ empty.

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create a mediaitem.
    var mediaItem = library.createMediaItem("http://path/to/item.mp3");

    //Create a medialist.
    var mediaList = library.createMediaList("simple");

    //Add same item twice. We now have mediaItem at index 0 and 1.
    mediaList.add(mediaItem);
    mediaList.add(mediaItem);

    //Clear the medialist.
    mediaList.clear();

    //Check to see if the mediaList is empty.
    //The property in this case will be true.
    var empty = mediaList.isEmpty;
    (end)
  */
  readonly attribute boolean isEmpty;

  /**
   * \brief Get a media item in the list by guid
   * \param aGuid Guid of the media item
   * \return Media item with the requested guid or null if not found
   */

  /*
  Func: getItemByGuid()

  Get a <MediaItem> from the <MediaList> by using it's <MediaItem::guid>.

  Prototype:
    <MediaItem> getItemByGuid(String guid);

  Parameters:
    guid - The global unique identifier (<MediaItem::guid>) of the <MediaItem>.

  Returns:
    The <MediaItem> with the requested guid.

  Throws:
    Not Available (Components.results.NS_ERROR_NOT_AVAILABLE)
    when there is no <MediaItem> with the requested guid.

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create a mediaitem.
    var mediaItem = library.createMediaItem("http://path/to/item.mp3");

    //Create a medialist.
    var mediaList = library.createMediaList("simple");

    //Add same item twice. We now have mediaItem at index 0 and 1.
    mediaList.add(mediaItem);

    //Get the same item by guid.
    var sameMediaItem = mediaList.getItemByGuid(mediaItem.guid);
    (end)

  See Also:
    <getItemByIndex()>
    <indexOf()>
    <lastIndexOf()>
    <contains()>
  */
  sbIMediaItem getItemByGuid(in AString aGuid);

  /**
   * \brief Get a media item in the list by index
   * \param aIndex Index of the media item
   * \return Media item with the requested index
   */

  /*
  Func: getItemByIndex()

  Get a <MediaItem> from the <MediaList> by using it's index in the <MediaList>.

  Prototype:
    <MediaItem> getItemByIndex(Number index)

  Parameters:
    index - The index of the <MediaItem>. Index starts at 0.

  Returns:
    The <MediaItem> present at the requested index.

  Throws:
    Not Available (Components.results.NS_ERROR_NOT_AVAILABLE) 
    when there is no <MediaItem> at the requested index.

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create a mediaitem.
    var mediaItem = library.createMediaItem("http://path/to/item.mp3");

    //Create a medialist.
    var mediaList = library.createMediaList("simple");

    //Add same item twice. We now have mediaItem at index 0 and 1.
    mediaList.add(mediaItem);
    mediaList.add(mediaItem);
    
    //Get the mediaitem at index 1.
    var sameMediaItem = mediaList.getItemByIndex(1);
    (end)
  
  See Also:
    <getItemByGuid()>
    <indexOf()>
    <lastIndexOf()>
    <contains()>
  */
  sbIMediaItem getItemByIndex(in unsigned long aIndex);

  /**
   * \brief This flag means that the list being enumerated is a copy that may
   *        become out of date.
   *
   * Use this flag if you don't care whether or not other threads change the
   * list's contents. The listener may make changes to the list at any time but
   * those changes will not be reflected in the enumeration sequence.
   */

  /*
  Const: ENUMERATIONTYPE_SNAPSHOT

  If this constant is specified when calling <enumerateAllItems()> or 
  <enumerateItemsByProperty()>, the EnumerationListener will recieve 
  a copy of the <MediaItem> instead of the <MediaItem> present in 
  the <MediaList>.

  Note:
    This is the *suggested* constant to be used when calling <enumerateAllItems()>
    or <enumerateItemsByProperty()>.

    Any properties changed on the copy of the <MediaItem> will also be
    reflected in the <MediaItem> present in the list.

  Example:
    (start code)
    //This example assumes you already have a medialist in the variable named "mediaList".
    //It also assumes that you have an enumeration listener in the variable named "enumListener".

    mediaList.enumerateAllItems(enumListener, 0);
    (end)

  See Also:
    <ENUMERATIONTYPE_LOCKING>
    <enumerateAllItems()>
    <enumerateItemsByProperty()>
  */
  const unsigned short ENUMERATIONTYPE_SNAPSHOT = 0;

  /**
   * \brief This flag means that the list is protected from changes by other
   *        threads during the enumeration.
   *
   * Use this flag if you need to be certain that the contents of the list are
   * not changed during enumeration. Note that all other threads will block
   * until the enumeration is complete. Furthermore, changes made to list from
   * the listener are not permitted until the listener has received the
   * onEnumerationEnd notification.
   */

  /*
  Const: ENUMERATIONTYPE_LOCKING

  If this constant is specified when calling <enumerateAllItems()> or 
  <enumerateItemsByProperty()> the EnumerationListener will recieve 
  the actual <MediaItem> from the <MediaList>.

  Note:
    This is the _suggested_ constant to use when attempting to change a lot of properties
    on <MediaItems>, or when you need to process them individually without calling any other 
    functions on the <MediaList> during enumeration.

  Example:
    (start code)
    //This example assumes you already have a medialist in the variable named "mediaList".
    //It also assumes that you have an enumeration listener in the variable named "enumListener".

    mediaList.enumerateAllItems(enumListener, 1);
    (end)

  See Also:
    <ENUMERATIONTYPE_SNAPSHOT>
    <enumerateAllItems()>
    <enumerateItemsByProperty()>
  */
  const unsigned short ENUMERATIONTYPE_LOCKING  = 1;

  /**
   * \brief Enumerate all items in the list.
   *
   * \param aEnumerationType - One of the ENUMERATIONTYPE values above.
   * \param aEnumerationListener - The enumeration listener.
   */
  
  /*
  Func: enumerateAllItems()

  Enumerate all <MediaItems> in the <MediaList>.
  
  Prototype:
    enumerateAllItems(EnumerationListener enumListener, Number enumType)

  Parameters:
    enumListener - An EnumerationListener object. See example below.
    enumType - The type of enumeration desired. Valid values for enumType 
               are <ENUMERATIONTYPE_SNAPSHOT> and <ENUMERATIONTYPE_LOCKING>.

  Example:
    (start code)
    (end)

  See Also:
    <ENUMERATIONTYPE_SNAPSHOT>
    <ENUMERATIONTYPE_LOCKING>
    <enumerateItemsByProperty()>
  */
  void enumerateAllItems(in sbIMediaListEnumerationListener aEnumerationListener,
                         in unsigned short aEnumerationType);

  /**
   * \brief Enumerate the media items in the list that match a given property
   *        name and value.
   *
   * \param aName - Property name to search.
   * \param aValue - Property value to search.
   * \param aEnumerationType - One of the ENUMERATIONTYPE values above.
   * \param aEnumerationListener - The enumeration listener.
   */
  
  /*
  Func: enumerateItemsByProperty()

  Enumerate the <MediaItems> in the <MediaList> that have a certain property
  and value match.

  This function is useful if you are looking for all items having, for example,
  an artistName value of "Tom Waits".

  Prototype:
    enumerateItemsByProperty(String name, String value, EnumerationListener enumListener)

  Parameters:
    name - The name of the property to match.
    value - The value of the property to match.
    enumListener - The enumeration listener.
    enumType - The type of enumeration desired. Valid values for enumType 
               are <ENUMERATIONTYPE_SNAPSHOT> and <ENUMERATIONTYPE_LOCKING>.

  Example:
    (start code)
    (end)

  See Also:
    <ENUMERATIONTYPE_SNAPSHOT>
    <ENUMERATIONTYPE_LOCKING>
    <enumerateAllItems()>
  */
  void enumerateItemsByProperty(in AString aPropertyName,
                                in AString aPropertyValue,
                                in sbIMediaListEnumerationListener aEnumerationListener,
                                in unsigned short aEnumerationType);

  /**
   * \brief Enumerate the media items that match a list of property names and
   *        values.
   *
   * \param aProperties - A list of property name/value pairs.
   * \param aEnumerationType - One of the ENUMERATIONTYPE values above.
   * \param aEnumerationListener - The enumeration listener.
   */
  void enumerateItemsByProperties(in sbIPropertyArray aProperties,
                                  in sbIMediaListEnumerationListener aEnumerationListener,
                                  in unsigned short aEnumerationType);

  /**
   * \brief Get the first index of a media item int he list
   * \param aMediaItem Media item to search for
   * \param aStartFrom ben write me
   * \return The index that the media item was first found at, or throws
   * NS_ERROR_NOT_AVAILABLE if not found
   */

  /*
  Func: indexOf()

  Get the index for a <MediaItem> present in the <MediaList>.

  Prototype:
    Number indexOf(<MediaItem> mediaItem, Number startFrom)

  Parameters:
    mediaItem - The <MediaItem> to find.
    startFrom - The index position at which to start searching. Index starts at 0.

  Returns:
    The index where the <MediaItem> was first found.

  Throws:
    Not Available (Components.results.NS_ERROR_NOT_AVAILABLE) 
    when the <MediaItem> cannot be found.

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create a mediaitem.
    var mediaItem = library.createMediaItem("http://path/to/item.mp3");

    //Create a medialist.
    var mediaList = library.createMediaList("simple");

    //Add same item twice. We now have mediaItem at index 0 and 1.
    mediaList.add(mediaItem);
    mediaList.add(mediaItem);
    
    //Get the first occurrence of mediaItem.
    //The returned value in this case will be 0.
    var index = mediaList.indexOf(mediaItem, 0);
    (end)

  See Also:
    <lastIndexOf()>
    <contains()>
  */
  unsigned long indexOf(in sbIMediaItem aMediaItem,
                        in unsigned long aStartFrom);

  /**
   * \brief Get the last index of a media item int he list
   * \param aMediaItem Media item to search for
   * \param aStartFrom ben write me
   * \return The index that the media item was last found at, or throws
   * NS_ERROR_NOT_AVAILABLE if not found
   */

  /*
  Func: lastIndexOf()

  Get the *last* index for a <MediaItem> present in the <MediaList>.

  Prototype:
    Number lastIndexOf(<MediaItem> mediaItem, Number startFrom)

  Parameters:
    mediaItem - The <MediaItem> to find.
    startFrom - The index position at which to start searching. Index starts at 0.

  Returns:
    The *last* index where the <MediaItem> was first found.

  Throws:
    Not Available (Components.results.NS_ERROR_NOT_AVAILABLE) 
    when the <MediaItem> cannot be found.

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create a mediaitem.
    var mediaItem = library.createMediaItem("http://path/to/item.mp3");

    //Create a medialist.
    var mediaList = library.createMediaList("simple");

    //Add same item twice. We now have mediaItem at index 0 and 1.
    mediaList.add(mediaItem);
    mediaList.add(mediaItem);

    //Get the first occurrence of mediaItem.
    //The returned value in this case will be 0.
    var index = mediaList.lastIndexOf(mediaItem, 0);
    (end)

  See Also:
    <indexOf()>
    <contains()>
  */
  unsigned long lastIndexOf(in sbIMediaItem aMediaItem,
                            in unsigned long aStartFrom);

  /**
   * \brief Check if the list contains a media item
   * \param aMediaItem Media item to search for
   * \return true if the media item was found, false if it was not found
   */

  /*
  Func: contains()

  Verify that this <MediaList> contains the requested <MediaItem>.

  Prototype:
    Boolean contains(<MediaItem> mediaItem)

  Parameters:
    mediaItem - The <MediaItem> to verify.

  Returns:
    true - The <MediaItem> *is present* in the <MediaList>.
    false - The <MediaItem> *is _not_ present*.

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create a mediaitem.
    var mediaItem = library.createMediaItem("http://path/to/item.mp3");

    //Create a medialist.
    var mediaList = library.createMediaList("simple");

    //Add same item twice. We now have mediaItem at index 0 and 1.
    mediaList.add(mediaItem);
    mediaList.add(mediaItem);
    
    //Check to see if mediaList contains mediaItem.
    //The returned value in this case will be true.
    var containsItem = mediaList.contains(mediaItem;
    (end)

  See Also:
    <indexOf()>
    <lastIndexOf()>
  */
  boolean contains(in sbIMediaItem aMediaItem);

  /**
   * \brief Add a media item to this list
   * \param aMediaItem The media item to add to the list
   */

  /*
  Func: add()

  Add a <MediaItem> to this <MediaList>.

  Prototype:
    add(<MediaItem> mediaItem);

  Parameters:
    mediaItem - The <MediaItem> to add.

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create a mediaitem.
    var mediaItem = library.createMediaItem("http://path/to/item.mp3");

    //Create a medialist.
    var mediaList = library.createMediaList("simple");

    //Add same item twice. We now have mediaItem at index 0 and 1.
    mediaList.add(mediaItem);
    (end)

  See Also:
    <addAll()>
    <remove()>
    <removeByIndex()>
    <clear()>
  */
  void add(in sbIMediaItem aMediaItem);

  /**
   * \brief Add the contents of a media list to this list
   * \param aMediaList The media list whose contents are to be added
   */

  /*
  Func: addAll()

  Add all the <MediaItems> from a <MediaList> into this <MediaList>.

  Prototype:
    addAll(<MediaList> mediaList)

  Parameters:
    mediaList - The <MediaList> whose <MediaItems> are to be added.

  Example:
    (start code)
    //This example assumes you already have medialists in 
    //variables named mediaListFrom and mediaListTo.
    
    //Add all mediaitems from mediaListFrom to mediaListTo.
    mediaListTo.addAll(mediaListFrom);
    (end)
  */
  void addAll(in sbIMediaList aMediaList);

  /**
   * \brief Adds media items suppled by the provided enumerator
   * \param aMediaItems An enumerator returning sbIMediaItem objects
   */
  void addSome(in nsISimpleEnumerator aMediaItems);

  /**
   * \brief Remove the first occurrence of the given media item from the list
   * \param aMediaItem Media item to remove
   */

  /*
  Func: remove()

  Remove the first occurrence of the given <MediaItem> from this <MediaList>.

  Prototype:
    remove(<MediaItem> mediaItem)

  Parameters:
    mediaItem - The <MediaItem> to remove.

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create a mediaitem.
    var mediaItem = library.createMediaItem("http://path/to/item.mp3");

    //Create a medialist.
    var mediaList = library.createMediaList("simple");

    //Add same item twice. We now have mediaItem at index 0 and 1.
    mediaList.add(mediaItem);
    mediaList.add(mediaItem);

    //Remove the first occurrence of the mediaitem.
    mediaList.remove(mediaItem);

    ... //Now only the second occurrence remains and it's index is now 0.
    (end)

  See Also:
    <add()>
    <addAll()>
    <removeByIndex()>
  */
  void remove(in sbIMediaItem aMediaItem);

  /**
   * \brief Remove a media item from the list by index
   * \param aIndex Index of the item to remove
   */

  /*
  Func: removeByIndex()

  Remove a <MediaItem> from the <MediaList> using it's index.

  Prototype:
    removeByIndex(Number index)

  Parameters:
    index - The index of the <MediaItem> to remove.

  Throws:
    Invalid Argument (Components.results.NS_ERROR_INVALID_ARG)
    when the <MediaItem> cannot be found.

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create a mediaitem.
    var mediaItem = library.createMediaItem("http://path/to/item.mp3");

    //Create a medialist.
    var mediaList = library.createMediaList("simple");

    //Add same item twice. We now have mediaItem at index 0 and 1.
    mediaList.add(mediaItem);
    mediaList.add(mediaItem);
    
    //Remove the duplicate item.
    mediaList.removeByIndex(1);
    (end)

  See Also:
    <add()>
    <addAll()>
    <remove()>
  */
  void removeByIndex(in unsigned long aIndex);

  /**
   * \brief Removed media items suppled by the provided enumerator
   * \param aMediaItems An enumerator returning sbIMediaItem objects
   */
  void removeSome(in nsISimpleEnumerator aMediaItems);

  /**
   * \brief Clear the list
   */

  /*
  Func: clear()

  Clear the <MediaList>. This will remove all <MediaItems> from this <MediaList>.

  Prototype:
    clear()

  Note:
    This is the *preferred* way to remove all <MediaItems> from a <MediaList> 
    because it is optimized for speed.

  Example:
    (start code)
    //Create or get a library.
    var library = songbird.siteLibrary("", "");

    //Create a mediaitem.
    var mediaItem = library.createMediaItem("http://path/to/item.mp3");

    //Create a medialist.
    var mediaList = library.createMediaList("simple");

    //Add same item twice. We now have mediaItem at index 0 and 1.
    mediaList.add(mediaItem);
    mediaList.add(mediaItem);

    ... //Do something with the medialist.

    //Clear the medialist.
    mediaList.clear();

    //Check to see if the medialist is empty.
    //The property in this case will be true.
    var empty = mediaList.isEmpty;
    (end)
  */
  void clear();

  const unsigned long LISTENER_FLAGS_ITEMADDED         = 1 << 0;
  const unsigned long LISTENER_FLAGS_BEFOREITEMREMOVED = 1 << 1;
  const unsigned long LISTENER_FLAGS_AFTERITEMREMOVED  = 1 << 2;
  const unsigned long LISTENER_FLAGS_ITEMUPDATED       = 1 << 3;
  const unsigned long LISTENER_FLAGS_LISTCLEARED       = 1 << 4;
  const unsigned long LISTENER_FLAGS_BATCHBEGIN        = 1 << 5;
  const unsigned long LISTENER_FLAGS_BATCHEND          = 1 << 6;
  const unsigned long LISTENER_FLAGS_ALL               = 0xffffffff;

 /**
   * \brief Add a listener to this media list
   * \param aListener The listener to add
   * \param aOwnsWeak If set to false, the media list will hold a strong
   *        reference to |aListener|.  If set to true and |aListener| supports
   *        the nsIWeakReference interface, a weak reference will be held.
   *        Otherwise an error will be returned.
   * \param aFlags A bit mask made up the LISTENER_FLAGS_ constants above.
   *        Use this to filter out unwanted notifications.  If not set, this
   *        will default to LISTENER_FLAGS_ALL
   * \param aPropertyFilter If this argument is specified, the onItemUpdated
   *        notification will only be sent for updates to any of the properties
   *        specified in the array.  Note that the values of the properties
   *        in the array are ignored.  If not set or null, no filtering will
   *        be applied.
   */
  void addListener(in sbIMediaListListener aListener,
                   [optional] in boolean aOwnsWeak,
                   [optional] in unsigned long aFlags,
                   [optional] in sbIPropertyArray aPropertyFilter);

  /**
   * \brief Remove a listener from this media list
   * \param aListener The listener to remove
   */
  void removeListener(in sbIMediaListListener aListener);

  /**
   * \brief Create a new view for this list
   * \return The new view
   */
  sbIMediaListView createView();

  /**
   * \brief Notify listeners that a batch update is about to begin.  Listeners
   *        may choose to ignore other notifications until the batch is
   *        complete.
   */
  void beginUpdateBatch();

  /**
    * \brief Notify listeners that a batch update is complete
    */
  void endUpdateBatch();

  /*
   * \brief Return the distinct values in the list for a given property
   * \param aPropertyName Propery name to get distinct values for
   * \return String enumerator of distinct values for the given property
   */

  /*
  Func: getDistinctValuesForProperty()

  Get all distinct (unique) values in this <MediaList> for a given property.

  This function is useful if you want to know all the unique artistName property
  values for example.

  Prototype:
    Enumerator getDistinctValuesForProperty(String name)

  Parameters:
    name - The name of the property for which all distinct values are desired.
  
  Returns:
    Enumerator, contains Strings.

  Example:
    (start code)
    (end)

  See Also:
    <enumerateItemsByProperty()>
  */
  nsIStringEnumerator getDistinctValuesForProperty(in AString aPropertyName);
};

