/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbIMediaList.idl
 * \brief Definition of the sbIMediaList interface
 * \sa sbIMediaList.idl
 */

#include "sbIMediaItem.idl"

interface nsIArray;
interface nsIPropertyBag;
interface nsISimpleEnumerator;
interface nsITreeView;
interface sbILibrary;
interface sbIMediaListEnumerationListener;
interface sbIMediaListListener;
interface sbIPropertyArray;
interface sbICascadeFilterSet;

/**
* \interface sbIMediaList
* \brief A brief description of the contents of this interface
*
* A detailed description of this interface
*
* \sa List of "see also" interfaces
*/
[scriptable, uuid(3cb74885-8dd7-4261-a300-740da293e339)]
interface sbIMediaList : sbIMediaItem
{
  /**
   * \brief The name of the media list
   */
  attribute AString name;

  /**
   * \brief Returns the length of the list
   */
  readonly attribute unsigned long length;

  /**
   * \brief Returns the length of filtered view of this list
   */
  readonly attribute unsigned long filteredLength;

  /**
   * \brief Get a media item in the list by guid
   * \param aGuid Guid of the media item
   * \return Media item with the requested guid or null if not found
   */
  sbIMediaItem getItemByGuid(in AString aGuid);

  /**
   * \brief Get a media item in the list by index
   * \param aIndex Index of the media item
   * \return Media item with the requested index
   */
  sbIMediaItem getItemByIndex(in unsigned long aIndex);

  /**
   * \brief Get a media item in the filtered view of this list by index
   * \param aIndex Filtered index of the media item
   * \return Media item with the requested index
   */
  sbIMediaItem getItemByFilteredIndex(in unsigned long aIndex);

  /**
   * \brief This flag means that the list being enumerated is a copy that may
   *        become out of date.
   *
   * Use this flag if you don't care whether or not other threads change the
   * list's contents. The listener may make changes to the list at any time but
   * those changes will not be reflected in the enumeration sequence.
   */
  const unsigned short ENUMERATIONTYPE_SNAPSHOT = 0;

  /**
   * \brief This flag means that the list is protected from changes by other
   *        threads during the enumeration.
   *
   * Use this flag if you need to be certain that the contents of the list are
   * not changed during enumeration. Note that all other threads will block
   * until the enumeration is complete. Furthermore, changes made to list from
   * the listener are not permitted until the listener has received the
   * onEnumerationEnd notification.
   */
  const unsigned short ENUMERATIONTYPE_LOCKING  = 1;

  /**
   * \brief Enumerate all items in the list.
   *
   * \param aEnumerationType - One of the ENUMERATIONTYPE values above.
   * \param aEnumerationListener - The enumeration listener.
   */
  void enumerateAllItems(in sbIMediaListEnumerationListener aEnumerationListener,
                         in unsigned short aEnumerationType);

  /**
   * \brief Enumerate the media items in the list that match a given property
   *        name and value.
   *
   * \param aName - Property name to search.
   * \param aValue - Property value to search.
   * \param aEnumerationType - One of the ENUMERATIONTYPE values above.
   * \param aEnumerationListener - The enumeration listener.
   */
  void enumerateItemsByProperty(in AString aPropertyName,
                                in AString aPropertyValue,
                                in sbIMediaListEnumerationListener aEnumerationListener,
                                in unsigned short aEnumerationType);

  /**
   * \brief Enumerate the media items that match a list of property names and
   *        values.
   *
   * \param aProperties - A list of property name/value pairs.
   * \param aEnumerationType - One of the ENUMERATIONTYPE values above.
   * \param aEnumerationListener - The enumeration listener.
   */
  void enumerateItemsByProperties(in sbIPropertyArray aProperties,
                                  in sbIMediaListEnumerationListener aEnumerationListener,
                                  in unsigned short aEnumerationType);

  /**
   * \brief Get the first index of a media item int he list
   * \param aMediaItem Media item to search for
   * \param aStartFrom ben write me
   * \return The index that the media item was first found at, or -1 if not
   * found
   */
  unsigned long indexOf(in sbIMediaItem aMediaItem,
                        in unsigned long aStartFrom);

  /**
   * \brief Get the last index of a media item int he list
   * \param aMediaItem Media item to search for
   * \param aStartFrom ben write me
   * \return The index that the media item was last found at, or -1 if not
   * found
   */
  unsigned long lastIndexOf(in sbIMediaItem aMediaItem,
                            in unsigned long aStartFrom);

  /**
   * \brief Check if the list contains a media item
   * \param aMediaItem Media item to search for
   * \return true if the media item was found, false if it was not found
   */
  boolean contains(in sbIMediaItem aMediaItem);

  /**
   * \brief Is the list empty?
   */
  readonly attribute boolean isEmpty;

  /**
   * \brief Add a media item to this list
   * \param aMediaItem The media item to add to the list
   */
  void add(in sbIMediaItem aMediaItem);

  /**
   * \brief Add the contents of a media list to this list
   * \param aMediaList The media list whose contents are to be added
   */
  void addAll(in sbIMediaList aMediaList);

  /**
   * \brief Adds media items suppled by the provided enumerator
   * \param aMediaItems An enumerator returning sbIMediaItem objects
   */
  void addSome(in nsISimpleEnumerator aMediaItems);

  /**
   * \brief Insert a media item before the specified media item
   * \param aIndex Position of item to insert before
   * \param aMediaItem Media item to insert
   */
  void insertBefore(in unsigned long aIndex,
                    in sbIMediaItem aMediaItem);

  /**
   * \brief Move a media item from one position to another in the list
   * \param aFromIndex Index of media item to move
   * \param aToIndex Index of media item to insert the moved item before
   */
  void moveBefore(in unsigned long aFromIndex,
                  in unsigned long aToIndex);

  /**
   * \brief Move a media item to the end of the list
   * \param aIndex Index of media item to move
   */
  void moveLast(in unsigned long aIndex);

  /**
   * \brief Remove a media item from the list
   * \param aMediaItem Media item to remove
   */
  void remove(in sbIMediaItem aMediaItem);

  /**
   * \brief Remove a media item from the list by index
   * \param aIndex Index of the item to remove
   */
  void removeByIndex(in unsigned long aIndex);

  /**
   * \brief Removed media items suppled by the provided enumerator
   * \param aMediaItems An enumerator returning sbIMediaItem objects
   */
  void removeSome(in nsISimpleEnumerator aMediaItems);

  /**
   * \brief Clear the list
   */
  void clear();

  /**
   * \brief Get a treeview that will display this media list
   */
  readonly attribute nsITreeView treeView;

  /**
   * \brief Get the cascade filter set for this view instance
   */
  readonly attribute sbICascadeFilterSet cascadeFilterSet;

  /**
   * \brief Add a listener to this media list
   * \param aListener The listener to add
   */
  void addListener(in sbIMediaListListener aListener);

  /**
   * \brief Remove a listener from this media list
   * \param aListener The listener to remove
   */
  void removeListener(in sbIMediaListListener aListener);
};
