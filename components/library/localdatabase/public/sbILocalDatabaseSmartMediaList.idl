/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbILocalDatabaseSmartMediaList.idl
 * \brief Definition of the sbILocalDatabaseSmartMediaList interface
 * \sa sbIMediaList.idl
 */

#include "nsISupports.idl"

[scriptable, uuid(1E41DDE1-D6A0-4e12-91E8-A5D47E0332F4)]
interface sbILocalDatabaseSmartMediaListCondition : nsISupports
{
  /**
   * \brief The name of the property used in this condition.
   */
  attribute AString propertyName;

  /**
   * \brief The operator used in this condition
   * \sa sbIPropertyInfo
   */
  attribute AString operator;

  /**
   * \brief 
   */
  attribute AString value;

  /**
   * 
   */
  attribute boolean limit;
};

/**
* \interface sbILocalDatabaseSmartMediaList
* \brief Smart media list specific methods
*
* Methods and attributes that are specific to the smart media list are
* implemented here.
*
* \sa sbIMediaList
*/
[scriptable, uuid(50443d21-eae9-4563-a72d-c6f6b1ea499c)]
interface sbILocalDatabaseSmartMediaList : nsISupports
{
  /**
   * \brief The SQL query used to build the smart media list
   */
  readonly attribute AString currentQuery;

  /**
   * \brief The number of conditions added to this smart playlist.
   */
  readonly attribute long conditionCount;

  /**
   * \brief Limit the total amount of items in the smart media list.
   */
  attribute long itemLimit;

  /**
   * \brief Randomly select the items out of the entire result set.
   */
  attribute boolean randomSelection;

  /**
   * \brief Add a condition or limiting condition.
   */
  long addCondition(in sbILocalDatabaseSmartMediaListCondition aCondition);
  
  /**
   * \brief Remove a condition.
   */
  void removeCondition(in long aConditionIndex);

  /**
   * \brief Get the condition at the specified index. Indexes start at 0.
   * The last item is at conditionCount - 1.
   */
  sbILocalDatabaseSmartMediaListCondition getConditionAt(in long aConditionIndex);

  /**
   * \brief Rebuild the smart media list contents from the conditions specificied.
   * You should call this after you add/modify/remove any conditions.
   */
  void rebuild();
};
