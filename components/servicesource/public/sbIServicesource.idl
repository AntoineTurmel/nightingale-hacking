/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

#include "nsISupports.idl"
#include "nsIRDFDataSource.idl"
#include "sbIPlaylistsource.idl"

/**
* \interface sbIServicesource 
* \brief The internal RDF Data Source that sends playlistlist data to the UI.
*
* This object returns the playlistlist as an nsIRDFDataSource
*
* It has two ref values:
*
* ref="NC:ServicesourcePlayable" - The list of all playable playlists in the system
*
* ref="NC:Servicesource" - The above, plus the "Welcome" node at the beginning
*
* But it has no user-accessible methods.
*
*/
[scriptable, uuid(0646A07D-2697-4998-A4F3-D5F77938A7BE)]
interface sbIServicesource : nsIRDFDataSource
{
  /**
  * \brief Register sbIPlaylistCommands objects to be shown for specific playlists
  *
  * The sbIPlaylistCommands interface is used to algorithmically define a set
  * of commands to be rendered arbitrarily by a playlist ui object (currently,
  * playlist.xml).
  *
  * Commands can be registered for an entire database (by setting ContextGUID
  * and leaving TableName null), or for any "type" characteristic.
  *
  * \todo Currently, new registrations overwrite previous registrations.  BAD.  Make them save and return an array.  Please don't overwrite our standard commands.
  * \param aContextGUID The guid string for the database to register against
  * \param aTableName The name of the table to register against
  * \param aPlaylistType The arbitrary type string to register against
  * \param aCommandObj The command object instance to be used for these playlists
  * \sa sbIPlaylistCommands, playlist.xml
  */
  void registerPlaylistCommands( in AString aContextGUID, in AString aTableName, in AString aPlaylistType, in sbIPlaylistCommands aCommandObj );
  
  /**
  * \brief Retrieve the sbIPlaylistCommands object to be shown for a specific playlist
  *
  * Given the guid, table, and type strings, return a duplicate instance of
  * the sbIPlaylistCommands object registered.
  *
  * The "type" string has precedence over the "guid"/"table" pair.
  *
  * This method is only called by the playlist UI object, in playlist.xml
  *
  * \todo Currently, new registrations overwrite previous registrations.  BAD.  Make them save and return an array.  Please don't overwrite our standard commands.
  * \param aContextGUID The guid string for the playlist
  * \param aTableName The name of the playlist
  * \param aPlaylistType The type of the playlist
  * \return A newly duplicated command object instance to be used for this playlist
  * \sa sbIPlaylistCommands, playlist.xml
  */
  sbIPlaylistCommands getPlaylistCommands( in AString aContextGUID, in AString aTableName, in AString aPlaylistType );
};
