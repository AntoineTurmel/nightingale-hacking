/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbIPropertiesManager.idl
 * \brief Definition of the sbIPropertiesManager interface
 * \sa List of "see also" files
 */

#include "nsISupports.idl"

interface nsIStringEnumerator;
interface sbIPropertyInfo;

/**
* \interface sbIPropertiesManager
* \brief Manager for system wide metadata properties
*
* Components should register properties with this service at startup.
*
* \sa sbIPropertyInfo
*/
[scriptable, uuid(4325d6c4-4eaf-4324-8f91-a5865ac22008)]
interface sbIPropertiesManager : nsISupports
{
  /**
   * \brief Get a property object from its name
   * \param aName Name of the property
   * \return Property object for the given property, null if not found
   */
  sbIPropertyInfo getPropertyInfo(in AString aName);

  /**
   * \brief Add a property into the system
   * \param aPropertyInfo Property to add into the system.  An exception is
   *        thrown if the property's name is not unique
   */
  void addPropertyInfo(in sbIPropertyInfo aPropertyInfo);
};

/**
* \interface sbIPropertyInfo
* \brief System wide metadata property
* \sa sbIPropertyManager
*/
[scriptable, uuid(3024b398-5c89-4122-8327-3bf9673e22dd)]
interface sbIPropertyInfo : nsISupports
{
  const unsigned long SORT_NULL_SMALL = 0;
  const unsigned long SORT_NULL_BIG   = 1;
  const unsigned long SORT_NULL_FIRST = 2;
  const unsigned long SORT_NULL_LAST  = 3;

  /**
   * \brief Unique name for this property
   */
  readonly attribute AString name;

  /**
   * \brief Bundle key name for the localized name of this property
   */
  readonly attribute AString displayKey;

  /**
   * \brief True if this property has a selection list
   */
  readonly attribute boolean hasValues;

  /**
   * \brief An enumerator of selection list values
   */
  readonly attribute nsIStringEnumerator values;

  /**
   * \brief Display units (does this need to be i18ned?)
   */
  readonly attribute AString units;

  /**
   * \brief Validates the string for this property type
   * \param aValue Value to validate
   * \return Ture if the value is valid for this property, otherwise false
   */
  boolean validate(in AString aValue);

  /**
   * \brief Formats the value for display
   * \param aValue Value to format
   * \return The formatted value
   */
  AString format(in AString aValue);
};

