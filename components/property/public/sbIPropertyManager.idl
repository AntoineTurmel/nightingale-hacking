/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbIPropertiesManager.idl
 * \brief Definition of the sbIPropertiesManager interface
 * \sa List of "see also" files
 */

#include "nsISupports.idl"

interface nsISimpleEnumerator;
interface nsIStringEnumerator;
interface nsIStringBundle;
interface nsIURI;
interface sbIPropertyInfo;
interface sbIPropertyArray;


/**
* \interface sbIPropertiesManager
* \brief Manager for system wide metadata properties
*
* Components should register properties with this service at startup.
*
* \sa sbIPropertyInfo
*/
[scriptable, uuid(4325d6c4-4eaf-4324-8f91-a5865ac22008)]
interface sbIPropertyManager : nsISupports
{
  /**
   * \brief An enumerator containing the names of all
   * registered properties.
   */
  readonly attribute nsIStringEnumerator propertyNames;

  /**
   * \brief Get a property object from its name
   * \param aName Name of the property
   * \return Property object for the given property, null if not found
   */
  sbIPropertyInfo getPropertyInfo(in AString aName);

  /**
   * \brief Add a property into the system
   * \param aPropertyInfo Property to add into the system.  An exception is
   *        thrown if the property's name is not unique
   */
  void addPropertyInfo(in sbIPropertyInfo aPropertyInfo);
  
  /**
   * \brief Helper to get a string bundle.
   */
  nsIStringBundle createBundle(in string aURLSpec);
   
  /**
   * \brief Helper to get a display value, using a string name, from a bundle.
   */
  AString getStringFromName(in nsIStringBundle aBundle, in AString aName);
   
};

/**
 * \interface sbIPropertyOperator
 * \brief 
 */
[scriptable, uuid(2C334049-EFCD-40ed-99F8-A96D541569E5)]
interface sbIPropertyOperator : nsISupports
{
  /**
   * \brief The operator.
   */
  readonly attribute AString operator;

  /**
   * \brief The operator readable string or
   * language property name.
   */
  readonly attribute AString operatorReadable;

  /**
   * \brief Initialize the operator.
   * \note This method may not be called more than once.
   */
  void Init(in AString aOperator, in aString aOperatorReadable);
};

/**
* \interface sbIPropertyInfo
* \brief System wide metadata property
* \sa sbIPropertyManager
*/
[scriptable, uuid(3024b398-5c89-4122-8327-3bf9673e22dd)]
interface sbIPropertyInfo : nsISupports
{
  readonly attribute AString OPERATOR_EQUALS;
  readonly attribute AString OPERATOR_NOTEQUALS;
  readonly attribute AString OPERATOR_GREATER;
  readonly attribute AString OPERATOR_GREATEREQUAL;
  readonly attribute AString OPERATOR_LESS;
  readonly attribute AString OPERATOR_LESSEQUAL;
  readonly attribute AString OPERATOR_CONTAINS;
  readonly attribute AString OPERATOR_BEGINSWITH;
  readonly attribute AString OPERATOR_ENDSWITH;

  /**
   * \brief Causes null values to be infinitely small.  This is the default.
   */
  const unsigned long SORT_NULL_SMALL = 0;

  /**
   * \brief Causes null values to be infinitely large.
   */
  const unsigned long SORT_NULL_BIG   = 1;

  /**
   * \brief Null values always first.
   */
  const unsigned long SORT_NULL_FIRST = 2;

  /**
   * \brief Null values always last.
   */
  const unsigned long SORT_NULL_LAST  = 3;
  
  /**
   * \brief Set where NULL values get sorted to.
   */
  attribute unsigned long nullSort;

  /**
   * \brief Sort profile to be used.
   *
   * This is a list of columns to sort by for a peculiar 
   * property. For example, when sorting by artist, you typically want to sort
   * by Artist, Album and Track No.
   */
  attribute sbIPropertyArray sortProfile;

  /**
   * \brief Unique name for this property
   */
  attribute AString name;

  /**
   * \brief The type property.
   */
  attribute AString type;

  /**
   * \brief Bundle key name for the localized name of this property
   */
  attribute AString displayName;

  /**
   * \brief Display this property using the suggested base widget available for
   *        tree children. 
   * Example: 'progressmeter' or 'checkbox'.
   */
  attribute AString displayUsingSimpleType;

  /**
   * \brief Display this property using the suggested XBL
   * widget identified by the following URI.
   */
  attribute nsIURI displayUsingXBLWidget;

  /**
   * \brief True if this property has a selection list
   */
  //attribute boolean hasValues;

  /**
   * \brief An enumerator of selection list values
   */
  //attribute nsIStringEnumerator values;

  /**
   * \brief Display units (I.S. compliant please). This unit is appended
   * at the end of the formatted string returned by sbIPropertyInfo::format().
   * \note More information here: http://www.unc.edu/~rowlett/units/sipm.html
   */
  attribute AString units;

  /**
   * \brief Contains sbIPropertyOperator 's.
   */
  attribute nsISimpleEnumerator operators;

  /**
   * \brief Validates the string for this property type
   * \param aValue Value to validate
   * \return True if the value is valid for this property, otherwise false
   */
  boolean validate(in AString aValue);

  /**
   * \brief Formats the value for display
   * \param aValue Value to format
   * \return The formatted value
   */
  AString format(in AString aValue);

  /**
   * \brief Formats the value to enable proper sorting.
   * \param aValue Value to format.
   * \return The formatted sorting value.
   */
  AString makeSortable(in AString aValue);

  /**
   * \brief Gets a whitespace-separated string of properties to alter the
   *        display of a value in a treeview.
   *
   * \param aValue
   *        The current value of the property 
   *
   * \return A whitespace-separated string.
   */
  AString getDisplayPropertiesForValue(in AString aValue);
};

[scriptable, uuid(ceff6b77-4b4d-48d0-816f-26ec1992a5b2)]
interface sbITextPropertyInfo : sbIPropertyInfo
{
  /**
   * \brief Minimum length of string.
   */
  attribute unsigned long minLength;

  /**
   * \brief Maximum length of string.
   */
  attribute unsigned long maxLength;

  /**
   * \brief Must be lowercase (only valid for languages where this applies)
   */
  attribute boolean enforceLowercase;
};

[scriptable, uuid(eb35eca3-a9ec-4e01-a9af-152c72086e68)]
interface sbINumberPropertyInfo : sbIPropertyInfo
{
  /**
   * \brief Unsigned octal representation (eg. 16, or 14 decimal).
   */
  const unsigned long RADIX_8  = 8;

  /**
   * \brief Signed decimal representation (eg. 14 decimal)
   */
  const unsigned long RADIX_10 = 10;

  /**
   * \brief Unsigned hex representation (eg. 0x0E, or 14 decimal)
   */
  const unsigned long RADIX_16 = 16;

  /**
   * \brief Minimum value allowed.
   */
  attribute long long minValue;

  /** 
   * \brief Minimum value allowed.
   */
  attribute long long maxValue;

  /**
   * \brief Radix (must be 8, 10 or 16).
   */
  attribute unsigned long radix;
};

[scriptable, uuid(b8d0b930-8aab-4afa-969d-3a5dca7ea536)]
interface sbIURIPropertyInfo : sbIPropertyInfo
{
  /**
   * \brief Constrain URI to a specific scheme as per RFC 2396.
   * Some quick examples: file, http, ftp.
   */
  attribute AString constrainScheme;
};

/**
 * \interface sbIDatetimePropertyInfo
 *
 */
[scriptable, uuid(df7d6d96-db92-4e30-9f5a-01088f3d7dc5)]
interface sbIDatetimePropertyInfo : sbIPropertyInfo
{
  const long TIMETYPE_UNINITIALIZED = -1;

  /**
   * \brief 2007-03-28 , in localized format
   */
  const long TIMETYPE_DATE = 0; 
  
  /**
   * \brief HH:mm:ss.ms, in localized format. Limited to 24 hour days.
   * \sa TIMETYPE_DURATION
   */
  const long TIMETYPE_TIME = 1; 
  
  /**
   * \brief Long date format, 2007-03-28 12:33:01 , no milliseconds.
   */
  const long TIMETYPE_DATETIME = 2;

  /**
   * \brief Duration, represented in HH:mm:ss.ms, in localized format.
   * May exceed 24 hours.
   */
  const long TIMETYPE_DURATION = 3;

  /**
   * \brief Timestamp format, respects unix time, microsecond format.
   * \note This is also the internal storage type for this property.
   */
  const long TIMETYPE_TIMESTAMP = 4;

  /**
   * \brief You must initialize this attribute before using this object.
   * If you do not, all methods on this object will return 
   * NS_ERROR_NOT_INITIALIZED.
   */
  attribute long timeType;

  /**
   * \brief A minimum time value to enforce when validating. If you do not
   * wish to use this, set it to 0. 
   *
   * You must set this attribute in order for this object to function properly.
   * If you do not, all methods on this object will return 
   * NS_ERROR_NOT_INITIALIZED.
   */
  attribute long long minTime;

  /**
   * \brief A maximum time value to enforce when validating. If you do not
   * wish to use this, set it to 0.
   *
   * You must set this attribute in order for this object to function properly.
   * If you do not, all methods on this object will return
   * NS_ERROR_NOT_INITIALIZED.
   */
  attribute long long maxTime;

  /**
   * \brief Causes TIMETYPE_DURATION to display from -xx:xx:xx to 0 instead of
   * 0 to xx:xx:xx.
   */
  attribute boolean durationInverse;

  /**
   * \brief Cause TIMETYPE_DURATION to display milliseconds.
   */
  attribute boolean durationWithMilliseconds;
};
