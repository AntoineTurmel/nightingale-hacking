/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbIPropertiesManager.idl
 * \brief Definition of the sbIPropertiesManager interface
 * \sa List of "see also" files
 */

#include "nsISupports.idl"

interface nsISimpleEnumerator;
interface nsIStringEnumerator;
interface nsIStringBundle;
interface nsIURI;
interface sbIPropertyInfo;
interface sbIPropertyArray;
interface sbIPropertyUnitConverter;

/**
* \interface sbIPropertyManager
* \brief Manager for system wide metadata properties
*
* Components should register properties with this service at startup.
*
* \sa sbIPropertyInfo
*/
[scriptable, uuid(ed260380-8c1b-11dd-ad8b-0800200c9a66)]
interface sbIPropertyManager : nsISupports
{
  /**
   * \brief An enumerator containing the ids of all
   * registered properties.
   */
  readonly attribute nsIStringEnumerator propertyIDs;

  /**
   * \brief Get a property object from its id
   * \param aID ID of the property
   * \return Property object for the given property, null if not found
   */
  sbIPropertyInfo getPropertyInfo(in AString aID);

  /**
   * \brief Add a property into the system
   * \param aPropertyInfo Property to add into the system.  An exception is
   *        thrown if the property's ID is not unique
   */
  void addPropertyInfo(in sbIPropertyInfo aPropertyInfo);

  /**
   * \brief Check for a property in the system by ID
   * \param aID ID of the property
   * \return true if property is in system
   * \return false if property is not in system
   */
  boolean hasProperty(in AString aID);

  /**
   * \brief Helper to get a string bundle.
   */
  nsIStringBundle createBundle(in string aURLSpec);

  /**
   * \brief Helper to get a display value, using a string name, from a bundle.
   */
  AString getStringFromName(in nsIStringBundle aBundle, in AString aName);

  /**
   * \brief Get all the properties that in any way depend on 
   * the given property.  For example, the secondary sort 
   * of property A may include property B.
   */
  sbIPropertyArray getDependentProperties(in AString aID);
};

/**
 * Components can be registered with the category manager with this category
 * to be notified of the property manager being ready.  The name is ignored,
 * but the value should be the contract id of the component - possibly preceeded
 * by "service," to be created as a service instead of a new instance.  The
 * component should implement nsIObserver and will be notified with the
 * category name as the topic.
 *
 * Alternatively, components can be registered with the observer service with
 * the category name as the topic instead; they will also be notified at the
 * same time.
 *
 * It is recommended that this only be used to register property info entries,
 * and other work should be done in different notifications.
 */
%{C++
  #define SB_PROPERTY_MANAGER_READY_CATEGORY "songbird-property-manager-ready"
%}C++

/**
 * \interface sbIPropertyOperator
 * \brief An interface to represent an operator that may act upon a property
 */
[scriptable, uuid(2C334049-EFCD-40ed-99F8-A96D541569E5)]
interface sbIPropertyOperator : nsISupports
{
  /**
   * \brief The operator.
   */
  readonly attribute AString operator;

  /**
   * \brief The operator readable string or
   * language property name.
   */
  readonly attribute AString operatorReadable;

  /**
   * \brief Initialize the operator.
   * \note This method may not be called more than once.
   */
  void Init(in AString aOperator, in aString aOperatorReadable);
};

/**
* \interface sbIPropertyInfo
* \brief An interface used to describe a metadata property for use by the UI and other sbILibrary interfaces (smartplaylists, etc)
* \sa sbIPropertyManager
*/
[scriptable, uuid(736df4ca-1dd2-11b2-adeb-b4366f783780)]
interface sbIPropertyInfo : nsISupports
{
  readonly attribute AString OPERATOR_EQUALS;
  readonly attribute AString OPERATOR_NOTEQUALS;
  readonly attribute AString OPERATOR_GREATER;
  readonly attribute AString OPERATOR_GREATEREQUAL;
  readonly attribute AString OPERATOR_LESS;
  readonly attribute AString OPERATOR_LESSEQUAL;
  readonly attribute AString OPERATOR_CONTAINS;
  readonly attribute AString OPERATOR_NOTCONTAINS;
  readonly attribute AString OPERATOR_BEGINSWITH;
  readonly attribute AString OPERATOR_NOTBEGINSWITH;
  readonly attribute AString OPERATOR_ENDSWITH;
  readonly attribute AString OPERATOR_NOTENDSWITH;
  readonly attribute AString OPERATOR_BETWEEN;
  readonly attribute AString OPERATOR_ISSET;
  readonly attribute AString OPERATOR_ISNOTSET;

  /* NOTE: if you change this list of null sort values, please update the
   * documentation in sbIRemoteWebPlaylist.idl as well, thanks!
   */

  /**
   * \brief Causes null values to be infinitely small.  This is the default.
   */
  const unsigned long SORT_NULL_SMALL = 0;

  /**
   * \brief Causes null values to be infinitely large.
   */
  const unsigned long SORT_NULL_BIG   = 1;

  /**
   * \brief Null values always first.
   */
  const unsigned long SORT_NULL_FIRST = 2;

  /**
   * \brief Null values always last.
   */
  const unsigned long SORT_NULL_LAST  = 3;
  
  /**
   * \brief Set where NULL values get sorted to.
   */
  attribute unsigned long nullSort;

  /**
   * \brief When sorting by this property, additionally 
   *        sort by the following properties
   *
   * A secondary list of columns to sort by for a particular property.
   * For example, when sorting by artist, you typically want to sort
   * by Artist, Album and Track No.
   *
   * This attribute is provided as a hint and optimization only.  
   * If you want control over how a table of properties is sorted, 
   * specify it on the view.
   *
   * NOTE: Setting this attribute after a property has already
   * been registered with the manager may not work as expected.  
   * This is a shortcoming of the architecture and will be fixed
   * with Bug 12677 - "[sorting] cached sortable values should 
   *                   invalidate when property implementations change"
   * If you need to change the secondary sort for a property that
   * may already be cached in the db, check out 
   * sbILocalDatabasePropertyCache.InvalidateSortData()
   */
  attribute sbIPropertyArray secondarySort;

  /**
   * \brief Unique ID for this property
   */
  attribute AString id;

  /**
   * \brief The type property.
   */
  attribute AString type;

  /**
   * \brief Localized display name of this property.
   */
  attribute AString displayName;

  /**
   * \brief Key used to find related localization strings
   */
  attribute AString localizationKey;

  /** 
   * \brief A user may view this property. 
   * This does not impede reading the value, it's merely meant as a guideline.
   */
  attribute boolean userViewable;

  /**
   * \brief A user may edit this property.
   * This does not impede editing the value, it's merely meant as a guideline.
   */
  attribute boolean userEditable;

  /** 
   * \brief A web site may read the value of this property.
   */
  attribute boolean remoteReadable;

  /**
   * \brief A web site may write the value of this property.
   */
  attribute boolean remoteWritable;
  
  /**
   * \brief True if this property has a selection list
   */
  //attribute boolean hasValues;

  /**
   * \brief An enumerator of selection list values
   */
  //attribute nsIStringEnumerator values;

  /**
   * \brief Enumerator of sbIPropertyOperator objects
   */
  attribute nsISimpleEnumerator operators;

  /**
   * \brief Get the sbIPropertyOperator for the given operator string
   * \param aOperator Operator string, one of the OPERATOR_ constants
   * \return The sbIPropertyOperator for the given string, or null of the
   *         operator is not supported by this property info
   */
  sbIPropertyOperator getOperator(in AString aOperator);

  /**
   * \brief Validates the string for this property type
   * \param aValue Value to validate
   * \return True if the value is valid for this property, otherwise false
   */
  boolean validate(in AString aValue);

  /**
   * \brief Sanitize a value so that it passes validation.
   * \note This might format your string in an unexpected way.
   * If you have any doubts, please look at the output string to make
   * sure it satisfies your requirements.
   */
  AString sanitize(in AString aValue);

  /**
   * \brief Formats the value for display
   * \param aValue Value to format
   * \return The formatted value
   */
  AString format(in AString aValue);

  /**
   * \brief Transforms the string into its sortable collation data equivalent.
   * \param aValue Value to transform.
   * \return The collation data used for sorting the value.
   */
  AString makeSortable(in AString aValue);

  /**
   * \brief Formats the value to enable proper search.
   * \param aValue Value to format.
   * \return The formatted search value.
   */
  AString makeSearchable(in AString aValue);

  /**
   * \brief A unit converter to convert to and from the units in
   * which the property can be expressed.
   */
  readonly attribute sbIPropertyUnitConverter unitConverter;
};

/**
 * \interface sbITextPropertyInfo
 * \brief The property information specific to text fields
 * \sa sbIPropertyInfo
 */
[scriptable, uuid(2c5553c0-8f2e-11dd-ad8b-0800200c9a66)]
interface sbITextPropertyInfo : sbIPropertyInfo
{
  /**
   * \brief Minimum length of string.
   */
  attribute unsigned long minLength;

  /**
   * \brief Maximum length of string.
   */
  attribute unsigned long maxLength;

  /**
   * \brief Must be lowercase (only valid for languages where this applies)
   */
  attribute boolean enforceLowercase;
  
  /**
   * \brief The property value should not be formatted.
   */
  attribute boolean noCompressWhitespace;
};

/**
 * \interface sbINumberPropertyInfo
 * \brief The property information specific to numeric fields
 * \sa sbIPropertyInfo
 */
[scriptable, uuid(66d736f5-057e-4537-98f9-df2e1b560a13)]
interface sbINumberPropertyInfo : sbIPropertyInfo
{
  /**
   * \brief Unsigned octal representation (eg. 16, or 14 decimal).
   */
  const unsigned long RADIX_8  = 8;

  /**
   * \brief Signed decimal representation (eg. 14 decimal)
   */
  const unsigned long RADIX_10 = 10;

  /**
   * \brief Unsigned hex representation (eg. 0x0E, or 14 decimal)
   */
  const unsigned long RADIX_16 = 16;

  /**
   * \brief Signed floating point representation (eg. 14.89)
   */
  const unsigned long FLOAT = 0;

  /**
   * \brief Minimum value allowed.
   */
  attribute long long minValue;

  /** 
   * \brief Minimum value allowed.
   */
  attribute long long maxValue;

  /** 
   * \brief Minimum floating point value allowed if number property is a float.
   */
  attribute double minFloatValue;

  /**
   * \brief Maximum float point value allowed if a number property is a float.
   */
  attribute double maxFloatValue;

  /**
   * \brief Radix (must be RADIX_8, RADIX_10, RADIX_16 or FLOAT).
   */
  attribute unsigned long radix;
};

/**
 * \interface sbIURIPropertyInfo
 * \brief The property information specific to URL/URI fields
 * \sa sbIPropertyInfo
 */
[scriptable, uuid(b8d0b930-8aab-4afa-969d-3a5dca7ea536)]
interface sbIURIPropertyInfo : sbIPropertyInfo
{
  /**
   * \brief Constrain URI to a specific scheme as per RFC 2396.
   * Some quick examples: file, http, ftp.
   */
  attribute AString constrainScheme;
};

/**
 * \interface sbIDatetimePropertyInfo
 * \brief The property information specific to date/time fields
 * \sa sbIPropertyInfo
 */
[scriptable, uuid(4e09ff7d-732c-4d5f-9d61-2ff0c626c40a)]
interface sbIDatetimePropertyInfo : sbIPropertyInfo
{
  readonly attribute AString OPERATOR_INTHELAST;
  readonly attribute AString OPERATOR_NOTINTHELAST;
  readonly attribute AString OPERATOR_ONDATE;
  readonly attribute AString OPERATOR_NOTONDATE;
  readonly attribute AString OPERATOR_BEFOREDATE;
  readonly attribute AString OPERATOR_BEFOREORONDATE;
  readonly attribute AString OPERATOR_AFTERDATE;
  readonly attribute AString OPERATOR_AFTERORONDATE;
  readonly attribute AString OPERATOR_BETWEENDATES;

  const long TIMETYPE_UNINITIALIZED = -1;

  /**
   * \brief 2007-03-28 , in localized format
   */
  const long TIMETYPE_DATE = 0; 
  
  /**
   * \brief HH:mm:ss.ms, in localized format. Limited to 24 hour days.
   */
  const long TIMETYPE_TIME = 1; 
  
  /**
   * \brief Long date format, 2007-03-28 12:33:01 , no milliseconds.
   */
  const long TIMETYPE_DATETIME = 2;

  /**
   * \brief Timestamp format, respects unix time, microsecond format.
   * \note This is also the internal storage type for this property.
   */
  const long TIMETYPE_TIMESTAMP = 4;

  /**
   * \brief You must initialize this attribute before using this object.
   * If you do not, all methods on this object will return 
   * NS_ERROR_NOT_INITIALIZED.
   */
  attribute long timeType;

  /**
   * \brief A minimum datetime value to enforce when validating. If you do not
   * wish to use this, set it to 0. 
   *
   * You must set this attribute in order for this object to function properly.
   * If you do not, all methods on this object will return 
   * NS_ERROR_NOT_INITIALIZED.
   */
  attribute long long minDateTime;

  /**
   * \brief A maximum datetime value to enforce when validating. If you do not
   * wish to use this, set it to 0.
   *
   * You must set this attribute in order for this object to function properly.
   * If you do not, all methods on this object will return
   * NS_ERROR_NOT_INITIALIZED.
   */
  attribute long long maxDateTime;
};

/**
 * \interface sbIDurationPropertyInfo
 * \brief The property information specific to date/time fields
 * \sa sbIPropertyInfo
 */
[scriptable, uuid(c353b0a3-f715-4001-ae1b-f39f3a0591fa)]
interface sbIDurationPropertyInfo : sbIPropertyInfo
{
  /**
   * \brief A minimum duration value to enforce when validating. If you do not
   * wish to use this, set it to 0. 
   *
   * You must set this attribute in order for this object to function properly.
   * If you do not, all methods on this object will return 
   * NS_ERROR_NOT_INITIALIZED.
   */
  attribute long long minDuration;

  /**
   * \brief A maximum duration value to enforce when validating. If you do not
   * wish to use this, set it to 0.
   *
   * You must set this attribute in order for this object to function properly.
   * If you do not, all methods on this object will return
   * NS_ERROR_NOT_INITIALIZED.
   */
  attribute long long maxDuration;

  /**
   * \brief Causes the formatting to display from -xx:xx:xx to 0 instead of
   * 0 to xx:xx:xx.
   */
  attribute boolean durationInverse;

  /**
   * \brief Cause the formatting to display milliseconds.
   */
  attribute boolean durationWithMilliseconds;
};

/**
 * \interface sbIProgressPropertyInfo
 * \brief The property information specific to progressmeters
 *
 * \sa sbIPropertyInfo
 */
[scriptable, uuid(154e77d3-6750-4f4c-a070-473bb7645381)]
interface sbIProgressPropertyInfo : sbITextPropertyInfo
{
  /** 
   * \brief Minimum value allowed.
   */
  attribute AString modePropertyName;
};

/**
 * \interface sbIButtonPropertyInfo
 * \brief The property information specific to button properties
 * \sa sbIPropertyInfo
 */
[scriptable, uuid(797f47d2-f71d-409c-993c-4c5bd5ddaf02)]
interface sbIButtonPropertyInfo : nsISupports
{
  /**
   * \brief The label for the button.
   */
  attribute AString label;
};

/**
 * \interface sbIBooleanPropertyInfo
 * \brief The property information specific to boolean properties
 * \sa sbIPropertyInfo
 */
[scriptable, uuid(f16351be-db4c-400a-8ee0-b135113f02dd)]
interface sbIBooleanPropertyInfo : sbIPropertyInfo
{
  readonly attribute AString OPERATOR_ISTRUE;
  readonly attribute AString OPERATOR_ISFALSE;
};

/**
* \interface sbIDummyPropertyInfo
* \brief An interface used to recognize a dummy metadata property.
* \sa sbIPropertyManager
*/
[scriptable, uuid(ecd56b59-906a-44c9-ac24-3345f1b70b10)]
interface sbIDummyPropertyInfo : sbIPropertyInfo
{
};
