/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbISmartPlaylistPropertyRegistrar.idl
 * \brief Definition of the sbISmartPlaylistPropertyRegistrar interface
 */

#include "nsISupports.idl"
interface nsIStringEnumerator;

/**
* \interface sbISmartPlaylistPropertyRegistrar
* \brief Registrar for smart playlists properties
*
* Components should register the properties they wish to expose to the
* smart playlist editor via this service at startup.
*
*/
[scriptable, uuid(755c8f44-28e3-4971-9d38-241c721b90e0)]
interface sbISmartPlaylistPropertyRegistrar : nsISupports
{
  /**
   * \brief Returns an enumerator for all the properties that have been
   * registered to a particular smart playlist context.
   * \param aContextID ID of the context
   * \return Property string enumerator
   */
  nsIStringEnumerator getPropertiesForContext(in AString aContextID);

  /**
   * \brief Register a property to the smart playlist editor for a particular
   * context.
   * \param aContextID ID of the context
   * \param aProperty the property to register
   */
  void registerPropertyToContext(in AString aContextID, in AString aProperty);
};

