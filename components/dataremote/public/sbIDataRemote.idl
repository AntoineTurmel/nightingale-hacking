/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2006 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the “GPL”).
// 
// Software distributed under the License is distributed 
// on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

/**
 * \file sbIDataRemote.idl
 * \brief Definition of the sbIDataRemote Interface
 * \sa sbDataRemote.js
 */

#include "nsISupports.idl"
#include "nsIObserver.idl"

interface nsIDOMElement;

/**
 * \interface sbIDataRemote
 * \brief An interface for accessing stored data and linking that data to 
 *        objects through callbacks, attributes and properties.
 *
 * . From javascript you should create one of these
 *   by the convenience method: SB_NewDataRemote( key, root ) as exposed in the
 *   file songbird_interfaces.js
 * \sa DataRemote
 */
[scriptable, uuid(80f8c597-2050-48a0-8efa-c9482547220e)]
interface sbIDataRemote : nsIObserver
{

  /**
   * Sets internal state, must be called before any other methods. All other
   *   calls will throw exceptions if init has not been called.
   * @param aKey
   * @param aRoot
   * @throws NS_ERROR_FAILURE if unable to get the pref branch
   * @throws NS_ERROR_UNEXPECTED if init has already been called
   */
  void init(in AString aKey, in AString aRoot);

  /**
   * Removes the data remote from being a pref listener.
   * @ throws NS_ERROR_NOT_INITIALIZED if init has not been called
   */
  void unbind();

  /**
   * When the key associated with the sbDataRemote changes the observer will
   *   get a callback to observe() with the new value for the data, a handle
   *   to the sbDataRemote and the key to which the data belongs.
   * @param aObserver
   * @param aSuppressFirst
   * @ throws NS_ERROR_NOT_INITIALIZED if init has not been called
   */
  void bindObserver(in nsIObserver aObserver,
                    in boolean aSuppressFirst);

  /**
   * When the key associated with the sbDataRemote changes the property of
   *   the element will be modified appropriately.
   * XXXredfive - document the behavior of bool/not/eval and what the property
   *              will get set to.
   * @param aElement
   * @param aProperty
   * @param aIsBool
   * @param aIsNot
   * @param aEvalString
   * @ throws NS_ERROR_NOT_INITIALIZED if init has not been called
   */
  void bindProperty(in nsIDOMElement aElement, 
                    in AString aProperty,
                    in boolean aIsBool,
                    in boolean aIsNot,
                    in AString aEvalString);
 
  /**
   * When the key associated with the sbDataRemote changes the attribute of
   *   the element will be modified appropriately.
   * XXXredfive - document the behavior of bool/not/eval and what the attribute
   *              will get set to.
   * @param aElement
   * @param aProperty
   * @param aIsBool
   * @param aIsNot
   * @param aEvalString
   * @ throws NS_ERROR_NOT_INITIALIZED if init has not been called
   * 
   */
  void bindAttribute(in nsIDOMElement aElement,
                     in AString aProperty,
                     in boolean aIsBool,
                     in boolean aIsNot,
                     in AString aEvalString);

  /**
   * The 3 ways to get and set the value of the data remote. All three
   *   represent the same data, just exposed as different types. A sort of
   *   home brewed simple variant. In javascript you can access these as you 
   *   would properties of a normal js object ( obj.stringValue = "foo" assigns
   *   the string foo into the dataremote ). In c++ you need to call getStringValue()
   *   and so forth.
   */
  attribute AString stringValue;
  attribute boolean boolValue;
  attribute long intValue;

};

