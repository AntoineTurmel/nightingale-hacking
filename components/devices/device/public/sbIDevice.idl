/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

/**
 * \file sbIDevice.idl
 * \brief [UNIMPLEMENTED UNTIL AFTER 0.3]
 */

#include "nsISupports.idl"

interface nsIPropertyBag2;
interface nsIVariant;

interface sbIDeviceCapabilities;
interface sbIDeviceContent;
interface sbIDeviceProperties;
interface sbIDeviceParameters;

/**
 * \interface sbIDevice
 * \brief [UNIMPLEMENTED UNTIL AFTER 0.3]
 * \note Implementations of this interface must be threadsafe.
 *
 * The main interface to all device objects
 */
[scriptable, uuid(500cd0ed-d670-4013-a6bf-53e4ff0ec501)]
interface sbIDevice : nsISupports
{
  /**
   * A human-readable name identifying the device. Optional.
   */
  readonly attribute AString name;

  /**
   * The id of the controller that created the device.
   */
  readonly attribute nsIDPtr controllerId;
  
  /**
   * The id of the device
   */
  readonly attribute nsIDPtr id;

  /**
   * Called when the device should initialize.
   */
  void connect();

  /**
   * Called when the device is to finalize.
   */
  void disconnect();

  /**
   * Whether or not the device is currently connected.
   */
  readonly attribute boolean connected;

  /**
   * Whether or not the device's events are being processed in additional threads
   * (i.e. off the main UI thread).
   */
  readonly attribute boolean threaded;

  /**
   * Get a preference stored on the device.
   */
  nsIVariant getPreference(in AString aPrefName);

  /**
   * Sets a preference stored on the device.
   */
  void setPreference(in AString aPrefName,
                     in nsIVariant aPrefValue);

  /**
   * Get the capabilities of the device.
   */
  readonly attribute sbIDeviceCapabilities capabilities;

  /**
   * All the device's content.
   */
  readonly attribute sbIDeviceContent content;

  /**
   * The parameters with which the device was created
   */
  readonly attribute nsIPropertyBag2 parameters;
  
  /**
   * The device's properties.
   */
  readonly attribute sbIDeviceProperties properties;
  /**
   * Whether the device is busy, etc.
   * @see sbIDeviceEvent::EVENT_DEVICE_MEDIA_READ_*
   * @see sbIDeviceEvent::EVENT_DEVICE_MEDIA_WRITE_*
   * @see STATE_*
   */
  readonly attribute unsigned long state;

  const unsigned long STATE_IDLE            = 0;
  const unsigned long STATE_DOWNLOADING     = 1;
  const unsigned long STATE_UPLOADING       = 2;
  const unsigned long STATE_BUSY            = 3;
  const unsigned long STATE_DELETING        = 4;
  const unsigned long STATE_DOWNLOAD_PAUSED = 5;
  const unsigned long STATE_UPLOAD_PAUSED   = 6;
  const unsigned long STATE_DISCONNECTED    = 9;

  const unsigned long REQUEST_FLAG_USER  = 0x80000000;
  const unsigned long REQUEST_FLAG_WRITE = 0x40000000;

  const unsigned long REQUEST_RESERVED  = 0;
  const unsigned long REQUEST_MOUNT     = 1;
  const unsigned long REQUEST_READ      = 2;
  const unsigned long REQUEST_EJECT     = 3;
  const unsigned long REQUEST_SUSPEND   = 4;

  const unsigned long REQUEST_WRITE         = REQUEST_FLAG_WRITE + 1;
  const unsigned long REQUEST_DELETE        = REQUEST_FLAG_WRITE + 2;
  const unsigned long REQUEST_SYNC          = REQUEST_FLAG_WRITE + 3;
  const unsigned long REQUEST_WIPE          = REQUEST_FLAG_WRITE + 4;
  const unsigned long REQUEST_MOVE          = REQUEST_FLAG_WRITE + 5;
  const unsigned long REQUEST_UPDATE        = REQUEST_FLAG_WRITE + 6;
  const unsigned long REQUEST_NEW_PLAYLIST  = REQUEST_FLAG_WRITE + 7;

  /**
   * 
   */
  void submitRequest(in unsigned long aRequest, in nsIPropertyBag2 aRequestParameters);
  /**
   * Cancel all current pending requests
   */
  void cancelRequests();

  /**
   * Eject device.
   */
  void eject();
};
