/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

/**
 * \file sbIDevice.idl
 */

#include "nsISupports.idl"

interface nsIPropertyBag2;
interface nsIVariant;

interface sbIDeviceCapabilities;
interface sbIDeviceContent;
interface sbIDeviceProperties;
interface sbIDeviceParameters;
interface sbIDeviceStatus;
interface sbIMediaItem;

/**
 * \interface sbIDevice
 * \note Implementations of this interface must be threadsafe.
 *
 * The main interface to all device objects
 */
[scriptable, uuid(ffc35973-a4b8-4378-8a91-7d9545f9151e)]
interface sbIDevice : nsISupports
{
  /**
   * A human-readable name identifying the device. Optional.
   */
  readonly attribute AString name;

  /**
   * A human-readable name identifying the device product (e.g., vendor and
   * model number). Optional.
   */
  readonly attribute AString productName;

  /**
   * The id of the controller that created the device.
   */
  readonly attribute nsIDPtr controllerId;
  
  /**
   * The id of the device
   */
  readonly attribute nsIDPtr id;

  /**
   * Called when the device should initialize.
   */
  void connect();

  /**
   * Called when the device is to finalize.
   *
   * Device implementations must call sbIDeviceContent::Finalize
   */
  void disconnect();

  /**
   * Whether or not the device is currently connected.
   */
  readonly attribute boolean connected;

  /**
   * Whether or not the device's events are being processed in additional threads
   * (i.e. off the main UI thread).
   */
  readonly attribute boolean threaded;

  /**
   * Get a preference stored on the device.
   */
  nsIVariant getPreference(in AString aPrefName);

  /**
   * Sets a preference stored on the device.
   */
  void setPreference(in AString aPrefName,
                     in nsIVariant aPrefValue);

  /**
   * Get the capabilities of the device.
   */
  readonly attribute sbIDeviceCapabilities capabilities;

  /**
   * All the device's content.
   */
  readonly attribute sbIDeviceContent content;

  /**
   * The parameters with which the device was created
   */
  readonly attribute nsIPropertyBag2 parameters;
  
  /**
   * The device's properties.
   */
  readonly attribute sbIDeviceProperties properties;
  
  /**
   * Whether the device is currently performing a busy operation, like copying
   * or deleting. This is defined by the device as to what states determine the
   * device is busy.
   */
  readonly attribute boolean isBusy;
  
  /**
   * Whether it is safe to disconnect the device, generally this is when it
   * is not performing a critical operation like copying a file to/from the
   * device. This is also defined by the device as to what states determine the
   * device can be disconnected. Usefull for when the user wants to shutdown
   * the application.
   */
  readonly attribute boolean canDisconnect;
  
  /**
   * A more detailed state of the device, with information on what item/list it
   * is currently being worked on and includes possible substates for more
   * complicated states.
   * @see sbIDeviceStatus
   */
  readonly attribute sbIDeviceStatus currentStatus;
  
  /**
   * Does the implementation of this sbIDevice provide support for
   * reformatting the current device?
   */
  readonly attribute boolean supportsReformat;

  /**
   * Flag to hold sync requests until we are ready. This is used for when the
   * user is editing the settings for a device, this way we do not start a sync
   * in the middle of changes.
   *
   * Example:
   *   (start code)
   *   this._device.cacheSyncRequests = true;
   *   // changes are made to settings
   *   this._device.cacheSyncRequests = false;
   *   (end)
   *
   * Note:
   *   When cacheSyncRequests is toggled from true to false and there have been
   *   sync requests we will start a sync.
   *   By default this attribute is false.
  */
  attribute boolean cacheSyncRequests;

  /**
   * Whether the device is busy, idle, syncing, mounting, etc.
   * @see sbIDeviceEvent::EVENT_DEVICE_MEDIA_READ_*
   * @see sbIDeviceEvent::EVENT_DEVICE_MEDIA_WRITE_*
   * @see STATE_*
   */
  readonly attribute unsigned long state;
  readonly attribute unsigned long previousState;

  const unsigned long STATE_IDLE            = 0;  // Not doing anything
  const unsigned long STATE_SYNCING         = 1;  // Performing a sync
  // These are not related to syncing (used for manual mode)
  const unsigned long STATE_COPYING         = 2;  // Copying a single file
  const unsigned long STATE_DELETING        = 3;  // Deleting a single file
  const unsigned long STATE_UPDATING        = 4;  // Updating a single file
  const unsigned long STATE_MOUNTING        = 5;  // (un)Mounting the device
  const unsigned long STATE_DOWNLOADING     = 6;
  const unsigned long STATE_UPLOADING       = 7;
  const unsigned long STATE_DOWNLOAD_PAUSED = 8;
  const unsigned long STATE_UPLOAD_PAUSED   = 9;
  const unsigned long STATE_DISCONNECTED    = 10; // Device is disconnected
  const unsigned long STATE_BUSY            = 11; // Busy with unspecified
                                                  // operation
  const unsigned long STATE_CANCEL          = 12; // In process of canceling operation
  const unsigned long STATE_TRANSCODE       = 13; // Transcoding a file.
  const unsigned long STATE_FORMATTING      = 14; // Formatting the device.
  const unsigned long STATE_SYNC_PREPARING  = 15; // Preparing to sync
  const unsigned long STATE_SYNC_PLAYLIST   = 16; // Sync playlist
  const unsigned long STATE_COPY_PREPARING  = 17; // Preparing to copy
  const unsigned long STATE_SYNCING_TYPE    = 18; // Syncing types
  const unsigned long STATE_COPYING_MUSIC   = 19; // Copying music
  const unsigned long STATE_COPYING_VIDEO   = 20; // Copying video 
  const unsigned long STATE_IMAGESYNC_PREPARING  = 21; // Preparing to sync
  const unsigned long STATE_COPYING_IMAGE        = 22; // Copying image

  const unsigned long STATE_USER            = 0x20000000;

  const unsigned long REQUEST_FLAG_USER  = 0x80000000;
  const unsigned long REQUEST_FLAG_WRITE = 0x40000000;

  /* read requests */
  const unsigned long REQUEST_MOUNT     = 1;
  const unsigned long REQUEST_READ      = 2;
  const unsigned long REQUEST_EJECT     = 3;
  const unsigned long REQUEST_SUSPEND   = 4;

  /* write requests */
  const unsigned long REQUEST_WRITE         = REQUEST_FLAG_WRITE + 1;
  const unsigned long REQUEST_DELETE        = REQUEST_FLAG_WRITE + 2;
  const unsigned long REQUEST_SYNC          = REQUEST_FLAG_WRITE + 3;
  /* delete all files on the device */
  const unsigned long REQUEST_WIPE          = REQUEST_FLAG_WRITE + 4;
  /* move an item inside one playlist */
  const unsigned long REQUEST_MOVE          = REQUEST_FLAG_WRITE + 5;
  const unsigned long REQUEST_UPDATE        = REQUEST_FLAG_WRITE + 6;
  const unsigned long REQUEST_NEW_PLAYLIST  = REQUEST_FLAG_WRITE + 7;

  /* reset the device to its factory state */
  const unsigned long REQUEST_FACTORY_RESET = REQUEST_FLAG_WRITE + 8;
  
  /* format the device media */
  const unsigned long REQUEST_FORMAT        = REQUEST_FLAG_WRITE + 9;

  /* perform image sync */
  const unsigned long REQUEST_IMAGESYNC     = REQUEST_FLAG_WRITE + 10;

  /**
   * 
   */
  void submitRequest(in unsigned long aRequest, in nsIPropertyBag2 aRequestParameters);
  /**
   * Cancel all current pending requests
   */
  void cancelRequests();
  
  /**
   * Call sync() on all libraries attached to this device
   */
  void syncLibraries();

  /**
   * Can this media item be stored on this device?
   * 
   * A supported file is either 
   *   a) natively supported, or
   *   b) transcodable into one,
   * and is either
   *   a) not DRM protected, or
   *   b) is DRM protected and supported by the device
   *
   * If a media item cannot be stored on the device and aReportErrors is true,
   * report an unsupported media item as a device error.
   */
  boolean supportsMediaItem(in sbIMediaItem aMediaItem,
                            [optional] in boolean aReportErrors);

  /**
   * Eject device.
   */
  void eject();

  /**
   * Format device.
   */
  void format();

  /* Set the enabled state on a named warning dialog */
  void setWarningDialogEnabled(in AString aWarning, in boolean aEnabled);
  /* Get the enabled state on a named warning dialog */
  boolean getWarningDialogEnabled(in AString aWarning);
  /* Reset the enabled state of all warning dialogs */
  void resetWarningDialogs();
};
