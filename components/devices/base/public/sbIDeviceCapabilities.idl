/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the “GPL”).
// 
// Software distributed under the License is distributed 
// on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

#include "nsISupports.idl"

interface nsIArray;
interface sbIDevice;

/**
 * \interface sbIDeviceCapabilities
 * \brief [UNIMPLEMENTED UNTIL AFTER 0.3]
 * \note Implementations of this interface must be threadsafe.
 */
[scriptable, uuid(54d42a87-9031-4928-991e-e66f4916a90b)]
interface sbIDeviceCapabilities : nsISupports
{

  /**
   * \brief Sets an array of function types
   * \param aFunctionTypes and array of function types
   * \param aFunctionTypesCount length of aFunctionTypes array
   */
  void setFunctionTypes([array, size_is(aFunctionTypesCount)]
                         in PRUint32 aFunctionTypes,
                        in unsigned long aFunctionTypesCount);

  /**
   * \brief Sets an array of event types
   * \param aEventTypes an array of event types
   * \param aEventCount length of aEventTypes array
   */
  void setEventTypes([array, size_is(aEventTypesCount)]
                      in unsigned long aEventTypes,
                     in unsigned long aEventTypesCount);

  /**
   * \brief Add an array of content types for a function type
   * \param aFunctionType Function type these content types fall under
   * \param aContentTypes an array of content types for aFunctionType
   * \param aContentTypesCount length of aContentTypes array
   */
  void addContentTypes(in PRUint32 aFunctionType,
                [array, size_is(aContentTypesCount)] in unsigned long aContentTypes,
                in unsigned long aContentTypesCount);
  
  /**
   * \brief Add an array of formats for a content type
   * \param aContentType Content type these formats fall under
   * \param aFormats an array of formats for aContentType
   * \param aFormatsCount length of aFormats array
   */
  void addFormats(in PRUint32 aContentType,
                  [array, size_is(aFormatsCount)] in string aFormats,
                  in unsigned long aFormatsCount);

  /**
   * \brief Indicates that the initialization is complete, the add and set
   *        functions above will no longer affect the data.
   */
  void initDone();


  
  /**
   *
   */
  const PRUint32 FUNCTION_UNKNOWN        = 0x00;
  const PRUint32 FUNCTION_DEVICE         = 0x01;
  const PRUint32 FUNCTION_AUDIO_PLAYBACK = 0x02;
  const PRUint32 FUNCTION_AUDIO_CAPTURE  = 0x03;
  const PRUint32 FUNCTION_IMAGE_DISPLAY  = 0x04;
  const PRUint32 FUNCTION_IMAGE_CAPTURE  = 0x05;
  const PRUint32 FUNCTION_VIDEO_PLAYBACK = 0x06;
  const PRUint32 FUNCTION_VIDEO_CAPTURE  = 0x07;

  /**
   * 
   */
  const PRUint32 FUNCTION_CLIENT_DEFINED = 0x80000000;

  /**
   * An array of nsISupportsPRUint32 values defined above.
   */
  // 
  void getSupportedFunctionTypes(out unsigned long aArrayCount,
                                 [retval, array, size_is(aArrayCount)]
                                  out PRUint32 aFunctionTypes);

  /**
   * 
   */
  const PRUint32 CONTENT_UNKNOWN  = 0x00;
  const PRUint32 CONTENT_FILE     = 0x01;
  const PRUint32 CONTENT_FOLDER   = 0x02;
  const PRUint32 CONTENT_AUDIO    = 0x03;
  const PRUint32 CONTENT_IMAGE    = 0x04;
  const PRUint32 CONTENT_VIDEO    = 0x05;
  const PRUint32 CONTENT_PLAYLIST = 0x06;
  const PRUint32 CONTENT_ALBUM    = 0x07;

  /**
   * 
   */
  const PRUint32 CONTENT_CLIENT_DEFINED = 0x80000000;

  /**
   * An array of nsISupportsPRUint32 values defined above.
   */
  void getSupportedContentTypes(in PRUint32 aFunctionType,
                                out unsigned long aArrayCount,
                                [retval, array, size_is(aArrayCount)]
                                out PRUint32 aContentTypes);

  /**
   * Returns an array of sbIContentTypeFormat objects.
   */
  void getSupportedFormats(in PRUint32 aContentType,
                           out unsigned long aArrayCount,
                           [retval, array, size_is(aArrayCount)]
                           out string aSupportedFormats);

  /**
   * An array of nsISupportsPRUint32 values defined in sbIDeviceEvent.idl
   */
  void getSupportedEvents(out unsigned long aArrayCount,
                          [retval, array, size_is(aArrayCount)]
                           out unsigned long aSupportedEvents);
};
