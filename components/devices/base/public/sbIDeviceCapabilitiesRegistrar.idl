/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2005-2009 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the “GPL”).
// 
// Software distributed under the License is distributed 
// on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

#include "nsISupports.idl"

interface nsIArray;

interface sbIDevice;
interface sbIDeviceCapabilities;
interface sbIMediaItem;
interface sbITranscodeProfile;

/**
 * This interface is used to allow device manufacturers to specify capabilities 
 * of their devices. Each implementation will register with the category
 * manager. The registrar is also responsible for choosing the transcode
 * profile to use. This allows maximum flexibility for device manufactures
 * to control the formats stored on their devices.
 * The registrar types gives us a way to allow overriding registrars.
 */
[scriptable, uuid(1B59F37C-3178-4804-8622-EE7F0EBAE838)]
interface sbIDeviceCapabilitiesRegistrar : nsISupports
{
  /* Types of registrars */
  /**
   * Not a registrar or not set
   */
  const PRUint32 NONE = 0;
  
  /**
   * Songbird provided registrars
   */
  const PRUint32 DEFAULT = 1;
  
  /**
   * General purpose third party registrars
   */
  const PRUint32 GENERIC = 2;
  
  /**
   * Device specific registrars
   */
  const PRUint32 DEVICE_SPECIFIC = 3;
  
  readonly attribute PRUint32 type;
  
  /**
   * \brief Allows a third party to augment the device capabilities.
   * 
   * \param aDevice the device that the capabilities belong to
   * \param aDeviceCapabilities the capabilities to augment.
   * \return Returns true if handled
   */
  void AddCapabilities(in sbIDevice aDevice, 
                       in sbIDeviceCapabilities aDeviceCapabilities);
                       
  /**
   * \brief Determines if the registrar is interested in this device
   * \param aDevice The device to check if the registrar is interested in
   */
  boolean InterestedInDevice(in sbIDevice aDevice);
  
  /**
   * \brief Choose a profile for a given media item
   * \param aMediaItem The media item to find the profile for
   * \return The profile chosen, returns NS_ERROR_NOT_AVAILABLE if a suitable
   *         profile was not found
   */
   sbITranscodeProfile ChooseProfile(in sbIMediaItem aMediaItem,
                                     in sbIDevice aDevice);                                     
};

%{C++
#include "nsCOMPtr.h"
#include "nsIComponentManager.h"
#include "nsICategoryManager.h"
#include "nsIServiceManager.h"
#include "nsStringGlue.h"
#include "nsXPCOMCID.h"

class nsIFile;
struct nsModuleComponentInfo;

#define SB_DEVICE_CAPABILITIES_REGISTRAR_CATEGORY "songbird-device-capabilities-registrar"
             
/**
 * Put this in your module definition file. Give your class name. Then your
 * moduleInfo should look something like this:
 *
 *   NS_GENERIC_FACTORY_CONSTRUCTOR(sbSampleCapabilitiesRegistrar);
 *   SB_DEVICE_CAPABILITIES_REGISTRAR_REGISTERSELF(sbSampleCapabilitiesRegistrar);
 *
 *   static nsModuleComponentInfo components[] =
 *   {
 *     {
 *       CLASSNAME,
 *       CID,
 *       CONTRACTID,
 *       sbSampleCapabilitiesRegistrarConstructor,
 *       sbSampleCapabilitiesRegistrarRegisterSelf,
 *       sbSampleCapabilitiesRegistrarUnregisterSelf
 *     }
 *   };
 *
 *   NS_IMPL_NSGETMODULE(SampleController, components)
 */

#define SB_DEVICE_CAPABILITIES_REGISTRAR_REGISTERSELF(_name)                   \
                                                                               \
  NS_METHOD _name##RegisterSelf(nsIComponentManager* aCompMgr,                 \
                                nsIFile* aPath,                                \
                                const char* registryLocation,                  \
                                const char* componentType,                     \
                                const nsModuleComponentInfo* info);            \
                                                                               \
  NS_METHOD _name##UnregisterSelf(nsIComponentManager* aCompMgr,               \
                                         nsIFile* aPath,                       \
                                         const char* registryLocation,         \
                                         const nsModuleComponentInfo* info)

/**
 * Stick this in your implementation file. Give your class name.
 */
#define SB_DEVICE_CAPABILITIES_REGISTRAR_REGISTERSELF_IMPL(_name, _desc)       \
                                                                               \
  NS_METHOD                                                                    \
  _name##RegisterSelf(nsIComponentManager* aCompMgr,                           \
                      nsIFile* aPath,                                          \
                      const char* registryLocation,                            \
                      const char* componentType,                               \
                      const nsModuleComponentInfo* info)                       \
  {                                                                            \
    nsresult rv;                                                               \
    nsCOMPtr<nsICategoryManager> catMan =                                      \
      do_GetService(NS_CATEGORYMANAGER_CONTRACTID, &rv);                       \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
    nsCAutoString prevEntry;                                                   \
    rv = catMan->AddCategoryEntry(SB_DEVICE_CAPABILITIES_REGISTRAR_CATEGORY,   \
                                  _desc,                                       \
                                  info->mContractID,                           \
                                  PR_TRUE, PR_TRUE,                            \
                                  getter_Copies(prevEntry));                   \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
    NS_WARN_IF_FALSE(prevEntry.IsEmpty(),                                      \
                     "Another controller was registered with that id!");       \
    return NS_OK;                                                              \
  }                                                                            \
                                                                               \
  NS_METHOD                                                                    \
  _name##UnregisterSelf(nsIComponentManager* aCompMgr,                         \
                        nsIFile* aPath,                                        \
                        const char* registryLocation,                          \
                        const nsModuleComponentInfo* info)                     \
  {                                                                            \
    nsresult rv;                                                               \
    nsCOMPtr<nsICategoryManager> catMan =                                      \
      do_GetService(NS_CATEGORYMANAGER_CONTRACTID, &rv);                       \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
    rv = catMan->DeleteCategoryEntry(SB_DEVICE_CAPABILITIES_REGISTRAR_CATEGORY,            \
                                     _desc,                                    \
                                     PR_TRUE);                                 \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
    return NS_OK;                                                              \
  }
%}
