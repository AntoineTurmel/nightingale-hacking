/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

#include "nsISupports.idl"

interface nsISimpleEnumerator;

typedef unsigned long FourCC;

/**
 * \interface sbIContentTypeFormat
 * \note Implementations of this interface must be threadsafe.
 */
[scriptable, uuid(f08c6820-fa6c-44c0-9ce5-19c1d4a5fc3c)]
interface sbIContentTypeFormat : nsISupports
{
  void init(in FourCC aContainerFormat,
            [array, size_is(aEncodingFormatsCount)] in FourCC aEncodingFormats,
            in unsigned long aEncodingFormatsCount,
            [array, size_is(aDecodingFormatsCount)] in FourCC aDecodingFormats,
            in unsigned long aDecodingFormatsCount);
  /**
   * Code for the container type
   * Using an unsigned long is up for debate. I may want to opt for FourCC 
   * as well here if that's a viable option.
   */
  readonly attribute FourCC containerFormat;
   
  /**
   * Enumerates nsISupportsPRUint32 values of FourCC codes
   */
  readonly attribute nsISimpleEnumerator encodingFormats;
   
  /**
   * Enumerates nsISupportsPRUint32 values of FourCC codes
   */
  readonly attribute nsISimpleEnumerator decodingFormats; 
};
