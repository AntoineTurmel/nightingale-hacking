/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

#include "nsISupports.idl"

interface nsIVariant;

interface sbIDeviceEventTarget;

/**
 * \interface sbIDeviceEvent
 * \note Implementations of this interface must be threadsafe.
 */
[scriptable, uuid(d49fa358-2745-4df3-b592-ce6f3929d7b4)]
interface sbIDeviceEvent : nsISupports
{
  /**
   * 
   */
  const unsigned long COMMAND_DEVICE_BASE         = 0x00000000;
  const unsigned long COMMAND_DEVICE_RESET        = COMMAND_DEVICE_BASE + 1;
  const unsigned long COMMAND_DEVICE_POWER_DOWN   = COMMAND_DEVICE_BASE + 2;
  const unsigned long COMMAND_DEVICE_POWER_UP     = COMMAND_DEVICE_BASE + 3;
  const unsigned long COMMAND_DEVICE_MEDIA_EJECT  = COMMAND_DEVICE_BASE + 4;
  const unsigned long COMMAND_DEVICE_MEDIA_FORMAT = COMMAND_DEVICE_BASE + 5;

  /**
   * 
   */
  const unsigned long COMMAND_CONTROLLER_BASE  = 0x00020000;
  const unsigned long COMMAND_CONTROLLER_RESET = COMMAND_CONTROLLER_BASE + 1;

  /**
   * 
   */
  const unsigned long COMMAND_MARSHALL_BASE  = 0x00040000;
  const unsigned long COMMAND_MARSHALL_RESET = COMMAND_MARSHALL_BASE + 1;

  /**
   * 
   */
  const unsigned long COMMAND_MANAGER_BASE    = 0x00060000;
  const unsigned long COMMAND_MANAGER_REFRESH = COMMAND_MANAGER_BASE + 1;

  /**
   * 
   */
  const unsigned long COMMAND_CLIENT_DEFINED = 0x20000000;

  /**
   * Device events
   */
  const unsigned long EVENT_DEVICE_BASE               = 0x40000000;
  
  // the device was connected
  const unsigned long EVENT_DEVICE_ADDED              = EVENT_DEVICE_BASE + 1;
  // the device was disconnected
  const unsigned long EVENT_DEVICE_REMOVED            = EVENT_DEVICE_BASE + 2;
  // the device was reset
  const unsigned long EVENT_DEVICE_RESET              = EVENT_DEVICE_BASE + 3;
  
  // some sort of storage media was inserted into the device
  const unsigned long EVENT_DEVICE_MEDIA_INSERTED     = EVENT_DEVICE_BASE + 4;
  // some sort of storage media was removed from the device
  // (note that there may be more than one, and some may still be in the device)
  const unsigned long EVENT_DEVICE_MEDIA_REMOVED      = EVENT_DEVICE_BASE + 5;

  const unsigned long EVENT_DEVICE_TRANSFER_START     = EVENT_DEVICE_BASE + 6;
  const unsigned long EVENT_DEVICE_TRANSFER_PROGRESS  = EVENT_DEVICE_BASE + 7;
  const unsigned long EVENT_DEVICE_TRANSFER_END       = EVENT_DEVICE_BASE + 8;

  // device state changes
  const unsigned long EVENT_DEVICE_MEDIA_READ_START   = EVENT_DEVICE_BASE + 9;
  const unsigned long EVENT_DEVICE_MEDIA_READ_END     = EVENT_DEVICE_BASE + 10;
  const unsigned long EVENT_DEVICE_MEDIA_READ_FAILED  = EVENT_DEVICE_BASE + 11;
  const unsigned long EVENT_DEVICE_MEDIA_WRITE_START  = EVENT_DEVICE_BASE + 12;
  const unsigned long EVENT_DEVICE_MEDIA_WRITE_END    = EVENT_DEVICE_BASE + 13;
  const unsigned long EVENT_DEVICE_MEDIA_WRITE_FAILED = EVENT_DEVICE_BASE + 14;
  
  const unsigned long EVENT_DEVICE_INFO_CHANGED       = EVENT_DEVICE_BASE + 15;

  // device transfer errors
  const unsigned long EVENT_DEVICE_MEDIA_READ_UNSUPPORTED_TYPE = EVENT_DEVICE_BASE + 15;
  const unsigned long EVENT_DEVICE_MEDIA_WRITE_UNSUPPORTED_TYPE = EVENT_DEVICE_BASE + 16;
  
  // device general errors
  const unsigned long EVENT_DEVICE_ACCESS_DENIED        = EVENT_DEVICE_BASE + 17;
  const unsigned long EVENT_DEVICE_NOT_ENOUGH_FREESPACE = EVENT_DEVICE_BASE + 18;
  const unsigned long EVENT_DEVICE_NOT_AVAILABLE        = EVENT_DEVICE_BASE + 19;

  // device generic catch-all error
  const unsigned long EVENT_DEVICE_ERROR_UNEXPECTED     = EVENT_DEVICE_BASE + 20;

  // device generic state changed
  const unsigned long EVENT_DEVICE_STATE_CHANGED        = EVENT_DEVICE_BASE + 21;

  /**
   * 
   */
  const unsigned long EVENT_CONTROLLER_BASE = 0x40020000;

  /**
   * 
   */
  const unsigned long EVENT_MARSHALL_BASE = 0x40040000;

  /**
   * 
   */
  const unsigned long EVENT_MANAGER_BASE = 0x40060000;

  /**
   * 
   */
  const unsigned long EVENT_CLIENT_DEFINED = 0x60000000;

  /**
   * The type of the event
   */
  readonly attribute PRUint32 type;

  /**
   * The data being passed through the event
   */
  readonly attribute nsIVariant data;

  /**
   * The event target this event is happening on
   */
  readonly attribute sbIDeviceEventTarget target;
  
  /**
   * Something that invoked this event
   */
  readonly attribute nsISupports origin;
};
