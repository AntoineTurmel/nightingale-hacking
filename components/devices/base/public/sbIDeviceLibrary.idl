/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

#include "sbILibrary.idl"
#include "nsISupports.idl"

interface nsIArray;
interface sbIMediaItem;
interface sbIMediaList;
interface sbIPropertyArray;
interface nsIURI;


/**
 * \interface sbIDeviceLibraryListener
 * \brief Interface used to listen to changes to a device library.
 * \note Implementations of this interface must be threadsafe.
 *
 * \sa sbIDeviceLibrary
 */
[scriptable, uuid(49c9f941-cf71-47cf-ab2f-7f6f97eba3ee)]
interface sbIDeviceLibraryListener : nsISupports
{
  /**
   * \brief Called when the library is about to perform multiple operations at
   *        once.
   *
   * This notification can be used to optimize behavior. The consumer may
   * choose to ignore further notifications until the onBatchEnd notification
   * is received.
   *
   * \param sbIMediaList aMediaList The list that has changed.
   */
  void onBatchBegin(in sbIMediaList aMediaList);

  /**
   * \brief Called when the library has finished performing multiple operations
   *        at once.
   *
   * This notification can be used to optimize behavior. The consumer may
   * choose to stop ignoring notifications after receiving this notification.
   *
   * \param sbIMediaList aMediaList The list that has changed.
   */
  void onBatchEnd(in sbIMediaList aMediaList);

  /**
   * Listener functions for media list changes (sbIMediaList)
   */
  /**
   * \brief Called when a media item is added to a list, through add or addAll.
   * \param sbIMediaList aMediaList The list that has changed.
   * \param sbIMediaItem aMediaItem The new media item.
   * \param unsigned long aIndex The index of the new media item
   * \return True if you do not want any further onItemAdded notifications for
   *         the current batch.  If there is no current batch, the return value
   *         is ignored.
   */
  boolean onItemAdded(in sbIMediaList aMediaList,
                      in sbIMediaItem aMediaItem,
                      in unsigned long aIndex);

  /**
   * \brief Called before a media item is removed from a list, through remove,
   *        removeAll or removeByIndex.
   * \param sbIMediaList sbIMediaList aMediaList The list that has changed.
   * \param sbIMediaItem sbIMediaItem aMediaItem The removed media item.
   * \param unsigned long aIndex The index of the item to be removed
   * \return True if you do not want any further onItemRemoved for the
   *         current batch.  If there is no current batch, the return value is
   *         ignored.
   */
  boolean onBeforeItemRemoved(in sbIMediaList aMediaList,
                              in sbIMediaItem aMediaItem,
                              in unsigned long aIndex);

  /**
   * \brief Called after a media item has been removed from a list, through
   *        remove, removeAll or removeByIndex.
   * \param sbIMediaList aMediaList The list that has changed.
   * \param sbIMediaItem aMediaItem The removed media item.
   * \param unsigned long aIndex The index of the removed item
   * \return True if you do not want any further onItemRemoved for the
   *         current batch.  If there is no current batch, the return value is
   *         ignored.
   */
  boolean onAfterItemRemoved(in sbIMediaList aMediaList,
                             in sbIMediaItem aMediaItem,
                             in unsigned long aIndex);
  /**
   * \brief Called before a media list is cleared.
   * \sa sbIMediaList::Clear
   */
  boolean onBeforeListCleared(in sbIMediaList aMediaList);

  /**
   * \brief Called when a media list is cleared.
   * \param sbIMediaList aMediaList The list that has been cleared.
   * \return True if you do not want any further onListCleared notifications
   *         for the current batch.  If there is no current batch, the return
   *         value is ignored.
   */
  boolean onListCleared(in sbIMediaList aMediaList);

  /**
   * \brief Called when a media item is changed.
   * \param sbIMediaList aMediaList The list that has changed.
   * \param sbIMediaItem aMediaItem The item that has changed.
   * \param aProperties Array of properties that were updated.  Each property's
   *        value is the previous value of the property
   * \return True if you do not want any further onItemUpdated notifications
   *         for the current batch.  If there is no current batch, the return
   *         value is ignored.
   */
  boolean onItemUpdated(in sbIMediaList aMediaList,
                        in sbIMediaItem aMediaItem,
                        in sbIPropertyArray aProperties);

  /**
   * \brief Called when a media item is moved.
   * \param sbIMediaList aMediaList The list that contains the item that moved.
   * \param aFromIndex Index of the item that was moved
   * \param aToIndex New index of the moved item
   * \return True if you do not want any further onItemMoved notifications
   *         for the current batch.  If there is no current batch, the return
   *         value is ignored.
   */
  boolean onItemMoved(in sbIMediaList aMediaList,
                      in unsigned long aFromIndex,
                      in unsigned long aToIndex);

 /**
   * \brief Called when a media item has been copied.
   * \param sbIMediaItem aSourceItem The item that was copied from.
   * \param sbIMediaItem aDestItem The item that was copied to.
   */
  void onItemCopied(in sbIMediaItem aSourceItem, 
                    in sbIMediaItem aDestItem);


  /**
   * These are listener functions that will get called before some actions
   * take place, like adding, or creating items in the library.
   */

  /**
   * \brief Called before a media item is going to be created.
   * \sa sbILibrary::CreateMediaItem
   */
  boolean onBeforeCreateMediaItem(in nsIURI aContentUri,
                                  [optional] in sbIPropertyArray aProperties,
                                  [optional] in boolean aAllowDuplicates);

  /**
   * \brief Called before a media list is going to be created.
   * \sa sbILibrary::CreateMediaList
   */
  boolean onBeforeCreateMediaList(in AString aType,
                                  [optional] in sbIPropertyArray aProperties);

  /**
   * \brief Called before an item is added.
   * \sa sbIMediaList::Add
   */
  boolean onBeforeAdd(in sbIMediaItem aMediaItem);

  /**
   * \brief Called before all item from a list are added.
   * \sa sbIMediaList::AddAll
   */
  boolean onBeforeAddAll(in sbIMediaList aMediaList);

  /**
   * \brief Called before some items are added.
   * \sa sbIMediaList::AddSome
   */
  boolean onBeforeAddSome(in nsISimpleEnumerator aMediaItems);

  /**
   * \brief Called before the device is cleared.
   * \sa sbIMediaList::Clear
   */
  boolean onBeforeClear();

};
 
/**
 * \interface sbIDeviceLibrary
 * \note Implementations of this interface must be threadsafe.
 */
[scriptable, uuid(c477d296-f25b-42a4-98bf-0b5d77dcebb4)]
interface sbIDeviceLibrary : sbILibrary
{
  /**
   * \brief Initialize the device library.
   * \param aLibraryId Device library identifier.
   */
  void initialize(in AString aLibraryId);

  /**
   * \brief Finalize the device library.
   */
  void finalize();

  /**
   * Syncronization settings
   */

  /** \brief Manually manage device.
    */
  const unsigned long MGMT_TYPE_MANUAL            = 0;

  /** \brief Automatically synchronize all of library to device.
    */
  const unsigned long MGMT_TYPE_SYNC_ALL          = 1;

  /** \brief Automatically synchronize a list of playlsits to device.
    */
  const unsigned long MGMT_TYPE_SYNC_PLAYLISTS    = 2;

  /**
   * \brief The currently configured device management type preference
   * for the device library.
   *
   * \sa MGMT_TYPE_* constants
   */

  attribute PRUint32 mgmtType;

  /**
   * \brief Return the list of playlists the user wants to sync from the main
   *        library to the device.
   *
   * \return List of sbIMediaLists that represent the playlists to
   *         sync.
   */

  nsIArray getSyncPlaylistList();

  /**
   * \brief Set the list of playlists the user wants to sync from the main
   *        library to the device
   *
   * \param aPlaylistList List of sbIMediaLists that represent the playlists to
   *                      sync.
   */

  void setSyncPlaylistList(in nsIArray aPlaylistList);

  /**
   * \brief Add a playlist to the list of playlists the user wants to sync from
   *        the main library to the device
   *
   * \param aPlaylist The playlist to add.
   */

  void addToSyncPlaylistList(in sbIMediaList aPlaylist);
  
  /**
   * \brief Initiates a sync operation on this library
   *
   * This is a no-op if this library is in manual management mode.
   *
   */
  
  void sync();


  /**
   * \brief Add a listener to this device library.
   * \param sbIDeviceLibraryListener aListener listener to add.
   */
  void addDeviceLibraryListener(in sbIDeviceLibraryListener aListener);

  /**
   * \brief Remove a listener from this device library.
   * \param sbIDeviceLibraryListener aListener listener to remove.
   */
  void removeDeviceLibraryListener(in sbIDeviceLibraryListener aListener);
};
