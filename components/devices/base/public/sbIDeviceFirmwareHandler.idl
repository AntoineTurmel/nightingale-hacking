/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2009 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

#include "nsISupports.idl"

interface nsIURI;
interface sbIDevice;
interface sbIDeviceEventListener;
interface sbIDeviceFirmwareUpdate;

/**
 * \interface sbIDeviceFirmwareHandler
 * \note Implementations of this interface must be threadsafe.
 * \note The methods which take an sbIDeviceEventListener will also
 *       send events to the registered device listeners. You only need
 *       to use your own listener if you do not have a listener registered
 *       with the device.
 */
[scriptable, uuid(daa205d1-15a9-40f9-86be-d9aa1812461d)]
interface sbIDeviceFirmwareHandler : nsISupports
{
  /**
   * \brief The Contract ID for this handler
   */
  readonly attribute AString contractId;

  /**
   * \brief URI for latest firmware (where it can be downloaded from).
   * \note This value is not valid until it is refreshed at least once.
   *       The value can be refreshed by calling refreshInfo.
   */
  readonly attribute nsIURI latestFirmwareLocation;
  
  /**
   * \brief The latest firmware version, in machine friendly format.
   * \note This value is not valid until it is refreshed at least once.
   *       The value can be refreshed by calling refreshInfo.
   */
  readonly attribute unsigned long latestFirmwareVersion;

  /**
   * \brief The latest firmware version, in human readable format.
   * \note This value is not valid until it is refreshed at least once.
   *       The value can be refreshed by calling refreshInfo.
   */
  readonly attribute AString latestFirmwareReadableVersion;

  /**
   * \brief Location for the release notes of the latest firmware.
   * \note This value is not valid until it is refreshed at least once.
   *       The value can be refreshed by calling refreshInfo.
   */
  readonly attribute nsIURI releaseNotesLocation;

  /**
   * \brief Location of the reset instructions.
   * \note This value is not valid until it is refreshed at least once.
   *       The value can be refreshed by calling refreshInfo.
   */
  readonly attribute nsIURI resetInstructionsLocation;

  /** 
   * \brief Check to see if this handler can update the specified device
   * \param aDevice - The device
   */
  boolean canUpdate(in sbIDevice aDevice,
                    in sbIDeviceEventListener aListener);

  /** 
   * \brief Refresh the firmware location, version, readable version, 
   *        notes, and instructions.
   * \param aDevice - The device
   * \param aListener [optional] - Device listener to recieve events
   */
  void refreshInfo(in sbIDevice aDevice,
                   in sbIDeviceEventListener aListener);

  /**
   * \brief Perform a firmware update on the specified device
   * \param aDevice - The device to update
   * \param aFirmwareUpdate - The firmware update to apply
   * \param aListener [optional] - Device listener to recieve events
   */
  void update(in sbIDevice aDevice, 
              in sbIDeviceFirmwareUpdate aFirmwareUpdate,
              in sbIDeviceEventListener aListener);

  /**
   * \brief Verify the firmware already on the device
   * \param aDevice - The device to verify
   * \param aListener [optional] - Device listener to recieve events
   */
  void verifyDevice(in sbIDevice aDevice, 
                    in sbIDeviceEventListener aListener);
  
  /**
   * \brief Verify the firmware update image
   * \param aDevice - The device associated with this firmware update
   * \param aFirmwareUpdate - The firmware update to verify
   * \param aListener [optional] - Device listener to recieve events
   */
  void verifyUpdate(in sbIDevice aDevice,
                    in sbIDeviceFirmwareUpdate aFirmwareUpdate, 
                    in sbIDeviceEventListener aListener);
};
