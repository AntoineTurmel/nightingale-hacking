/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2006 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

/**
 * \file  sbICDDevice.idl
 * \brief The IDL for sbICDDevice.
 */

#include "nsISupports.idl"
#include "sbIDeviceBase.idl"

/**
 * \interface sbICDDevice sbICDDevice.h
 *
 * \brief Songbird CDDevice Interface.
 *
 * <TODO: Detail>.
 *
 * \sa sbIDeviceBase.idl
 */
[scriptable, uuid(35da06df-eb59-4590-be5a-0329abc40965)]
interface sbICDDevice : sbIDeviceBase
{
  /**
   * \brief Finds the first CD device capable of writing.
   *
   * <TODO: Detail>
   *
   * \param aDeviceString [out AString] A string describing the writable
   *                      device.
   *
   * \return [PRBool] A nice boolean value indicating success or failure.
   */
  PRBool getWritableCDDrive(out AString aDeviceString);

  /**
   * \brief Allows OS-specific drive event notification.
   *
   * This method is provided so that on Windows, OS specific message for a
   * media insert or eject can be passed to sbICDDevice object (note that
   * caller should use sbIDeviceManager in obtaining sbICDDevice object and not
   * instantiate sbICDDevice directly, same applies to all other devices).
   *
   * \param aMediaInserted [in PRBool] A boolean indicating whether media was
   *                       inserted or not.
   *
   * \return [PRBool] A nice boolean value indicating success or failure.
   */
  PRBool onCDDriveEvent(in PRBool aMediaInserted);

  /**
   * \brief Set the amount of time to insert between burned tracks.
   *
   * <TODO: Detail>
   *
   * \param aDeviceString [in AString] A string describing the device.
   * \param aNumSeconds [in PRUint32] The number of seconds to insert.
   *
   * \return [PRBool] A nice boolean value indicating success or failure.
   */
  PRBool setGapBurnedTrack(in AString aDeviceString,
                           in PRUint32 aNumSeconds);
};
