/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

/**
 * \file sbIStateObject.idl
 * \brief sbIStateObject interface definition.
 * \sa 
 */

#include "nsISupports.idl" 

interface nsIObserver;
interface nsIWritablePropertyBag2;
interface nsIWritableVariant;

/**
 * \interface sbIStateObject
 * \brief [UNIMPLEMENTED UNTIL AFTER 0.3]
 *
 * The state object interface is used to store state with the possibility
 * of persisting the state data through multiple application sessions. The persisted
 * data is automatically loaded and available upon application startup.
 *
 * \sa sbIStateDatastore
 * \note This interface *is* threadsafe. Implementations should follow this assumption.
 */
[uuid(50CDB3BD-60E7-44e6-BF4B-081573809035)]
interface sbIStateObject: nsISupports
{
  /**
   * \brief State object specific error codes returned by 
   * the initialize method.
   */
  const unsigned long STATEOBJECT_CREATION_FAILED = 0x800000001;
  const unsigned long STATEOBJECT_LOADING_FAILED = 0x800000002;
  const unsigned long STATEOBJECT_CREATED = 0x01;
  const unsigned long STATEOBJECT_LOADED = 0x02;

  /**
   * \brief The key for this state object. 
   *
   * The key used to find the state object. The key present is only a partial or leaf key.
   * The complete key is composed of the various state objects that build the tree of state objects.
   * For example, if the complete key to an object is "metrics.playcount", two state objects are
   * involved in constructing the tree. The root object would have the key "metrics" and contain a
   * second
   */
  attribute AString key;

  /**
   * \brief The value of the state object. It is valid to not have a value set.
   *
   * The value can be any primitive type or complex type that implements nsISupports.
   * Please note that it is completely valid for a state object to not have any value set.
   */
  attribute nsIWritableVariant value;
 
  /**
   * \brief The parent state object. May be null if this is the root state object.
   */
  attribute sbIStateObject parent;

  /**
   * \brief The children state objects. May be empty if this is a leaf state object.
   */
  attribute nsIWritablePropertyBag2 children;

  /**
   * \brief Initialize the state object.
   *
   * Initialize the state object using a full key. This is required to use the object.
   * If you do not initialize the state object, every other method or attribute call will fail.
   * 
   * \note You must initialize the state object before using it. Failing to do so will 
   * make every method return a .
   * \param aFullKey The desired full key.
   * \param aCreate Boolean flag indicating wether to create the state object if it doesn't exist.
   * \param aDatastoreImpl The datastore type you wish to use. If an empty string is used, a default
   * datastore implementation type is chosen for you.
   * \return Error or success code.
   * \retval STATEOBJECT_CREATION_FAILED The creation of a new state object has failed.
   * \retval STATEOBJECT_LOADING_FAILED The loading of a previously created state object has failed.
   * \retval STATEOBJECT_CREATED The creation of a new state object has succeeded.
   * \retval STATEOBJECT_LOADED The loading of a previously created state object has succeeded.
   */
  unsigned long initialize(in AString aFullKey, in boolean aCreate, in AString aDatastoreImpl);

  /**
   * \brief Reconstitute the full key for this object.
   *
   * Reconstitute the full key for this object by walking back up the 
   * state object tree.
   * 
   * \return The full key for the state object. As an example: "metrics.playcount.mp3".
   * \note This can be lengthy operation, please avoid it if possible.
   */
  AString getFullKey();

  /**
   * \brief Add an observer to this status object.
   * \param aObserver The observer you wish to add.
   * \note To avoid nasty reference counting issues, please remove your observer when you are done using it.
   * \sa removeObserver
   */
  void addObserver(in nsIObserver aObserver);

  /**
   * \brief Remove an observer previously added to this status object.
   * \param aObserver The observer you wish to remove.
   * \note If you've added an observer please remove it to avoid nasty reference counting issues.ooch
   * \sa addObserver
   */
  void removeObserver(in nsIObserver aObserver);
};