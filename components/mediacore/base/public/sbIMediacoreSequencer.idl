/*
 //
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

#include "nsISupports.idl"

interface nsIArray;
interface nsIURI;

interface sbIMediacore;
interface sbIMediacoreSequence;
interface sbIMediacoreSequenceGenerator;
interface sbIMediaItem;
interface sbIMediaListView;

[scriptable, uuid(5dd7abe3-e872-4f69-8d9d-125806dbd580)]
interface sbIMediacoreSequencer : nsISupports
{
  const unsigned long MODE_FORWARD    = 0;
  const unsigned long MODE_REVERSE    = 1;
  const unsigned long MODE_SHUFFLE    = 1 << 1;

  const unsigned long MODE_CUSTOM     = 1 << 16;

  attribute unsigned long mode;

  const unsigned long MODE_REPEAT_NONE = 0;
  const unsigned long MODE_REPEAT_ONE  = 1;
  const unsigned long MODE_REPEAT_ALL  = 1 << 1;

  attribute unsigned long repeatMode;

  /**
   * \brief The view that was used to generate the current sequence.
   */
  attribute sbIMediaListView view;

  /**
   * \brief The current position in the view. This position
   *        is tied to the sequencePosition.
   * \throw NS_ERROR_NOT_AVAILABLE when the sequence position is invalid.
   */
  readonly attribute unsigned long viewPosition;

  /**
   * \brief The current item in the view. 
   * \note This is the equivalent of calling sbIMediaListView::getItemByIndex 
   *       using viewPosition.
   * \note This may be null if there is no currentItem.
   */
  readonly attribute sbIMediaItem currentItem;

  /**
   * \brief The next item in the sequence.
   * \note This is equivalent to getting the current sequence and asking it
   *       for sequencePosition + 1.
   * \note This may be null if there is no next item.
   */
  readonly attribute sbIMediaItem nextItem;

  /**
   * \brief The current sequence.
   */
  readonly attribute nsIArray currentSequence;

  /**
   * \brief The current position in the sequence. This position is tied
   *        to the viewPosition.
   * \throw NS_ERROR_NOT_AVAILABLE when the sequence position is invalid.
   */
  attribute unsigned long sequencePosition;

  /**
   * \brief Play a media list view as a sequence. Optionally provide the index
   *        of the item in the view that should play first in the sequence.
   * \param aView The view you wish to play.
   * \param aItemIndex The index of the item inside the view to play first.
   *                   You may pass sbIMediacoreSequencer::AUTO_PICK_INDEX if
   *                   you wish to have the sequencer pick the most appropriate
   *                   start index for the sequence.
   * \see AUTO_PICK_INDEX
   */
  void playView(in sbIMediaListView aView, 
                [optional] in long long aItemIndex);

  /**
   * \brief Allow the sequencer to pick the most appropriate start index for a
   *        sequence.
   *
   * The sequencer will pick a random index for the start of the sequence
   * if shuffle is enabled. If shuffle is disabled, the sequencer will pick
   * the first available index: 0.
   *
   * \see playView
   */
  const long AUTO_PICK_INDEX = -1;

  /**
   * \brief Play a single URL as a sequence.
   */
  void playURL(in nsIURI aURI);

  /**
   * \brief Play the sequence.
   */
  void play();
  
  /**
   * \brief Stop the sequence.
   */
  void stop();

  /**
   * \brief Go to the next item in the sequence.
   */
  void next();

  /**
   * \brief Go to the previous item in the sequence.
   */
  void previous();

  /**
   * \brief Indicate that the current core will handle the next item in the
   *        sequence when the stream ends.
   */
  void requestHandleNextItem(in sbIMediacore aMediacore);

  /**
   * \brief Abort the current item playback attempt.
   * \note This method may only be called from BEFORE_TRACK_CHANGE. If
   *       you attempt to call it from another context, it will silently 
   *       fail.
   */
  void abort();

  // When in custom mode, this generator is used to generate the sequence.
  attribute sbIMediacoreSequenceGenerator customGenerator;
};
