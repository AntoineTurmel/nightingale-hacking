/*
 //
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

#include "nsISupports.idl"

interface nsIVariant;

interface sbIMediacore;
interface sbIMediacoreError;
interface sbIMediacoreEventTarget;

[scriptable, uuid(edf5e894-5265-4599-a970-39c536dfa182)]
interface sbIMediacoreEvent : nsISupports
{
  /**
   * \brief Metadata describing current item has changed
   */
  const unsigned long METADATA_CHANGE = 0;
  /**
   * \brief URI used for operation has changed
   */
  const unsigned long URI_CHANGE      = 0;
  /**
   * \brief Current duration has changed
   */
  const unsigned long DURATION_CHANGE = 0;
  /**
   * \brief Volume has changed
   */
  const unsigned long VOLUME_CHANGE   = 0;
  /**
   * \brief Mute status has changed
   */
  const unsigned long MUTE_CHANGE     = 0;

  /**
   * \brief Stream found.
   */
  const unsigned long STREAM_FOUND    = 0;
  
  /**
   * \brief Buffering.
   */
  const unsigned long BUFFERING       = 0;
  /**
   * \brief Buffer underrun, operation is likely to halt.
   */
  const unsigned long BUFFER_UNDERRUN = 0;
  
  /**
   * \brief Stream has started.
   */
  const unsigned long STREAM_START    = 0;
  /**
   * \brief Stream is now paused.
   */
  const unsigned long STREAM_PAUSE    = 0;
  /**
   * \brief End of stream.
   */
  const unsigned long STREAM_END      = 0;

  /**
   * \brief Plugin missing for requested format.
   */
  const unsigned long PLUGIN_MISSING  = 0;

  /**
   * \brief Custom event base value.
   */
  const unsigned long CUSTOM_EVENT_BASE = 0x40000000;

  /**
   * \brief Indicates the event is an error and will have it's error member set.
   */
  const unsigned long ERROR_EVENT       = 0;

  /**
   * \brief The event type.
   */
  readonly attribute unsigned long type;
  /**
   * \brief Error member is only set when type of event is set to ERROR.
   */
  readonly attribute sbIMediacoreError error;

  /**
   * \brief The event data. Payload varies per event type.
   */
  readonly attribute nsIVariant data;

  /**
   * \brief Mediacore that generated the event.
   */
  readonly attribute sbIMediacore origin;
  /**
   * \brief Event Target that dispatched the event.
   */
  readonly attribute sbIMediacoreEventTarget target;
};
