/*
 //
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the �GPL�).
// 
// Software distributed under the License is distributed 
// on an �AS IS� basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
/**
 * \file sbIGStreamerSimple.idl
 * \brief [USER CODE SHOULD NOT REFERENCE THIS CLASS] 
 * 
 */
#include "nsISupports.idl"

interface nsIDOMXULElement;
interface sbIGStreamerEventListener;

/**
 * \interface sbIGStreamerSimple
 * \brief [USER CODE SHOULD NOT REFERENCE THIS CLASS]
 */
[scriptable, uuid(c102732f-2ef1-4c8a-8977-fd1d65bdea91)]
interface sbIGStreamerSimple : nsISupports
{
  attribute AString uri;
  attribute double volume; // [0, 1] range
  attribute boolean fullscreen;

  readonly attribute unsigned long long position; // Nanoseconds. TODO: Is this zero based or not for non-zero-based streams?
  readonly attribute boolean isPlaying;
  readonly attribute boolean isPlayingVideo;
  readonly attribute boolean isPaused;
  readonly attribute unsigned short bufferingPercent; // Spec out more sanely?
  readonly attribute unsigned long long streamLength; // Nanoseconds
  readonly attribute boolean isAtEndOfStream; // I doubt we want this at all
  readonly attribute long lastErrorCode; // possible values? The other code only checks if this is > 0, not any special values, so should it be a boolean?

  // Can we do better than this? Get arbitrary tags from the GStreamer backend?
  readonly attribute AString artist;
  readonly attribute AString album;
  readonly attribute AString title;
  readonly attribute AString genre;

  void init(in nsIDOMXULElement aVideoOutput);

  // Core playback API 
  void play();
  void pause();
  void stop();
  void seek(in unsigned long long aTimeNanos);

  // Event listeners. 
  
  // Add an event listener for all gstreamer-related events.
  void addEventListener(in sbIGStreamerEventListener aListener);
  // Remove an event listener
  void removeEventListener(in sbIGStreamerEventListener aListener);

};

%{C++
// {7a36e062-6d46-4c80-ad48-27c6241e3915}
#define SBGSTREAMERSIMPLE_CID \
	{ 0x7a36e062, 0x6d46, 0x4c80, \
	{ 0xad, 0x48, 0x27, 0xc6, 0x24, 0x1e, 0x39, 0x15 } }

#define SBGSTREAMERSIMPLE_CONTRACTID "@songbirdnest.com/Songbird/Playback/GStreamer/Simple;1"
#define SBGSTREAMERSIMPLE_CLASSNAME	 "GStreamerSimple"
%}
