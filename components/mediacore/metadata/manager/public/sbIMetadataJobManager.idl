/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

/**
 * \file sbIMetadataJobManager.idl
 * \brief Manages the lifecycle of file metadata read/write jobs.
 */
#include "nsISupports.idl"

interface nsIArray;
interface sbIMetadataJob;

/**
 * \interface sbIMetadataJobManager sbIMetadataJobManager.h
 * \brief Coordinates batch metadata read/write jobs
 *
 * Supports the creation of threaded read/write jobs for local media 
 * (URIs beginning with file://), and timer driven read jobs for remote media.
 *
 * An nsIArray of sbIMediaItem are passed to this interface to begin
 * a metadata task.  An sbIMetadataJob element will be returned
 * to the calling interface.
 *
 * The Metadata Job Manager is a service and should be called
 * via do_GetService.  Because it relies upon starting timers into the
 * main thread, newJob() may only be called from the main thread.
 * 
 * \sa sbILibrary, sbIMediaItem, sbIMetadataJob
 */
[scriptable, uuid(caabe490-001c-11dd-95ff-0800200c9a66)]
interface sbIMetadataJobManager : nsISupports
{
  /**
   * \brief Start a new metadata processing task for the given array of media items.
   *
   * This method will launch a new metadata task and return 
   * the task object for monitoring.
   *
   * You can construct the required array like so:
\verbatim
      var toScan = Components.classes["@mozilla.org/array;1"]
        .createInstance(Components.interfaces.nsIMutableArray);

      for (var i = 0; i < 100; i++)
        toScan.appendElement(myMediaItems[i], false);

      var myJob = theMetadataJobManager.newJob(toScan);
\endverbatim
   *
   * \param aMediaItemsArray An array filled with media items to be scanned.
   * \param aSleepMS How much of an interval/sleep per loop in and out of thread.
   * \param aJobType sbIMetadataJob.JOBTYPE_READ or sbIMetadataJob.JOBTYPE_WRITE.
   *
   * TODO: Consider changing aSleepMS to an priority enum. Callers shouldn't have 
   * to care about sleep time.
   */
  sbIMetadataJob newJob( in nsIArray aMediaItemsArray, 
                         in unsigned long aSleepMS, 
                         [optional] in unsigned short aJobType );
};
