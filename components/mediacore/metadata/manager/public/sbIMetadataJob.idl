/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/


#include "nsISupports.idl"

interface nsIArray;

/**
 * \interface sbIMetadataJob sbIMetadataJob.h
 * \brief Metadata Job represents the status of a running metadata task
 *
 * You get an sbIMetadataJob by calling sbIMetadataJobManager::newJob()
 * with an nsIArray of sbIMediaItem.
 *
 * Use the sbIJobProgress interface to receive progress notifications, and
 * sbIJobCancelable to cancel the job.
 * 
 * \sa sbILibrary, sbIMediaItem, sbIMetadataJobManager, sbIJobProgress, sbIJobCancelable
 */
[scriptable, uuid(b8aa3f00-ff8b-11dc-95ff-0800200c9a66)]
interface sbIMetadataJob : nsISupports
{

  /**
   * \brief Constant indicating that this job will read metadata
   *        from files into associated media items.
   */
  const unsigned short JOBTYPE_READ = 0;

  /**
   * \brief Constant indicating that this job will attempt to write metadata
   *        from media items back into associated files.
   */
  const unsigned short JOBTYPE_WRITE = 1;
  
  /**
   * \brief Indicates whether this is a read or write job. 
   * See JOBTYPE_READ and JOBTYPE_WRITE.
   */
  readonly attribute unsigned short type;

  /**
   * \brief Add some more media items to the job's queue.
   *
   * Appending to a completed job will throw an error.
   *
   * THIS METHOD APPENDS ALL THE ITEMS TO THE DATABASE QUEUE, BLOCKING UNTIL COMPLETE.
   * Try to only give it small (< 500 items) arrays in batches.
   *
   * \param aMediaItemsArray An array filled with media items to be processed.
   */
  void append( in nsIArray aMediaItemsArray );
};

