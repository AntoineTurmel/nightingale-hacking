/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

/**
 * \file sbIMetadataHandler.idl
 * \brief An interface for reading/writing file metadata tags
 */
#include "nsISupports.idl"
#include "nsIChannel.idl"
#include "sbIPropertyArray.idl"

/**
 * \interface sbIMetadataHandler sbIMetadataHandler.h
 * \brief An object capable of manipulating the metadata tags for a media file
 *
 * User code requests a handler by calling 
 * sbIMetadataManager::getHandlerForMediaURL that then returns one of these.
 *
 * \sa sbIMetadataManager
 */
[scriptable, uuid(58c271fb-336e-476d-96f6-bdba0e5f54e6)]
interface sbIMetadataHandler : nsISupports
{
  /**
   * \brief An array of metadata properties
   *
   * Metadata properties read from or to be written to the file.
   *
   * When the handler has successfully completed its read() operation, the
   * values attribute will be filled with the metadata from the url.
   */
  attribute sbIMutablePropertyArray props;

  /**
   * \brief Whether or not the object has completed its read/write operation
   *
   * This value is false until the handler completes its read/write operation.
   *
   * It is up to the implementor to determine if read/write calls should operate
   * asynchronously or by blocking.  The user of the handler should not attempt
   * to get the sbIPropertyArray object before the operation is completed.
   */
  readonly attribute PRBool completed;

  /**
   * \brief The object's nsIChannel
   *
   * The object is assigned an nsIChannel from the sbIMetadataManager after it
   * has successfully voted for an url.  In the Read call, the implementor may
   * choose to pull the url from the channel and use that directly, or open the
   * channel (either itself or using an sbIMetadataChannel as a helper) and
   * stream the data to be parsed.
   *
   * In general, for local files, it is faster to pull the url and handle the
   * metadata read immediately rather than open the channel.  For remote files,
   * it's far easier to just use the channel infrastructure already setup.
   */
  attribute nsIChannel channel;

  /**
   * \brief Vote to be the handler returned for the given url
   *
   * The sbIMetadataManager will instantiate one of every sbIMetadataHandler
   * subclass and ask it to vote on the given url.  Whichever handler returns
   * the highest vote will be used as the handler for the url.
   *
   * Values less than zero cause that handler to be ignored.
   *
   * At the moment, our handlers return -1, 0, or 1 (for "no," "maybe," and
   * "yes").
   *
   * \param aUrl The url upon which one should vote
   * \return The vote
   * \sa sbIMetadataManager
  */
  PRInt32 vote( in AString aUrl );

  /**
   * \brief Start the read operation
   *
   * After getting a handler from the sbIMetadataManager, the user code usually
   * calls read upon it, immediately.  The implementor may choose to handle the
   * request immediately or asynchronously.
   *
   * \return -1 if operating asynchronously, otherwise the number of metadata values read (0 on failure)
   */
  PRInt32 read();

  /**
   * \brief Start the write operation
   *
   * After getting a handler from the sbIMetadataManager, the user code may set
   * an sbIPropertyArray object into the handler and then call write to write
   * the abstract metadata map into the specific metadata requirements of the
   * file format supported by the handler.
   *
   * Note that the number of items written may not always equal the number of
   * items in the sbIPropertyArray object if the underlying file format does
   * not support the given keys.
   *
   * \return -1 if operating asynchronously, otherwise the number of metadata values written (0 on failure)
   */
  PRInt32 write();

  /**
   * \brief Be thou informst that one's sbIMetadataChannel has just received data
   *
   * Every time the underlying nsIChannel dumps data on the sbIMetadataChannel,
   * plus once more for when the nsIChannel reports a stop condition.
   *
   * This is a chance for the handler code to attempt to parse the datastream.
   *
   * \param aChannel The sbIMetadataChannel delivering data.  You'll have to QI for it.
   * \TODO consider removing.  sbIMetadataChannel appears to be unused.
   */
  void onChannelData( in nsISupports aChannel );

  /**
   * \brief Close down the internals of the handler, stop any asynchronous operations, free any allocations
   */
  void close();
};