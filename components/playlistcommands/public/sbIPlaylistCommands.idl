/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

#include "nsISupports.idl"

interface nsIDOMDocument;
interface nsIDOMNode;
interface nsIDOMWindow;
interface sbIPlaylistCommandsContext;
interface sbIMediaItem;
interface nsISimpleEnumerator;

/** \addtogroup playlistcommands Playlist Commands 
 * @{
 */

/**
* \interface sbIPlaylistCommands sbIPlaylistCommands.h
* \brief An interface that represents the set of command buttons and context menu items available on a displayed playlist.
*
* This interface is meant to be implemented by user code.
*
* Implementors that create their own specific database libraries and playlists
* (eg: sbIDeviceBase) may also specify a commands object to be shown when the
* tables are displayed in a <playlist> element.  This object's purpose is to
* return abstract information that can be used by the playlist element to
* autogenerate its xul button and menuitm elements.
*
* These objects ought to be created in javascript.  When a new playlist is
* created, it will query sbIPlaylistCommandsManager for command objects, and the
* playlist source will call duplicate() on the objects it has stored and
* return the newly duplicated objects.
*
* The duplicate() method should be implemented like so:
*
* \code
duplicate: function() {
  var obj = {};
  for ( var i in this )
    obj[ i ] = this[ i ];
  return obj;
},
* \endcode
* 
* \sa playlist.xml, sbLibraryPage.xul
*/
[scriptable, uuid(fdb73942-56e8-406e-a587-e7e1715d921f)]
interface sbIPlaylistCommands : nsISupports 
{
  /**
  * \brief Return the visible state for the entire command object.
  *
  * Returning false from this method removes the entire set of commands
  * from the specified host.
  *
  * \param aHost The type of object hosting the command
  * \return Whether to instantiate the commands for this host or not
  */
  PRBool getVisible( in AString aHost );
  
  /**
  * \brief Be informed when a set of commands are attached to a playlist element.
  *
  * When a playlist element is about to use an sbIPlaylistCommands instance,
  * after it has been duplicated, the element will pass a context to this method.
  * The implementor may save the context information (for instance, a reference to 
  * the playlist on which the commands are to act) for later reference and use.
  *
  * \param node The context object
  */
  void setContext( in sbIPlaylistCommandsContext aContext );

  /**
  * \brief Return the number of command elements to be displayed.
  *
  * The implementor should return the number of commands to be created
  *
  * The other functions will be called in turn with the index value that
  * represents each specific command element
  *
  * \param submenu The submenu for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The number of commands to be created
  */
  PRInt32 getNumCommands( in AString aSubMenu, in AString aHost );

  /**
  * \brief Return the type of the requested command element index
  *
  * Each command id has a type, these can be 'action', 'separator', 
  * 'value', and 'submenu'.
  *
  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The string for the command id
  */
  AString getCommandType( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the id string for the requested command element index
  *
  * Each command id should be unique within this commands object.  The
  * visual style of the command can be set in the CSS.
  *
  * Some id strings are parsed to create different objects:
  *
  * "*separator*" - Create a menuseparator or an empty box
  *
  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The string for the command id
  */
  AString getCommandId( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the human readable text for the requested command element index
  *
  * If the string begins with an "&" character, the remaining portion of the
  * string will be used as an index into the current localization's properties
  * file.
  *
  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The string for the displayed text
  */
  AString getCommandText( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the flex value for the requested command element index
  *
  * For instance, you can make your "*separator*" element have a flex of 1 and
  * then right-justify all the command buttons after it.  By default, command
  * buttons will adjust their width to the width of their human readable text.
  *
  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The value for the flex
  */
  PRInt32 getCommandFlex( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the human readable text for the requested command element's tooltip
  *
  * If the string begins with an "&" character, the remaining portion of the
  * string will be used as an index into the current localization's properties
  * file.
  *
  * \param submenu The submenu for which the data is being requested
  * \todo The tooltip functionality is disabled because mozilla will crash if you delete an element currently displaying a tooltip.
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The string for the tooltip
  */
  AString getCommandToolTipText(in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the enabled state for the requested command element index
  *
  * When the selection of the playlist changes state, or the tree is rebuilt,
  * this method will be called to allow the code to enable or disable commands
  * based upon the state of the playlist.
  *
  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return True if the command should display as enabled
  */
  PRBool getCommandEnabled(in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the visible state for the requested command element index
  *
  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return True if the command should be visible
  */
  PRBool getCommandVisible(in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the value of the flag for the requested command element index
  *
  * The requested elements are always of type 'flag'

  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The value for the flag
  */
  PRBool getCommandFlag( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the value of the requested command element index
  *
  * The requested elements are always of type 'value'
  *
  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The value for the command
  */
  AString getCommandValue( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the selected item for choice list of the requested command element index
  *
  * The requested elements are always of type 'choice'
  *
  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The id of the choice item
  */
  AString getCommandChoiceItem( in AString aChoiceMenu, in AString aHost );

  /**
  * \brief Return the shortcut modifiers of the requested command element index
  *
  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The shortcut modifiers for the command
  */
  AString getCommandShortcutModifiers( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the shortcut key of the requested command element index
  *
  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The shortcut key for the command
  */
  AString getCommandShortcutKey( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the shortcut keycode of the requested command element index
  *
  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The shortcut keycode for the command
  */
  AString getCommandShortcutKeycode( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return a boolean reflecting the local vs window-wide behavior of the shortcut
  *
  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return Whether the shortcut is local or not
  */
  PRBool getCommandShortcutLocal( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return an sbIPlaylistCommands secondary object.
  *
  * If this method returns a valid interface, all other callbacks for this
  * command item are bypassed.
  *
  * \param submenu The submenu for which the data is being requested
  * \param index The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return An sbIPlaylistCommands interface to a secondary command object
  */
  sbIPlaylistCommands getCommandSubObject( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Instantiate the custom element associated with the requested command
  *
  * \param aDocument Document in which to instantate element
  * \param aID The id of the custom command whose instantiation is being requested
  * \param aHost The command host type that made the request
  */
  nsIDOMNode instantiateCustomCommand( in nsIDOMDocument aDocument, in AString aID, in AString aHost );

  /**
  * \brief Refresh the custom element associated with the requested command
  *
  * \param aID The id of the custom command element whose refreshing is being requested
  * \param aHost The command host type that made the request
  */
  void refreshCustomCommand( in nsIDOMNode aCustomCommandElement, in AString aId, in AString aHost );

  /**
  * \brief Handle the fact that a command was activated
  *
  * When the user activates the command button or menuitem, this method will
  * be called with the event generated.
  *
  * \param event The event generated by the user's action
  * \param aHost The type of object hosting the command
  */
  void onCommand( in AString aSubMenu, in PRInt32 aIndex, in AString aHost, in AString aId, in AString value );

  /**
  * \brief Duplicate the command object
  *
  * When a command object is to be given to a playlist, the object registered
  * with sbIPlaylistCommandsManager will have this method called.  The method should be
  * implemented like this:
  *
  * \code
  duplicate: function() {
    var obj = {};
    for ( var i in this )
      obj[ i ] = this[ i ];
    return obj;
  },
  * \endcode
  *
  * It creates a new object instance and copies the methods over to it.
  *
  * \return A new copy of this object
  */
  sbIPlaylistCommands duplicate( );

  /**
  * \brief Initialization function
  *
  * When a command object is duplicated and about to be used by a command instantiator,
  * the instatiator first calls the init() method on it.
  *
  * \param aHost The instantiator's host type (menu, toolbar, ...)
  */
  void initCommands( in AString aHost );

  /**
  * \brief Shutdown function
  *
  * When a command instantiator is done with a command object, it calls its shutdown() method
  * before removing it from its internal lists.
  */
  void shutdownCommands( );
};

/**
* \interface sbIPlaylistCommandsContext sbIPlaylistCommandsContext.h
* \brief The interface for giving context to a playlistcommands object
*/
[scriptable, uuid(2d2e8802-9f28-48eb-a55e-75448f08d920)]
interface sbIPlaylistCommandsContext : nsISupports
{
  /**
  * \brief The playlist against which the commands are acting.
  */
  readonly attribute nsIDOMNode playlist;   

  /**
  * \brief The medialist against which the commands are acting.
  */
  readonly attribute sbIMediaItem medialist;

  /**
  * \brief The outer window containing the playlist against which the commands are acting.
  */
  readonly attribute nsIDOMWindow window;   

  /**
  * \brief The commands object itself.
  */
  readonly attribute sbIPlaylistCommands commands;   
};

/**
* \interface sbIPlaylistCommandsManager sbIPlaylistCommandsManager.h
* \brief The service used to register, unregister, and list playlist
*  commands for a particular playlist guid or type
*/
[scriptable, uuid(2ca0eb0c-ab36-4a5a-b63e-dd34ca54f9da)]
interface sbIPlaylistCommandsManager : nsISupports
{
 /**
  * \brief Register sbIPlaylistCommands objects to be shown for specific playlists in
  * order to let the user perform actions on a playlist's items.
  *
  * The sbIPlaylistCommands interface is used to algorithmically define a set
  * of commands to be rendered arbitrarily by a playlist ui object (currently,
  * playlist.xml).
  *
  * Commands can be registered for a spcific playlist, or for any "type" characteristic.
  *
  * \param aContextGUID The guid string for the database to register against
  * \param aPlaylistType The arbitrary type string to register against
  * \param aCommandObj The command object instance to be used for these playlists
  * \sa sbIPlaylistCommands, unregisterPlaylistCommands, playlist.xml
  * \sa http://publicsvn.songbirdnest.com/browser/extensions/commandsexample/chrome/content/scripts/CommandsExample.js#L154
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L627
  */
  void registerPlaylistCommandsMediaItem( in AString aContextGUID, in AString aPlaylistType, in sbIPlaylistCommands aCommandObj );
  
  /**
  * \brief Unregister a sbIPlaylistCommands object that was previously registered to registerPlaylistCommandsMediaItem
  *
  * \param aContextGUID The guid that was used to register the sbIPlaylistCommand
  * \param aPlaylistType The type string that was used to register the sbIPlaylistCommand
  * \param aCommandObj The command object that was registered
  * \sa sbIPlaylistCommands, registerPlaylistCommands, playlist.xml
  * \sa http://publicsvn.songbirdnest.com/browser/extensions/commandsexample/chrome/content/scripts/CommandsExample.js#L194
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L736
  */
  void unregisterPlaylistCommandsMediaItem( in AString aContextGUID, in AString aPlaylistType, in sbIPlaylistCommands aCommandObj );
  
  /**
  * \brief Retrieve the list of sbIPlaylistCommands objects registered to a specific playlist
  *
  * Given the guid, table, and type strings, returns a list of duplicate instances of
  * the corresponding sbIPlaylistCommands objects.
  *
  * The "type" string has precedence over the "guid"/"table" pair.
  *
  * This method is only called by the playlist UI object, in playlist.xml
  *
  * \param aContextGUID The guid string for the playlist
  * \param aPlaylistType The type of the playlist
  * \return A simple enumerator of newly duplicated command object instances to be used for this playlist
  * \sa sbIPlaylistCommands, playlist.xml
  */
  nsISimpleEnumerator getPlaylistCommandsMediaItem( in AString aContextGUID, in AString aPlaylistType );

 /**
  * \brief Register sbIPlaylistCommands objects to be shown for specific playlists in
  * order to let the user perform actions on the playlist itself.
  *
  * The sbIPlaylistCommands interface is used to algorithmically define a set
  * of commands to be rendered arbitrarily by a service tree ui object (currently,
  * servicePane.xml).
  *
  * Commands can be registered for a spcific playlist, or for any "type" characteristic.
  *
  * \param aContextGUID The guid string for the database to register against
  * \param aPlaylistType The arbitrary type string to register against
  * \param aCommandObj The command object instance to be used for these playlists
  * \sa sbIPlaylistCommands, unregisterPlaylistCommands, playlist.xml
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L681
  */
  void registerPlaylistCommandsMediaList( in AString aContextGUID, in AString aPlaylistType, in sbIPlaylistCommands aCommandObj );
  
  /**
  * \brief Unregister a sbIPlaylistCommands object that was previously registered to registerPlaylistCommandsMediaList
  *
  * \param aContextGUID The guid that was used to register the sbIPlaylistCommand
  * \param aPlaylistType The type string that was used to register the sbIPlaylistCommand
  * \param aCommandObj The command object that was registered
  * \sa sbIPlaylistCommands, registerPlaylistCommands, playlist.xml
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L741
  */
  void unregisterPlaylistCommandsMediaList( in AString aContextGUID, in AString aPlaylistType, in sbIPlaylistCommands aCommandObj );
  
  /**
  * \brief Retrieve the list of sbIPlaylistCommands objects to be used for a specific playlist
  *
  * Given the guid, table, and type strings, returns a list of duplicate instances of
  * the corresponding sbIPlaylistCommands objects.
  *
  * The "type" string has precedence over the "guid"/"table" pair.
  *
  * This method is only called by the playlist UI object, in playlist.xml
  *
  * \param aContextGUID The guid string for the playlist
  * \param aPlaylistType The type of the playlist
  * \return A simple enumerator of newly duplicated command object instances to be used for this playlist
  * \sa sbIPlaylistCommands, playlist.xml
  */
  nsISimpleEnumerator getPlaylistCommandsMediaList( in AString aContextGUID, in AString aPlaylistType );

  /**
  * \brief Publish an sbIPlaylistCommands interface for public consumption
  *
  * An sbIPlaylistCommands interface may be published so that third party code
  * may reuse them in their own command sets.
  *
  * \param aCommandGUID The GUID identifying this command interface
  * \param aCommandObj The interface to publish
  * \sa request, withdraw, kPlaylistCommands.jsm, sbIPlaylistCommands
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L539
  */
  void publish( in AString aCommandGUID, in sbIPlaylistCommands aCommandObj );

  /**
  * \brief Withdraw a previously published sbIPlaylistCommands interface
  *
  * Note that the original interface must be passed to this function for the
  * call to succeed. Since calling request() returns a copy of the interface
  * rather than the original interface itself, it means that you cannot withdraw 
  * someone else's interface unless you have access to it directly.
  *
  * \param aCommandGUID The GUID identifying this command interface
  * \param aCommandObj The interface to withdraw
  * \sa publish, request, kPlaylistCommands.jsm, sbIPlaylistCommands
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L694
  */
  void withdraw( in AString aCommandGUID, in sbIPlaylistCommands aCommandObj );

  /**
  * \brief Request a copy of a published sbIPlaylistCommands interface
  *
  * \param aCommandGUID The GUID identifying this command interface
  * \return A copy of the requested interface, or null if that interface is not
  * in the manager's repository.
  * \sa publish, withdraw, kPlaylistCommands.jsm, sbIPlaylistCommands
  * \sa http://publicsvn.songbirdnest.com/browser/extensions/commandsexample/chrome/content/scripts/CommandsExample.js#L130
  */
  sbIPlaylistCommands request( in AString aContextGUID );
};

/*! @} */ // end of playlistcommands group

