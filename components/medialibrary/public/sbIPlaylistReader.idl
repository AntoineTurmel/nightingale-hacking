/*
 //
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

/**
 * \file sbIPlaylistReader.idl
 * \brief 
 * 
 * \sa sbIPlaylist.idl
 */

#include "nsISupports.idl"

#include "nsIArray.idl"
#include "nsIWebProgressListener.idl"

interface nsIObserver;

/**
 * \interface sbIMediaLibrary 
 * \brief
 *
 * \sa sbIPlaylistReaderManager, sbIPlaylistReader, sbIPlaylist, sbIPlaylistManager
 */
[scriptable, uuid(5770099E-503B-4b76-B1A6-0BC53F53D2BF)]
interface sbIPlaylistReaderListener : nsIWebProgressListener
{
  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  attribute AString originalURL;

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  attribute AString serviceGuid;

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  attribute AString destinationURL;

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  attribute AString destinationTable;

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  attribute AString readableName;

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  attribute AString playlistType;

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  attribute AString description;

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  attribute PRBool  appendOrReplace;

  /**
   * \brief Automatically start playing when stream is done loading.
   *
   * False by default.
   */
  attribute PRBool  playWhenLoaded;

  /**
   * \brief Observer to get notified about the failure or success of creating a playlist.
   *
   */
  attribute nsIObserver observer;

  /**
   * \brief Only create playlists for media mime-types ( audio* or video* ), not text/html
   */
  attribute PRBool mediaMimetypesOnly;

  /**
   * \brief expose the state of the web downloading (currently only set to "" or STATE_STOP)
   */
  attribute ASTring state;
};

/**
 * \interface sbIPlaylistReader 
 * \brief
 *
 * \sa sbIPlaylistReaderManager, sbIPlaylistReaderListener, sbIPlaylistManager, sbIPlaylist
 */
[scriptable, uuid(43005B48-8138-424d-AA12-FE604BA3A3E8)]
interface sbIPlaylistReader : nsISupports
{
  /**
   * \brief 
   *
   * \param 
   * \sa read
   */
  attribute AString originalURL;

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  PRBool read(in AString aURL, 
    in AString aGUID, 
    in AString aDestTable, 
    in PRBool aReplace, 
    out PRInt32 aErrorCode);

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  PRInt32 vote(in AString aURL);

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  AString name();

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  AString description();
  
  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  void supportedMIMETypes(out PRUint32 aMIMECount, 
    [array, size_is (aMIMECount), retval] out wstring aMIMETypes);

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  void supportedFileExtensions(out PRUint32 aExtCount, 
    [array, size_is (aExtCount), retval] out wstring aExts);
};

/**
 * \interface sbIPlaylistReaderManager 
 * \brief
 *
 * \sa sbIPlaylistReader, sbIPlaylistReaderListener
 */
[scriptable, uuid(18032AD6-CB1F-403d-B3F5-7FE8EB579C28)]
interface sbIPlaylistReaderManager : nsISupports
{
  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  attribute AString originalURL;

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  PRInt32 autoLoad(in AString aURL, 
    in AString aGUID, 
    in AString aReadableName, 
    in AString aPlaylistType, 
    in AString aDescription, 
    in AString aContentType, 
    in sbIPlaylistReaderListener aPlaylistReaderListener);
  
  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  PRInt32 loadPlaylist(in AString aURL, 
    in AString aGUID, 
    in AString aUniqueName, 
    in AString aReadableName, 
    in AString aPlaylistType, 
    in AString aDescription, 
    in AString aContentType, 
    in PRBool aAppendOrReplace, 
    in sbIPlaylistReaderListener aPlaylistReaderListener);

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  PRInt32 read(in AString aFile, 
    in AString aGUID, 
    in AString aName, 
    in AString aReadableName, 
    in AString aContentType, 
    in PRBool aAppendOrReplace);

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  void supportedMIMETypes(out PRUint32 aMIMECount, 
    [array, size_is (aMIMECount), retval] out wstring aMIMETypes);

  /**
   * \brief 
   *
   * \param 
   * \sa sbIDatabaseQuery
   */
  void supportedFileExtensions(out PRUint32 aExtCount, 
    [array, size_is (aExtCount), retval] out wstring aExts);
};

