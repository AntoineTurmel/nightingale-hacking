/*
 //
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2006 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the “GPL”).
// 
// Software distributed under the License is distributed 
// on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

#include "nsISupports.idl"

interface sbIDatabaseQuery;

[scriptable, uuid(7B2945F6-6A00-4489-AD2F-95BA25F4D1EA)]
interface sbISimplePlaylist : nsISupports
{
  void SetQueryObject(in sbIDatabaseQuery queryObj);
  sbIDatabaseQuery GetQueryObject();

  void AddByURL(in wstring strURL, in PRUint32 nColumnCount, [array, size_is(nColumnCount)] in wstring aColumns,
    in PRUint32 nValueCount, [array, size_is(nValueCount)] in wstring aValues, in PRBool bWillRunLater);

  PRBool RemoveByURL(in wstring strURL, in PRBool bWillRunLater);
  PRBool RemoveByIndex(in PRInt32 nIndex, in PRBool bWillRunLater);
  PRBool RemoveByGUID(in wstring mediaGUID, in PRBool bWillRunLater);

  PRInt32 FindByURL(in wstring strURL);
  wstring FindByIndex(in PRInt32 nIndex);

  void GetColumnInfo();
  void SetColumnInfo(in wstring strColumn, in wstring strReadableName, in PRBool isVisible, 
    in PRBool defaultVisibility, in PRBool isMetadata, in PRInt32 sortWeight,
    in PRInt32 colWidth, in PRBool bWillRunLater);

  void GetTableInfo();
  
  void AddColumn(in wstring strColumn, in wstring strDataType);
  void DeleteColumn(in wstring strColumn);

  PRInt32 GetNumEntries();
  PRInt32 GetEntry(in PRInt32 nEntry);

  PRInt32 GetAllEntries();

  wstring GetColumnValueByIndex(in PRInt32 mediaIndex, in wstring strColumn);
  wstring GetColumnValueByURL(in wstring mediaURL, in wstring strColumn);

  void GetColumnValuesByIndex(in PRInt32 mediaIndex, in PRUint32 nColumnCount, [array, size_is(nColumnCount)] in wstring aColumns,
    out PRUint32 nValueCount, [array, size_is(nValueCount), retval] out wstring aValues);
  void GetColumnValuesByURL(in wstring mediaURL, in PRUint32 nColumnCount, [array, size_is(nColumnCount)] in wstring aColumns,
    out PRUint32 nValueCount, [array, size_is(nValueCount), retval] out wstring aValues);
  
  void SetColumnValueByIndex(in PRInt32 mediaIndex, in wstring strColumn, in wstring strValue, in PRBool bWillRunLater);
  void SetColumnValueByURL(in wstring mediaURL, in wstring strColumn, in wstring strValue, in PRBool bWillRunLater);

  void SetColumnValuesByIndex(in PRInt32 mediaIndex, in PRUint32 nColumnCount, [array, size_is(nColumnCount)] in wstring aColumns,
    in PRUint32 nValueCount, [array, size_is(nValueCount)] in wstring aValues, in PRBool bWillRunLater);
  void SetColumnValuesByURL(in wstring mediaURL, in PRUint32 nColumnCount, [array, size_is(nColumnCount)] in wstring aColumns,
    in PRUint32 nValueCount, [array, size_is(nValueCount)] in wstring aValues, in PRBool bWillRunLater);

  void SetName(in wstring strName);
  wstring GetName();

  void SetReadableName(in wstring strReadableName);
  wstring GetReadableName();
};

[scriptable, uuid(C2B560D7-A145-4dd3-9040-F1682F17BCA6)]
interface sbIPlaylist : nsISupports
{
  void SetQueryObject(in sbIDatabaseQuery queryObj);
  sbIDatabaseQuery GetQueryObject();

  PRBool AddByGUID(in wstring mediaGUID, in wstring serviceGUID, in PRInt32 nPosition, in PRBool bReplace, in PRBool bWillRunLater);
  PRBool RemoveByGUID(in wstring mediaGUID);
  PRBool RemoveByIndex(in PRInt32 mediaIndex);
  PRBool MoveByGUID(in wstring mediaGUID, in PRInt32 nPosition);
  PRBool MoveByIndex(in PRInt32 mediaIndex, in PRInt32 nPosition);
  
  PRInt32 FindByGUID(in wstring mediaGUID);
  wstring FindByIndex(in PRInt32 mediaIndex);

  void GetColumnInfo();
  void SetColumnInfo(in wstring strColumn, in wstring strReadableName, in PRBool isVisible, 
    in PRBool defaultVisibility, in PRBool isMetadata, in PRInt32 sortWeight,
    in PRInt32 colWidth, in PRBool bWillRunLater);

  void GetTableInfo();
  
  void AddColumn(in wstring strColumn);
  void DeleteColumn(in wstring strColumn);

  PRInt32 GetNumEntries();
  PRInt32 GetEntry(in PRInt32 nEntry);

  PRInt32 GetAllEntries();

  wstring GetColumnValueByIndex(in PRInt32 mediaIndex, in wstring strColumn);
  wstring GetColumnValueByGUID(in wstring mediaGUID, in wstring strColumn);

  void GetColumnValuesByIndex(in PRInt32 mediaIndex, in PRUint32 nColumnCount, [array, size_is(nColumnCount)] in wstring aColumns,
    out PRUint32 nValueCount, [array, size_is(nValueCount), retval] out wstring aValues);
  void GetColumnValuesByGUID(in wstring mediaGUID, in PRUint32 nColumnCount, [array, size_is(nColumnCount)] in wstring aColumns,
    out PRUint32 nValueCount, [array, size_is(nValueCount), retval] out wstring aValues);
  
  void SetColumnValueByIndex(in PRInt32 mediaIndex, in wstring strColumn, in wstring strValue);
  void SetColumnValueByGUID(in wstring mediaGUID, in wstring strColumn, in wstring strValue);

  void SetColumnValuesByIndex(in PRInt32 mediaIndex, in PRUint32 nColumnCount, [array, size_is(nColumnCount)] in wstring aColumns,
    in PRUint32 nValueCount, [array, size_is(nValueCount)] in wstring aValues);
  void SetColumnValuesByGUID(in wstring mediaGUID, in PRUint32 nColumnCount, [array, size_is(nColumnCount)] in wstring aColumns,
    in PRUint32 nValueCount, [array, size_is(nValueCount)] in wstring aValues);

  void SetName(in wstring strName);
  wstring GetName();

  void SetReadableName(in wstring strReadableName);
  wstring GetReadableName();
};

[scriptable, uuid(8A1A3D68-E3A4-484b-B9A5-4088ADEDA5B3)]
interface sbIDynamicPlaylist : sbIPlaylist
{
  void SetPeriodicity(in PRUint32 nPeriodicity, in PRBool bWillRunLater);
  PRUint32 GetPeriodicity();
  
  void SetURL(in wstring strURL, in PRBool bWillRunLater);
  wstring GetURL();

  void SetLastUpdateTime();
  PRInt64 GetLastUpdateTime();
};

[scriptable, uuid(07BC8B9F-FB08-4fd6-92A4-9D5CDFE2D823)]
interface sbISmartPlaylist : sbIPlaylist
{
  void SetLibrary(in wstring strLibrary, in PRBool bWillRunLater);
  wstring GetLibrary();

  void SetLimitAndType(in PRUint32 nLimit, in wstring strLimitType, in PRBool bWillRunLater);
  PRUint32 GetLimit();
  wstring GetLimitType();
  void GetLimitAndType(out PRUint32 nLimit, out wstring strLimitType);

  void SetSelectedBy(in wstring strSelectedBy);
  wstring GetSelectedBy();

  void SetMatch(in wstring strMatchOn);
  wstring GetMatch();

  void AddConstraint(in wstring strMetadata, in wstring strConstraint, in wstring strConstraintValue, in PRBool bWillRunLater);
  PRUint32 GetConstraintCount();
  PRUint32 GetAllConstraints();
  PRBool GetConstraint(in PRUint32 nIndex);
  void ReplaceConstraint(in PRUint32 nIndex, in wstring strMetadata, in wstring strConstraint, in wstring strConstraintValue, in PRBool bWillRunLater);
  void RemoveConstraint(in PRUint32 nIndex, in PRBool bWillRunLater);
  void RemoveAllConstraints(in PRBool bWillRunLater);

  //Don't use SetQuery unless you want to build a custom query that's not doable from the
  //SmartPlaylist query builder!
  void SetQuery(in wstring strQuery, in PRBool bWillRunLater);

  //Get the SQL Query representation of the SmartPlaylist.
  wstring GetQuery();

  PRBool RebuildPlaylist();
};

[scriptable, uuid(0BE3A41A-6673-494a-A53E-9740A98ACFF7)]
interface sbIPlaylistManager : nsISupports
{
  void CreateDefaultPlaylistManager(in sbIDatabaseQuery queryObj);

  sbISimplePlaylist CreateSimplePlaylist(in wstring strName, in wstring strReadableName, in wstring strDescription, in wstring strType, 
    in PRUint32 nColumnCount, [array, size_is(nColumnCount)] in wstring aColumns, in sbIDatabaseQuery queryObj);

  sbIPlaylist CreatePlaylist(in wstring strName, in wstring strReadableName, in wstring strDescription, in wstring strType, in sbIDatabaseQuery queryObj);

  sbIDynamicPlaylist CreateDynamicPlaylist(in wstring strName, in wstring strReadableName, in wstring strDescription, in wstring strType, in wstring strURL, in PRUint32 nPeriodicity, in sbIDatabaseQuery queryObj);
  sbISmartPlaylist CreateSmartPlaylist(in wstring strName, in wstring strReadableName, in wstring strDescription, 
                                       in wstring strType, in wstring strLibrary, in PRUint32 nLimit, in wstring strLimitType, 
                                       in wstring strSelectedBy, in wstring strMatchOn, in sbIDatabaseQuery queryObj);

  sbIPlaylist CopyPlaylist(in wstring strSourceDB, in wstring strSourceName, in wstring strDestDB, in wstring strDestName, 
    in wstring strReadableName, in wstring strDescription, in wstring strType, in sbIDatabaseQuery queryObj);

  sbISimplePlaylist CopySimplePlaylist(in wstring strSourceDB, in wstring strSourceName, in wstring strSourceFilterColumn, 
    in PRUint32 nSourceFilterValueCount, [array, size_is(nSourceFilterValueCount)] in wstring aSourceFilterValues, in wstring strDestDB, in wstring strDestName, 
    in wstring strReadableName, in wstring strDescription, in wstring strType, in sbIDatabaseQuery queryObj);

  PRInt32 DeleteSimplePlaylist(in wstring strName, in sbIDatabaseQuery queryObj);
  PRInt32 DeletePlaylist(in wstring strName, in sbIDatabaseQuery queryObj);
  PRInt32 DeleteDynamicPlaylist(in wstring strName, in sbIDatabaseQuery queryObj);
  PRInt32 DeleteSmartPlaylist(in wstring strName, in sbIDatabaseQuery queryObj);
  
  void GetAllPlaylistList(in sbIDatabaseQuery queryObj);
  
  void GetSimplePlaylistList(in sbIDatabaseQuery queryObj);
  void GetPlaylistList(in sbIDatabaseQuery queryObj);
  void GetDynamicPlaylistList(in sbIDatabaseQuery queryObj);
  void GetSmartPlaylistList(in sbIDatabaseQuery queryObj);
  
  sbISimplePlaylist GetSimplePlaylist(in wstring strName, in sbIDatabaseQuery queryObj);
  sbIPlaylist GetPlaylist(in wstring strName, in sbIDatabaseQuery queryObj);
  sbIDynamicPlaylist GetDynamicPlaylist(in wstring strName, in sbIDatabaseQuery queryObj);
  sbISmartPlaylist GetSmartPlaylist(in wstring strName, in sbIDatabaseQuery queryObj);

  PRUint32 GetDynamicPlaylistsForUpdate(in sbIDatabaseQuery queryObj);
  PRBool SetDynamicPlaylistLastUpdate(in wstring strName, in sbIDatabaseQuery queryObj);

  void PurgeTrackByGUIDFromPlaylists(in wstring mediaGUID, in wstring strDBGUID);
};
