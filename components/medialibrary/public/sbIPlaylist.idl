/*
 //
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

#include "nsISupports.idl"

interface sbIDatabaseQuery;

[scriptable, uuid(7B2945F6-6A00-4489-AD2F-95BA25F4D1EA)]
interface sbISimplePlaylist : nsISupports
{
  void setQueryObject(in sbIDatabaseQuery queryObj);

  sbIDatabaseQuery getQueryObject();

  void addByURL(in AString strURL, 
    in PRUint32 nColumnCount, 
    [array, size_is(nColumnCount)] in wstring aColumns,
    in PRUint32 nValueCount, 
    [array, size_is(nValueCount)] in wstring aValues, 
    in PRBool bWillRunLater);

  PRBool removeByURL(in AString strURL, 
    in PRBool bWillRunLater);

  PRBool removeByIndex(in PRInt32 nIndex, 
    in PRBool bWillRunLater);

  PRBool removeByGUID(in AString mediaGUID, 
    in PRBool bWillRunLater);

  PRInt32 findByURL(in AString strURL);

  AString findByIndex(in PRInt32 nIndex);

  void getColumnInfo();

  void setColumnInfo(in AString columnName, 
    in AString columnReadableName, 
    in PRBool isColumnEverVisible, 
    in PRBool isColumnVisibleByDefault, 
    in PRBool isMetadataColumn, 
    in PRInt32 columnSortWeight,
    in PRInt32 columnDefaultUIWidth,
    in AString columnDataType,
    in PRBool isColumnReadOnly,
    in PRBool willRunQueryLater);

  void getTableInfo();
  
  void addColumn(in AString strColumn, 
    in AString strDataType);

  void deleteColumn(in AString strColumn);

  PRInt32 getNumEntries();

  PRInt32 getEntry(in PRInt32 nEntry);

  PRInt32 getAllEntries();

  AString getColumnValueByIndex(in PRInt32 mediaIndex, 
    in AString strColumn);

  AString getColumnValueByURL(in AString mediaURL, 
    in AString strColumn);

  void getColumnValuesByIndex(in PRInt32 mediaIndex, 
    in PRUint32 nColumnCount, 
    [array, size_is(nColumnCount)] in wstring aColumns,
    out PRUint32 nValueCount, 
    [array, size_is(nValueCount), retval] out wstring aValues);

  void getColumnValuesByURL(in AString mediaURL, 
    in PRUint32 nColumnCount, 
    [array, size_is(nColumnCount)] in wstring aColumns,
    out PRUint32 nValueCount, 
    [array, size_is(nValueCount), retval] out wstring aValues);
  
  void setColumnValueByIndex(in PRInt32 mediaIndex, 
    in AString strColumn, 
    in AString strValue, 
    in PRBool bWillRunLater);

  void setColumnValueByURL(in AString mediaURL, 
    in AString strColumn, 
    in AString strValue, 
    in PRBool bWillRunLater);

  void setColumnValuesByIndex(in PRInt32 mediaIndex, 
    in PRUint32 nColumnCount, 
    [array, size_is(nColumnCount)] in wstring aColumns,
    in PRUint32 nValueCount, 
    [array, size_is(nValueCount)] in wstring aValues, 
    in PRBool bWillRunLater);

  void setColumnValuesByURL(in AString mediaURL, 
    in PRUint32 nColumnCount, 
    [array, size_is(nColumnCount)] in wstring aColumns,
    in PRUint32 nValueCount, 
    [array, size_is(nValueCount)] in wstring aValues, 
    in PRBool bWillRunLater);

  void setName(in AString strName);

  AString getName();

  void setReadableName(in AString strReadableName);

  AString getReadableName();
};

[scriptable, uuid(C2B560D7-A145-4dd3-9040-F1682F17BCA6)]
interface sbIPlaylist : nsISupports
{
  void setQueryObject(in sbIDatabaseQuery queryObj);

  sbIDatabaseQuery getQueryObject();

  PRBool addByGUID(in AString mediaGUID, 
    in AString serviceGUID, 
    in PRInt32 nPosition, 
    in PRBool bReplace, 
    in PRBool bWillRunLater);

  PRBool removeByGUID(in AString mediaGUID);

  PRBool removeByIndex(in PRInt32 mediaIndex);

  PRBool moveByGUID(in AString mediaGUID, 
    in PRInt32 nPosition);

  PRBool moveByIndex(in PRInt32 mediaIndex, 
    in PRInt32 nPosition);
  
  PRInt32 findByGUID(in AString mediaGUID);

  AString findByIndex(in PRInt32 mediaIndex);

  void getColumnInfo();

  void setColumnInfo(in AString columnName, 
    in AString columnReadableName, 
    in PRBool isColumnEverVisible, 
    in PRBool isColumnVisibleByDefault, 
    in PRBool isMetadataColumn, 
    in PRInt32 columnSortWeight,
    in PRInt32 columnDefaultUIWidth,
    in AString columnDataType,
    in PRBool isColumnReadOnly,
    in PRBool willRunQueryLater);

  void getTableInfo();
  
  void addColumn(in AString strColumn);

  void deleteColumn(in AString strColumn);

  PRInt32 getNumEntries();

  PRInt32 getEntry(in PRInt32 nEntry);

  PRInt32 getAllEntries();

  AString getColumnValueByIndex(in PRInt32 mediaIndex, 
    in AString strColumn);

  AString getColumnValueByGUID(in AString mediaGUID, 
    in AString strColumn);

  void getColumnValuesByIndex(in PRInt32 mediaIndex, 
    in PRUint32 nColumnCount, 
    [array, size_is(nColumnCount)] in wstring aColumns,
    out PRUint32 nValueCount, 
    [array, size_is(nValueCount), retval] out wstring aValues);

  void getColumnValuesByGUID(in AString mediaGUID, 
    in PRUint32 nColumnCount, 
    [array, size_is(nColumnCount)] in wstring aColumns,
    out PRUint32 nValueCount, 
    [array, size_is(nValueCount), retval] out wstring aValues);
  
  void setColumnValueByIndex(in PRInt32 mediaIndex, 
    in AString strColumn, 
    in AString strValue);

  void setColumnValueByGUID(in AString mediaGUID, 
    in AString strColumn, 
    in AString strValue);

  void setColumnValuesByIndex(in PRInt32 mediaIndex, 
    in PRUint32 nColumnCount, 
    [array, size_is(nColumnCount)] in wstring aColumns,
    in PRUint32 nValueCount, 
    [array, size_is(nValueCount)] in wstring aValues);

  void setColumnValuesByGUID(in AString mediaGUID, 
    in PRUint32 nColumnCount, 
    [array, size_is(nColumnCount)] in wstring aColumns,
    in PRUint32 nValueCount, 
    [array, size_is(nValueCount)] in wstring aValues);

  void setName(in AString strName);

  AString getName();

  void setReadableName(in AString strReadableName);

  AString getReadableName();

  void setDescription(in AString strDescription);

  AString getDescription();

  void setType(in AString strType);

  AString getType();
};

[scriptable, uuid(8A1A3D68-E3A4-484b-B9A5-4088ADEDA5B3)]
interface sbIDynamicPlaylist : sbIPlaylist
{
  void setPeriodicity(in PRUint32 nPeriodicity, 
    in PRBool bWillRunLater);

  PRUint32 getPeriodicity();
  
  void setURL(in AString strURL, 
    in PRBool bWillRunLater);
  AString getURL();

  void setLastUpdateTime();

  PRInt64 getLastUpdateTime();
};

[scriptable, uuid(07BC8B9F-FB08-4fd6-92A4-9D5CDFE2D823)]
interface sbISmartPlaylist : sbIPlaylist
{
  void setLibrary(in AString strLibrary, 
    in PRBool bWillRunLater);

  AString getLibrary();

  void setLimitAndType(in PRUint32 nLimit, 
    in AString strLimitType, 
    in PRBool bWillRunLater);

  PRUint32 getLimit();

  AString getLimitType();

  void getLimitAndType(out PRUint32 nLimit, 
    out AString strLimitType);

  void setSelectedBy(in AString strSelectedBy);
  
  AString getSelectedBy();

  void setMatch(in AString strMatchOn);

  AString getMatch();

  void addConstraint(in AString strMetadata, 
    in AString strConstraint, 
    in AString strConstraintValue, 
    in PRBool bWillRunLater);

  PRUint32 getConstraintCount();

  PRUint32 getAllConstraints();

  PRBool getConstraint(in PRUint32 nIndex);

  void replaceConstraint(in PRUint32 nIndex, 
    in AString strMetadata, 
    in AString strConstraint, 
    in AString strConstraintValue, 
    in PRBool bWillRunLater);

  void removeConstraint(in PRUint32 nIndex, 
    in PRBool bWillRunLater);

  void removeAllConstraints(in PRBool bWillRunLater);

  //Don't use SetQuery unless you want to build a custom query that's not doable from the
  //SmartPlaylist query builder!
  void setQuery(in AString strQuery, 
    in PRBool bWillRunLater);

  //Get the SQL Query representation of the SmartPlaylist.
  AString getQuery();

  PRBool rebuildPlaylist();
};
/*
[scriptable, uuid(0BE3A41A-6673-494a-A53E-9740A98ACFF7)]
interface sbIPlaylistManager : nsISupports
{
  void createDefaultPlaylistManager(in sbIDatabaseQuery queryObj);

  sbISimplePlaylist createSimplePlaylist(in AString strName, 
    in AString strReadableName, 
    in AString strDescription, 
    in AString strType, 
    in PRUint32 nColumnCount, 
    [array, size_is(nColumnCount)] in wstring aColumns, 
    in sbIDatabaseQuery queryObj);

  sbIPlaylist createPlaylist(in AString strName, 
    in AString strReadableName, 
    in AString strDescription, 
    in AString strType, 
    in sbIDatabaseQuery queryObj);

  sbIDynamicPlaylist createDynamicPlaylist(in AString strName, 
    in AString strReadableName, 
    in AString strDescription, 
    in AString strType, 
    in AString strURL, 
    in PRUint32 nPeriodicity, 
    in sbIDatabaseQuery queryObj);

  sbISmartPlaylist createSmartPlaylist(in AString strName, 
    in AString strReadableName, 
    in AString strDescription, 
    in AString strType, 
    in AString strLibrary, 
    in PRUint32 nLimit, 
    in AString strLimitType, 
    in AString strSelectedBy, 
    in AString strMatchOn, 
    in sbIDatabaseQuery queryObj);

  sbIPlaylist copyPlaylist(in AString strSourceDB, 
    in AString strSourceName, 
    in AString strDestDB, 
    in AString strDestName, 
    in AString strReadableName, 
    in AString strDescription, 
    in AString strType, 
    in sbIDatabaseQuery queryObj);

  sbISimplePlaylist copySimplePlaylist(in AString strSourceDB, 
    in AString strSourceName, 
    in AString strSourceFilterColumn, 
    in PRUint32 nSourceFilterValueCount, 
    [array, size_is(nSourceFilterValueCount)] in wstring aSourceFilterValues, 
    in AString strDestDB, 
    in AString strDestName, 
    in AString strReadableName, 
    in AString strDescription, 
    in AString strType, 
    in sbIDatabaseQuery queryObj);

  PRInt32 deleteSimplePlaylist(in AString strName, 
    in sbIDatabaseQuery queryObj);

  PRInt32 deletePlaylist(in AString strName, 
    in sbIDatabaseQuery queryObj);

  PRInt32 deleteDynamicPlaylist(in AString strName, 
    in sbIDatabaseQuery queryObj);

  PRInt32 deleteSmartPlaylist(in AString strName,
    in sbIDatabaseQuery queryObj);
  
  void getAllPlaylistList(in sbIDatabaseQuery queryObj);
  
  void getSimplePlaylistList(in sbIDatabaseQuery queryObj);

  void getPlaylistList(in sbIDatabaseQuery queryObj);

  void getDynamicPlaylistList(in sbIDatabaseQuery queryObj);

  void getSmartPlaylistList(in sbIDatabaseQuery queryObj);
  
  sbISimplePlaylist getSimplePlaylist(in AString strName, 
    in sbIDatabaseQuery queryObj);

  sbIPlaylist getPlaylist(in AString strName, 
    in sbIDatabaseQuery queryObj);

  sbIDynamicPlaylist getDynamicPlaylist(in AString strName, 
    in sbIDatabaseQuery queryObj);

  sbISmartPlaylist getSmartPlaylist(in AString strName, 
    in sbIDatabaseQuery queryObj);

  PRUint32 getDynamicPlaylistsForUpdate(in sbIDatabaseQuery queryObj);
  
  PRBool setDynamicPlaylistLastUpdate(in AString strName, 
    in sbIDatabaseQuery queryObj);

  void purgeTrackByGUIDFromPlaylists(in AString mediaGUID, 
    in AString strDBGUID);
};
*/