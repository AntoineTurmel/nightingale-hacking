/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbIFeathersManager.idl
 * \brief Interfaces for the Feathers Manager, which coordinates the loading 
 *        of feathers (combination of skin and XUL window layout)
 */

#include "nsISupports.idl"

interface nsISimpleEnumerator;
interface sbILayoutDescription;
interface sbISkinDescription;

interface sbIFeathersManagerListener;


/**
* \interface sbIFeathersManager
* \brief Controls the appearance of the application
*
* Acts as a registry for installed skins and alternate XUL windows,
* and provides a mechanism for switching between them.
*
* \sa sbISkinDescription, sbILayoutDescription, sbIFeathersChangeListener
*/
[scriptable, uuid(99f24350-a67f-11db-befa-0800200c9a66)]
interface sbIFeathersManager : nsISupports
{
  /**
   * \brief URL for the active layout
   */
  readonly attribute AString currentLayoutURL;
  
  /**
   * \brief Skin internalName string for the active skin
   */
  readonly attribute AString currentSkinName;


  /**
   * \brief Enumerator for all registered sbISkinDescription objects
   */
  nsISimpleEnumerator getSkinDescriptions();


  /**
   * \brief Number of registered skins
   */
  readonly attribute unsigned long skinCount;


  /**
   * \brief Enumerator for all registered sbILayoutDescription objects
   */
  nsISimpleEnumerator getLayoutDescriptions();


  /**
   * \brief Number of registered XUL windows
   */
  readonly attribute unsigned long layoutCount;



  /**
   * \brief Make the given skin available for use
   *   
   * Register the the given skin description.
   * Note that any existing registration with the same
   * skin provider name will be overwritten.
   *
   * \param aSkin Skin description
   */
  void registerSkin(in sbISkinDescription aSkin);
  
  /**
   * \brief Disable the given skin
   * \param aSkin Skin description
   */
  void unregisterSkin(in sbISkinDescription aSkin);

  /**
   * \brief Gets the full skin description associated with a skin identifier
   *
   * \param aInternalName Skin identifier (provider)
   * \return Skin description
   */
  sbISkinDescription getSkinDescription(in AString aInternalName);



  /**
   * \brief Make the given XUL window available for use
   *
   * Register the the given layout description.
   * Note that any existing registration with the same
   * URL will be overwritten.
   *
   * \param aLayout Window description
   */
  void registerLayout(in sbILayoutDescription aLayout);

  /**
   * \brief Disable the given window
   * \param aLayout Window description
   */    
  void unregisterLayout(in sbILayoutDescription aLayout);

  /**
   * \brief Gets the full layout description associated with a layout URL
   *
   * \param aLayoutURL Unique identifier
   * \return Layout description
   */
  sbILayoutDescription getLayoutDescription(in AString aLayoutURL);



  /**
   * \brief Assert compatibility of a skin-layout pair
   *
   * Indicate that layoutURL and internalName can be active at the same time, 
   * and whether the window chrome (titlebar, borders) should be shown.
   *
   * Note that the given skin and xul window IDs do not need to be registered with the
   * feathers manager. 
   *
   * \param aLayoutURL URL for a xul window
   * \param aInternalName Identifier for a skin
   * \param aShowChrome Whether or not the OS titlebar should be used 
   *        when the skin-window pair is active
   */
  void assertCompatibility(in AString aLayoutURL,
                           in AString aInternalName,
                           in boolean aShowChrome);
 

  
  /**
   * \brief Unassert compatibility of a skin-layout pair
   *
   * Indicate that layoutURL and internalName cannot be active at the same time.
   *
   * TODO: Throw an exception if the mapping is currently in use?
   *
   * \param aLayoutURL URL for a xul window
   * \param aInternalName Identifier for a skin
   */
  void unassertCompatibility(in AString aLayoutURL,
                             in AString aInternalName);
 


  /**
   * \brief Should window chrome be used with the given window-skin pair
   *
   * \param aLayoutURL URL for a xul window
   * \param aInternalName Identifier for a skin
   * \return True if the given pair should be displayed with native chrome (titlebar, etc.)
   */
  boolean isChromeEnabled(in AString aLayoutURL,
                          in AString aInternalName);




  /**
   * \brief Get an enumerator for all registered skins compatible with 
   *        the given layoutID
   * 
   * \param aLayoutURL URL for a xul window
   * \return Enumerator for a list of sbISkinDescription objects
   */
  nsISimpleEnumerator getSkinsForLayout(in AString aLayoutURL);



  /**
   * \brief Switch to the given window-skin pair
   *
   * Attempts to reopen all Songbird windows using the given
   * layout and skin.
   *
   * Note: triggers the onSelectRequest callback
   * 
   * \param aLayoutURL URL for a xul window
   * \param aInternalName Identifier for a skin
   * \sa sbIFeathersChangeListener
   */
  void switchFeathers(in AString aLayoutURL, 
                         in AString aInternalName);



  /**
   * \brief Register to receive modification callbacks
   * 
   * \param aListener Callback interface
   */
  void addListener(in sbIFeathersManagerListener aListener);

  /**
   * \brief Unregister modification callbacks
   * 
   * \param aListener Callback interface
   */
  void removeListener(in sbIFeathersManagerListener aListener);
};




