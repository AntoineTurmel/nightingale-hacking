/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbIFeathersManager.idl
 * \brief Coordinates the loading of feathers (combination of skin and XUL window)
 */

#include "nsISupports.idl"

interface nsISimpleEnumerator;
interface sbIXULProvider;
interface sbISkinProvider;

interface sbIFeathersChangeListener;


/**
* \interface sbIFeathersManager
* \brief Controls the appearance of the application
*
* Acts as a registry for installed skins and alternate XUL windows,
* and provides a mechanism for switching between them.
*
* \sa sbISkinProvider, sbIXULProvider, sbIFeathersChangeListener
*/
[scriptable, uuid(99f24350-a67f-11db-befa-0800200c9a66)]
interface sbIFeathersManager : nsISupports
{
  /**
   * \brief Description of the active xulWindow extension
   */
  readonly attribute sbIXULProvider currentXUL;
  
  /**
   * \brief Description of the active skin extension
   */
  readonly attribute sbISkinProvider currentSkin;


  /**
   * \brief Enumerator for all registered sbISkinProvider objects
   */
  readonly attribute nsISimpleEnumerator skinProviders;


  /**
   * \brief Number of registered skins
   */
  readonly attribute unsigned long skinCount;


  /**
   * \brief Enumerator for all registered sbIXULProvider objects
   */
  readonly attribute nsISimpleEnumerator xulProviders;


  /**
   * \brief Number of registered XUL windows
   */
  readonly attribute unsigned long xulWindowCount;



  /**
   * \brief Make the given skin available for use
   * \param skin Skin description
   */
  void registerSkin(in sbISkinProvider skin);
  
  /**
   * \brief Disable the given skin
   * \param skin Skin description
   */
  void unregisterSkin(in sbISkinProvider skin);

  /**
   * \brief Gets the full skin description associated with a skin ID
   *
   * \param id Unique skin identifier
   * \return Skin description
   */
  sbISkinProvider getSkin(in AString id);



  /**
   * \brief Make the given XUL window available for use
   * \param xulWindow Window description
   */
  void registerXUL(in sbIXULProvider xulWindow);

  /**
   * \brief Disable the given window
   * \param xulWindow Window description
   */    
  void unregisterXUL(in sbIXULProvider xulWindow);

  /**
   * \brief Gets the full xulWindow description associated with a xulWindow ID
   *
   * \param id Unique identifier
   * \return XULWindow description
   */
  sbIXULProvider getXULWindow(in AString id);



  /**
   * \brief Assert compatibility of a skin-xul pair
   *
   * Indicate that skinID and xulWindowID can be active at the same time, 
   * and whether the window chrome (titlebar, borders) should be shown.
   *
   * Note that the given skin and xul window IDs do not need to be registered with the
   * feathers manager. 
   *
   * \param skinID Unique identifier for a skin
   * \param xulWindowID Unique identifier for a xul window
   * \param showChrome Whether or not the OS titlebar should be used 
   *        when the skin-window pair is active
   */
  void addMapping(in AString xulWindowID, in AString skinID , in boolean showChrome);
 

  
  /**
   * \brief Unassert compatibility of a skin-xul pair
   *
   * Indicate that skinID and xulWindowID cannot be active at the same time.
   *
   * TODO: Throw an exception if the mapping is currently in use?
   *
   * \param skinID Unique identifier for a skin
   * \param xulWindowID Unique identifier for a xul window
   */
  void removeMapping(in AString xulWindowID, in AString skinID);
 


  /**
   * \brief Get an enumerator for all registered skins compatible with 
   *        the given xulWindowID
   * 
   * \param xulWindowID Unique identifier for a xul window
   * \return Enumerator for a list of sbISkinProvider objects
   */
  nsISimpleEnumerator getSkinsForXULWindow(in AString xulWindowID);



  /**
   * \brief Switch to the given window-skin pair
   *
   * Attempts to reopens all Songbird windows using the given
   * xulWindow and skin.
   *
   * Note: triggers the onSelectRequest callback
   * 
   * \param xulWindowID Unique identifier for a xulWindow
   * \return True if the selection process can proceed
   * \sa sbIFeathersChangeListener
   */
  boolean select(in AString xulWindowID, in AString skinID);



  /**
   * \brief Register to receive modification callbacks
   * 
   * \param listener Callback interface
   */
  void addChangeListener(in sbIFeathersChangeListener listener);

  /**
   * \brief Unregister modification callbacks
   * 
   * \param listener Callback interface
   */
  void removeChangeListener(in sbIFeathersChangeListener listener);
};




/**
* \interface sbIFeathersChangeListener
* \brief Callback interface used to listen to Feathers Manager changes
*
* \sa sbIFeathersManager
*/
[scriptable, uuid(989ca002-eea7-4eff-ae93-2615f89b5581)]
interface sbIFeathersChangeListener : nsISupports
{
  /**
   * \brief Called whenever the feathers manager is modified
   */  
  void onUpdate();

  /**
   * \brief Called when the feathers manager is about to switch feathers
   * \param xulWindow Description of the xulWindow to be selected
   * \param skin Description of the skin to be selected
   */  
  void onSelectRequest(in sbIXULProvider xulWindow, in sbISkinProvider skin);
};