/**
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2006 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the “GPL”).
// 
// Software distributed under the License is distributed 
// on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

/**
 * \file sbICoreWrapper.idl
 * \brief Interface definition for playback cores
 * Interface definition for playback cores.
 * \sa baseCore.js coreFlash.js coreWMP.js coreMPLayer.js coreQT.js coreVLC.js
 *     coreWMP.js flashcore.fla sbPlaylistPlayback.js
 */
#include "nsISupports.idl"
#include "nsIDOMHTMLObjectElement.idl"

/**
 * \interface sbICoreWrapper
 * \brief A wrapper for various media cores
 * Defines the inteface for objects that will provide playback functionality
 * \sa baseCore coreFlash
 */
[scriptable, uuid(ea5d3666-c790-4bf8-8d2f-780bb90e5579)]
interface sbICoreWrapper : nsISupports
{
  /**
   * \brief Get the pause state
   * Return the pause state of the playback core.
   * \return TRUE if paused
   * \return FALSE if not paused
   */
  boolean getPaused();

  /**
   * \brief Get the playing state
   * Return the play state of the playback core. If the core is stopped, this
   *   will return FALSE, but if paused it will still return TRUE.
   * \return TRUE if playing (paused or not)
   * \return FALSE if not playing
   */
  boolean getPlaying();

  /**
   * \brief Get the mute state
   * \return TRUE if muted
   * \return FALSE if not muted
   */
  boolean getMute();

  /**
   * \brief Set the mute state
   * \param aMute - A boolean indicating the desired mute state
   */
  void setMute(in boolean aMute);

  /**
   * \brief Get the volume
   * \return An integer between 0 and 255 inclusive
   */
  unsigned long getVolume();

  /**
   * \brief Set the volume
   * \param aVolume - an integer between 0 and 255 inclusive
   */
  void setVolume(in unsigned long aVolume);

  /**
   * \brief Get the length of the current media
   * \return The length, in milliseconds, of the current media.
   */
  unsigned long long getLength();

  /**
   * \brief Get the position within the current media
   * \return Position of playback in the current media, in milliseconds
   *
   */
  unsigned long long getPosition();

  /**
   * \brief Set the position of playback
   * \param aPosition - The position, in milliseconds, of where to move the
   *                    playback to.
   */
  void setPosition(in unsigned long long aPosition);

  /**
   * \brief Maximize the plugin window to be fullscreen.
   * Have the plugin render to the full size of the screen.
   * \return void
   */
  void goFullscreen();

  /**
   * \brief Generic id string
   * \return String identifier
   */
  AString getId();

  /**
   *
   * \brief Set the string identifier
   * \param aId - the string identifier
   */
  void setId(in AString aId);

  /**
   * \brief Retrieve the HTML element that implements playback functionality
   * This gets the object that actually implements the playback functionality.
   *   For some cores this will be an nsIHTMLDOMObjectElement and some it
   *   will be an nsIHTMLDOMEmbedElement. Either way, it is the additional
   *   javascript API that exists on the object that will be utilized in most
   *   cases.
   * \return The HTML element.
   */
  nsIDOMHTMLElement getObject();

  /**
   * \brief Set the HTML element that implements playback functionality
   * This sets the object that actually implements the playback functionality.
   *   For some cores this will be an nsIHTMLDOMObjectElement and some it
   *   will be an nsIHTMLDOMEmbedElement. Either way, it is the additional
   *   javascript API that exists on the object that will be utilized in most
   *   cases.
   * \param aObject The HTML element
   * \return void
   */
  void setObject(in nsIDOMHTMLElement aObject);

  /**
   * \brief Specify the url to play and start playback
   * \param
   * \return true If playback was successful.
   * \return false If there was an error with playback
   * \throws NS_ERROR_INVALID_ARG If the URL passed in is null/undefined.
   * \throws NS_ERROR_NOT_INITIALIZED If no object has been set.
   */
  boolean playURL(in AString aURL);

  /**
   * \brief Resume paused playback.  Multiple calls do nothing.
   * \return 
   */
  boolean play();

  /**
   * \brief Stop playback.
   * \return 
   */
  boolean stop();

  /**
   * \brief Pause playing playback.  Multiple calls do nothing.
   * \return 
   */
  boolean pause();

  /**
   * \brief Get the requested metadata
   * \param aKey - The category of metadata to retrieve (name, artist, etc...)
   * \return The value of the metadata, the empty string if it is not set or
   *         doesn't exist.
   */
  AString getMetadata(in AString aKey);

  /**
   * \brief Called when the core is swapping.
   * Allows the core to do any cleaning up it needs to. Also stops the
   *   playback of any media.
   * \return void
   */
  void onSwapCore();
};

