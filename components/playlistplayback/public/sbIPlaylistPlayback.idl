/**
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2006 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the “GPL”).
// 
// Software distributed under the License is distributed 
// on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

/**
 * \file sbIPlaylistPlayback.js
 * \brief Contains the interface definition for sbIPlaylistPlayback
 * \sa sbICoreWrapper.idl sbPlaylistPlayback.js
 */

#include "nsISupports.idl"
#include "nsIObserver.idl"

interface sbIPlaylist;
interface sbICoreWrapper;

/**
 * \interface sbIPlaylistPlayback
 * \brief
 * \sa sbICoreWrapper sbIPlaylist
 * An interface that describes the PlaylistPlayback Service
 */
[scriptable, uuid(190b1e87-8769-43b4-a362-4065eb6730e5)]
interface sbIPlaylistPlayback : nsIObserver
{
  const unsigned short REPEAT_MODE_OFF = 0;
  const unsigned short REPEAT_MODE_ONE = 1;
  const unsigned short REPEAT_MODE_ALL = 2;

  // Attributes reflecting state of the playback core:
  attribute sbICoreWrapper core;
  attribute unsigned short volume;
  attribute boolean mute;
  attribute long long position;
  readonly attribute long long length;
  readonly attribute boolean paused;
  readonly attribute boolean playing;
  readonly attribute boolean started;

  // Attributes reflecting Songbird playback state:
  attribute unsigned short repeat;
  attribute boolean shuffle;
  readonly attribute unsigned long itemCount;
  readonly attribute AString currentGUID;
  readonly attribute AString currentURL;

  // Methods for Mutli-core manipulation
  void addCore(in sbICoreWrapper core, in boolean select);
  void removeCore(in sbICoreWrapper core);
  void selectCore(in sbICoreWrapper core);

  // "Standard" player controls
  boolean play();
  boolean pause();
  boolean stop();
  unsigned long next();
  unsigned long previous();
  unsigned long current();
  void goFullscreen();

  // Various ways of passing in content to play
  boolean playRef(in AString source_ref, in unsigned long index);
  boolean playRefByID(in AString source_ref, in unsigned long row_id);
  boolean playRefByUUID(in AString source_ref, in AString media_uuid);
  boolean playRefByURL(in AString source_ref, in AString url);
  boolean playTable(in AString dbGUID, in AString table, in unsigned long index);
  boolean playTableByURL(in AString dbGUID, in AString table, in AString url);
  boolean playTableByID(in AString dbGUID, in AString table, in unsigned long row_id);
  boolean playTableByUUID(in AString dbGUID, in AString table, in AString uuid);
  boolean playObject(in sbIPlaylist playlist, in unsigned long index);
  boolean playUrl(in AString url);
  boolean playAndImportUrl(in AString url);
  long importUrl(in AString url);


  // Metadata methods
  void getMetadataFields(out unsigned long fieldCount, [array, size_is(fieldCount), retval] out wstring metaFields);
  AString getCurrentValue(in AString field);
  void setCurrentValue(in AString field, in AString value);
  void getCurrentValues(in unsigned long fieldCount, [array, size_is(fieldCount)] in wstring metaFields,
                        out unsigned long valueCount, [array, size_is(valueCount), retval] out wstring metaValues);
  void setCurrentValues(in unsigned long fieldCount, [array, size_is(fieldCount)] in wstring metaFields, 
                        in unsigned long valueCount, [array, size_is(valueCount)] in wstring metaValues);

  // URL checking
  boolean isMediaUrl(in AString url);
  boolean isVideoUrl(in AString url);
  boolean isPlaylistUrl(in AString url);

  // String twiddling
  AString stripHoursFromTimeString(in AString str);
  AString emitSecondsToTimeString(in AString seconds);
  AString convertUrlToDisplayName(in AString url);
  AString convertUrlToFolder(in AString url);

};
