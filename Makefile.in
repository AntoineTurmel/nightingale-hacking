#
# BEGIN SONGBIRD GPL
#
# This file is part of the Songbird web player.
#
# Copyright(c) 2005-2008 POTI, Inc.
# http://www.songbirdnest.com
#
# This file may be licensed under the terms of of the
# GNU General Public License Version 2 (the GPL).
#
# Software distributed under the License is distributed
# on an AS IS basis, WITHOUT WARRANTY OF ANY KIND, either
# express or implied. See the GPL for the specific language
# governing rights and limitations.
#
# You should have received a copy of the GPL along with this
# program. If not, go to http://www.gnu.org/licenses/gpl.html
# or write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# END SONGBIRD GPL
#

DEPTH = .
topsrcdir = @top_srcdir@
srcdir = @srcdir@
VPATH = @srcdir@

include $(DEPTH)/build/autodefs.mk

CREATEDIRS = $(SONGBIRD_CHROMEDIR) \
             $(SONGBIRD_COMPONENTSDIR) \
             $(SONGBIRD_DEFAULTSDIR) \
             $(SONGBIRD_PREFERENCESDIR) \
             $(SONGBIRD_PLUGINSDIR) \
             $(SONGBIRD_SCRIPTSDIR) \
             $(SONGBIRD_XULRUNNERDIR) \
             $(NULL)

ifdef SB_ENABLE_TESTS
  CREATEDIRS += $(SONGBIRD_TESTSDIR)
endif

ifeq (windows,$(SB_PLATFORM))
  CREATEDIRS += $(SONGBIRD_VLCPLUGINSDIR)
endif

ifeq (macosx,$(SB_PLATFORM))
  CREATEDIRS += $(SONGBIRD_MACOS)
endif

SUBDIRS = build \
          dependencies \
          bindings \
          app \
          components \
          feathers \
          locales \
          extensions \
          tools \
          $(SONGBIRD_BRANDING_DIR) \
          $(NULL)

SUBDIRDEPS = components : bindings

ifdef HAS_EXTRAS
SUBDIRS += extras
SUBDIRDEPS2 = extras : components
endif

ifdef SONGBIRD_OFFICIAL
SUBDIRS += update
SUBDIRDEPS3 = update : installer
endif

ifdef MAKE_INSTALLER
   SUBDIRS += installer
   SUBDIRDEPS = installer : components app feathers locales stripsymbols
endif

ifdef SB_ENABLE_BREAKPAD
   BREAKPAD_SYMBOL_PATH = $(SONGBIRD_OBJDIR)/breakpad-symbols
   BREAKPAD_ARCHIVE_PATH = $(SONGBIRD_OBJDIR)
   BREAKPAD_ARCHIVE_FILENAME = symbols-$(SB_BUILD_ID).zip
   MAKE_SYM_STORE_ARGS = --vcs-info
   # After XR repins...
   # MAKE_SYM_STORE_ARGS = --vcs-info -V

   ifeq ($(SB_PLATFORM),windows)
      # we want to copy PDB files on Windows
      MAKE_SYM_STORE_ARGS += -c
      DUMP_SYMS_BIN = $(MOZSDK_BIN_DIR)/dump_syms.exe
      # PDB files don't get moved to dist, so we need to scan the whole objdir
      MAKE_SYM_STORE_PATH = ./
   endif

   ifeq ($(SB_PLATFORM),macosx)
      ifeq ($(SB_ARCH),i686)
         BREAKPAD_ARCH = i386
      else
         BREAKPAD_ARCH = $(SB_ARCH)
      endif

      MAKE_SYM_STORE_ARGS += -a $(BREAKPAD_ARCH)
      DUMP_SYMS_BIN = $(MOZSDK_BIN_DIR)/dump_syms
      MAKE_SYM_STORE_PATH = $(SONGBIRD_OBJDIR)/dist/Songbird.app/Contents/Resources/components
   endif

   ifeq ($(SB_PLATFORM),linux)
      DUMP_SYMS_BIN = $(MOZSDK_BIN_DIR)/dump_syms
      MAKE_SYM_STORE_PATH = $(SONGBIRD_OBJDIR)/dist/components
   endif
endif #SB_ENABLE_BREAKPAD

include $(topsrcdir)/build/rules.mk

# We have both stripsymbols and do_stripsymbols because in the common case,
# where we do a |make -f songbird.mk clobber && make -f songbird.mk|,
# sbBuildInfo.ini won't be pre-processed yet. This means that things like
# SB_BUILD_APP and SB_BUILD_ID, taken from that file in build/config.mk
# will get filled with empty values (it uses := in the assignment for perf
# reasons) when this top-level makefile gets initially called; we solve that
# by calling ourselves with a specific targe, which will cause the makefile
# to re-include build/config.mk, at which point sbBuildInfo.ini will have been
# pre-processed, exist, and all will be good with the world.

stripsymbols:
	$(MAKE) -f $(THISMAKEFILE) do_stripsymbols 

# The strip-symbols target is only run for Mac and linux; it looks for
# .so's on Linux, .dylibs AND .sos on Mac, because the gstreamer vendor build
# gets the extension stuff wrong, and creates libraries with the .so extension
# even on the Mac. Whee...
do_stripsymbols: buildsymbols
ifdef MAKE_INSTALLER
   ifneq (windows,$(SB_PLATFORM))
	   @echo "Stripping package directory..."
      ifeq (macosx,$(SB_PLATFORM))
	      $(FIND) $(SONGBIRD_DISTDIR) -type f -name "*.dylib" \
          -exec $(STRIP) $(STRIP_FLAGS) {} \; 
      endif
	   $(FIND) $(SONGBIRD_DISTDIR) -type f -name "*.so" \
       -exec $(STRIP) $(STRIP_FLAGS) {} \; 
   endif
endif

buildsymbols:
ifdef SB_ENABLE_BREAKPAD
	@echo Building Breakpad symbol store $(SB_BUILD_ID)...
	$(MKDIR) -p $(BREAKPAD_SYMBOL_PATH)/$(SB_BUILD_ID)
	$(PYTHON) $(MOZSDK_SCRIPTS_DIR)/symbolstore.py \
    $(MAKE_SYM_STORE_ARGS) -s $(topsrcdir)/ $(DUMP_SYMS_BIN) \
    $(BREAKPAD_SYMBOL_PATH)/$(SB_BUILD_ID) \
    $(MAKE_SYM_STORE_PATH) > \
    $(BREAKPAD_SYMBOL_PATH)/$(SB_BUILD_ID)/$(SB_APPNAME)-$(SB_MILESTONE)-$(SB_PLATFORM)-$(SB_ARCH)-$(SB_BUILD_ID)-symbols.txt
	@echo Setting symbol store package permissions...
	$(FIND) $(BREAKPAD_SYMBOL_PATH)/$(SB_BUILD_ID) -type d -exec $(CHMOD) 0755 {} \; 
	$(FIND) $(BREAKPAD_SYMBOL_PATH)/$(SB_BUILD_ID) -type f -exec $(CHMOD) 0644 {} \; 
	@echo Packing up symbols...
	cd $(BREAKPAD_SYMBOL_PATH)/$(SB_BUILD_ID) && \
    $(ZIP) -r9D $(BREAKPAD_SYMBOL_PATH)/$(BREAKPAD_ARCHIVE_FILENAME) .
	$(MKDIR) -p $(BREAKPAD_ARCHIVE_PATH)
	$(MV) $(BREAKPAD_SYMBOL_PATH)/$(BREAKPAD_ARCHIVE_FILENAME) \
    $(BREAKPAD_ARCHIVE_PATH)
endif # SB_ENABLE_BREAKPAD

uploadsymbols:
ifdef SB_ENABLE_BREAKPAD
	$(MOZSDK_SCRIPTS_DIR)/upload_symbols.sh \
    $(BREAKPAD_ARCHIVE_PATH)/$(BREAKPAD_ARCHIVE_FILENAME)
endif

.PHONY: uploadsymbols buildsymbols stripsymbols do_stripsymbols
