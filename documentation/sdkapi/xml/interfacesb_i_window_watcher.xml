<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="interfacesb_i_window_watcher" kind="interface" prot="public">
    <compoundname>sbIWindowWatcher</compoundname>
    <includes refid="sb_i_window_watcher_8idl" local="no">sbIWindowWatcher.idl</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="interfacesb_i_window_watcher_1334158ade89d8d97fa82e742ee6696b4" prot="public" static="no" mutable="no">
        <type>readonly attribute boolean</type>
        <definition>readonly attribute boolean sbIWindowWatcher::isShuttingDown</definition>
        <argsstring></argsstring>
        <name>isShuttingDown</name>
        <briefdescription>
<para>True if the window watcher is shutting down and no more windows will become available. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/moz/windowwatcher/public/sbIWindowWatcher.idl" line="59" bodyfile="c:/builds/songbird/trunk/components/moz/windowwatcher/public/sbIWindowWatcher.idl" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_window_watcher_1a349ea1484c3c284bdee71bc5d89ef08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIWindowWatcher::callWithWindow</definition>
        <argsstring>(in AString aWindowType, in sbICallWithWindowCallback aCallback,[optional] in boolean aWait)</argsstring>
        <name>callWithWindow</name>
        <param>
          <type>in AString</type>
          <declname>aWindowType</declname>
        </param>
        <param>
          <type>in <ref refid="interfacesb_i_call_with_window_callback" kindref="compound">sbICallWithWindowCallback</ref></type>
          <declname>aCallback</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in boolean</type>
          <declname>aWait</declname>
        </param>
        <briefdescription>
<para>Call callback specified by aCallback with a window of the type specified by aWindowType. Wait until a window of the specified type is available or until shutdown. Call callback with null window on shutdown. Call callback on main thread. If aWait is true, don&apos;t return until callback is called. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aWindowType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of window with which to call. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to call with window. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aWait</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, wait until calback is called. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/moz/windowwatcher/public/sbIWindowWatcher.idl" line="77"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_window_watcher_16069cfc9e7bd832eb4f2e9095ae7949f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsIDOMWindow</type>
        <definition>nsIDOMWindow sbIWindowWatcher::getWindow</definition>
        <argsstring>(in AString aWindowType)</argsstring>
        <name>getWindow</name>
        <param>
          <type>in AString</type>
          <declname>aWindowType</declname>
        </param>
        <briefdescription>
<para>Get the top-most available window of the type specified by aWindowType. Return null if no matching window is available. Since nsIDOMWindow is not thread-safe, this method may only be called on the main thread. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aWindowType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of window to get.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Window of specified type or null if none available. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/moz/windowwatcher/public/sbIWindowWatcher.idl" line="92"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_window_watcher_1ea3e572ade3000f72d79f76b92114397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIWindowWatcher::waitForWindow</definition>
        <argsstring>(in AString aWindowType)</argsstring>
        <name>waitForWindow</name>
        <param>
          <type>in AString</type>
          <declname>aWindowType</declname>
        </param>
        <briefdescription>
<para>Wait until a window of the type specified by aWindowType is available or until shutdown. This method may not be called on the main thread. Since the available window can only be used on the main thread, the available window may become unavailable after waitForWindow returns but before processing continues on the main thread. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aWindowType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of window to get. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/moz/windowwatcher/public/sbIWindowWatcher.idl" line="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="interfacesb_i_window_watcher" kindref="compound">sbIWindowWatcher</ref> interface provides support for using ready windows. Windows are considered ready when all of their overlays have loaded. Main thread code may use callWithWindow to be called when a window is ready. Main thread code may also use getWindow to get a ready window, but there&apos;s no guarantee that a window will be ready, and getWindow won&apos;t wait for one. Non-main thread code may use waitForWindow to wait until a window is ready. This code may then dispatch to the main thread to get and use the window.</para><para>&quot;@songbirdnest.com/Songbird/window-watcher;1&quot; Use get service with this component. </para>    </detaileddescription>
    <location file="c:/builds/songbird/trunk/components/moz/windowwatcher/public/sbIWindowWatcher.idl" line="53" bodyfile="c:/builds/songbird/trunk/components/moz/windowwatcher/public/sbIWindowWatcher.idl" bodystart="52" bodyend="107"/>
    <listofallmembers>
      <member refid="interfacesb_i_window_watcher_1a349ea1484c3c284bdee71bc5d89ef08" prot="public" virt="non-virtual"><scope>sbIWindowWatcher</scope><name>callWithWindow</name></member>
      <member refid="interfacesb_i_window_watcher_16069cfc9e7bd832eb4f2e9095ae7949f" prot="public" virt="non-virtual"><scope>sbIWindowWatcher</scope><name>getWindow</name></member>
      <member refid="interfacesb_i_window_watcher_1334158ade89d8d97fa82e742ee6696b4" prot="public" virt="non-virtual"><scope>sbIWindowWatcher</scope><name>isShuttingDown</name></member>
      <member refid="interfacesb_i_window_watcher_1ea3e572ade3000f72d79f76b92114397" prot="public" virt="non-virtual"><scope>sbIWindowWatcher</scope><name>waitForWindow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
