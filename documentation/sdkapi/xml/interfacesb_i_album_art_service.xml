<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="interfacesb_i_album_art_service" kind="interface" prot="public">
    <compoundname>sbIAlbumArtService</compoundname>
    <includes refid="sb_i_album_art_service_8idl" local="no">sbIAlbumArtService.idl</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_album_art_service_100cb8b5ca59e60f2fe5ce88cdee7ffa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsIArray</type>
        <definition>nsIArray sbIAlbumArtService::getFetcherList</definition>
        <argsstring>(in boolean aLocalOnly)</argsstring>
        <name>getFetcherList</name>
        <param>
          <type>in boolean</type>
          <declname>aLocalOnly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a list of album art fetcher contract ID&apos;s as an array of nsIVariant&apos;s of type ACString. If aLocalOnly is true, return only local album art fetchers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLocalOnly</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, only return local album art fetchers.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of album art fetcher contract ID&apos;s. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/albumart/public/sbIAlbumArtService.idl" line="63"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_album_art_service_1c02f281e797186164ea83102027c90d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>boolean sbIAlbumArtService::imageIsValidAlbumArt</definition>
        <argsstring>(in AUTF8String aMimeType,[const, array, size_is(aDataLen)] in octet aData, in unsigned long aDataLen)</argsstring>
        <name>imageIsValidAlbumArt</name>
        <param>
          <type>in AUTF8String</type>
          <declname>aMimeType</declname>
        </param>
        <param>
          <attributes>[const, array, size_is(aDataLen)]</attributes>
          <type>in octet</type>
          <declname>aData</declname>
        </param>
        <param>
          <type>in unsigned long</type>
          <declname>aDataLen</declname>
        </param>
        <briefdescription>
<para>Determine whether the image specified by aData and aDataLen of type specified by aMimeType is a valid album art image. Return true if so. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aMimeType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIME type of image data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aData</parametername>
</parameternamelist>
<parameterdescription>
<para>Album art image data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length in bytes of image data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if image is valid album art. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/albumart/public/sbIAlbumArtService.idl" line="81"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_album_art_service_1debef4d7ec6f68c9d80f671d8c8f1102" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsIFileURL</type>
        <definition>nsIFileURL sbIAlbumArtService::cacheImage</definition>
        <argsstring>(in AUTF8String aMimeType,[const, array, size_is(aDataLen)] in octet aData, in unsigned long aDataLen)</argsstring>
        <name>cacheImage</name>
        <param>
          <type>in AUTF8String</type>
          <declname>aMimeType</declname>
        </param>
        <param>
          <attributes>[const, array, size_is(aDataLen)]</attributes>
          <type>in octet</type>
          <declname>aData</declname>
        </param>
        <param>
          <type>in unsigned long</type>
          <declname>aDataLen</declname>
        </param>
        <briefdescription>
<para>Write the album art image specified by aData and aDataLen of type specified by aMimeType to a cache file and return the cache file URL. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aMimeType</parametername>
</parameternamelist>
<parameterdescription>
<para>MIME type of image data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aData</parametername>
</parameternamelist>
<parameterdescription>
<para>Album art image data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length in bytes of image data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Album art image cache file URL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/albumart/public/sbIAlbumArtService.idl" line="98"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_album_art_service_1800472d94058acada677926a67685d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIAlbumArtService::cacheTemporaryData</definition>
        <argsstring>(in AString aKey, in nsISupports aData)</argsstring>
        <name>cacheTemporaryData</name>
        <param>
          <type>in AString</type>
          <declname>aKey</declname>
        </param>
        <param>
          <type>in nsISupports</type>
          <declname>aData</declname>
        </param>
        <briefdescription>
<para>Add arbitrary data to a temporary cache. </para>        </briefdescription>
        <detaileddescription>
<para>Used by art fetchers to cache intermediate results for a short period of time. Allows fetchers to avoid additional work without keeping their own static cache.</para><para>Note: The contents of this cache is flushed periodically</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aKey</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aData</parametername>
</parameternamelist>
<parameterdescription>
<para>Arbitrary data to store. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/albumart/public/sbIAlbumArtService.idl" line="114"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_album_art_service_1ebaa57739ba74a2d1afee4dadb08d232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsISupports</type>
        <definition>nsISupports sbIAlbumArtService::retrieveTemporaryData</definition>
        <argsstring>(in AString aKey)</argsstring>
        <name>retrieveTemporaryData</name>
        <param>
          <type>in AString</type>
          <declname>aKey</declname>
        </param>
        <briefdescription>
<para>Get data previously placed into the temporary cache. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aKey</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Arbitrary data</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>NS_ERROR_NOT_AVAILABLE</parametername>
</parameternamelist>
<parameterdescription>
<para>if the key is not found </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/albumart/public/sbIAlbumArtService.idl" line="125"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface for the album art service. Instantiate as a component service. </para>    </briefdescription>
    <detaileddescription>
<para>&quot;@songbirdnest.com/Songbird/album-art-service;1&quot; </para>    </detaileddescription>
    <location file="c:/builds/songbird/trunk/components/albumart/public/sbIAlbumArtService.idl" line="52" bodyfile="c:/builds/songbird/trunk/components/albumart/public/sbIAlbumArtService.idl" bodystart="51" bodyend="126"/>
    <listofallmembers>
      <member refid="interfacesb_i_album_art_service_1debef4d7ec6f68c9d80f671d8c8f1102" prot="public" virt="non-virtual"><scope>sbIAlbumArtService</scope><name>cacheImage</name></member>
      <member refid="interfacesb_i_album_art_service_1800472d94058acada677926a67685d92" prot="public" virt="non-virtual"><scope>sbIAlbumArtService</scope><name>cacheTemporaryData</name></member>
      <member refid="interfacesb_i_album_art_service_100cb8b5ca59e60f2fe5ce88cdee7ffa0" prot="public" virt="non-virtual"><scope>sbIAlbumArtService</scope><name>getFetcherList</name></member>
      <member refid="interfacesb_i_album_art_service_1c02f281e797186164ea83102027c90d6" prot="public" virt="non-virtual"><scope>sbIAlbumArtService</scope><name>imageIsValidAlbumArt</name></member>
      <member refid="interfacesb_i_album_art_service_1ebaa57739ba74a2d1afee4dadb08d232" prot="public" virt="non-virtual"><scope>sbIAlbumArtService</scope><name>retrieveTemporaryData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
