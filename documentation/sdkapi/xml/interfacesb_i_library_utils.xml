<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="interfacesb_i_library_utils" kind="interface" prot="public">
    <compoundname>sbILibraryUtils</compoundname>
    <includes refid="sb_i_library_utils_8idl" local="no">sbILibraryUtils.idl</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_library_utils_1fcd83765a77624bf3be65322495ab208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsIURI</type>
        <definition>nsIURI sbILibraryUtils::getContentURI</definition>
        <argsstring>(in nsIURI aURI)</argsstring>
        <name>getContentURI</name>
        <param>
          <type>in nsIURI</type>
          <declname>aURI</declname>
        </param>
        <briefdescription>
<para>Return a library content URI for the URI specified by aURI. A library content URI is a specially formatted URI for use within Songbird libraries and is formatted to facilitate searching for equivalent URI&apos;s (e.g., &quot;file:&quot; URI&apos;s are all lower case on Windows). URI&apos;s provided to createMediaItem and related methods must be library content URI&apos;s. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aURI</parametername>
</parameternamelist>
<parameterdescription>
<para>URI for which to get content URI.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Library content URI. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibraryUtils.idl" line="58"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_utils_1aba8d321c724660794286ffa44f2c022" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsIURI</type>
        <definition>nsIURI sbILibraryUtils::getFileContentURI</definition>
        <argsstring>(in nsIFile aFile)</argsstring>
        <name>getFileContentURI</name>
        <param>
          <type>in nsIFile</type>
          <declname>aFile</declname>
        </param>
        <briefdescription>
<para>Return a library content URI for the file specified by aFile. Special processing is required to convert an nsIFile to a library content URI (see bug 6227). getFileContentURI must be used instead of nsIIOService.newFileURI for generating library content URI&apos;s. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aFile</parametername>
</parameternamelist>
<parameterdescription>
<para>File for which to get content URI.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Library content URI. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibraryUtils.idl" line="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Set of library utilities. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibraryUtils.idl" line="44" bodyfile="c:/builds/songbird/trunk/components/library/base/public/sbILibraryUtils.idl" bodystart="43" bodyend="71"/>
    <listofallmembers>
      <member refid="interfacesb_i_library_utils_1fcd83765a77624bf3be65322495ab208" prot="public" virt="non-virtual"><scope>sbILibraryUtils</scope><name>getContentURI</name></member>
      <member refid="interfacesb_i_library_utils_1aba8d321c724660794286ffa44f2c022" prot="public" virt="non-virtual"><scope>sbILibraryUtils</scope><name>getFileContentURI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
