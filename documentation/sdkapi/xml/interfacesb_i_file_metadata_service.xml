<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="interfacesb_i_file_metadata_service" kind="interface" prot="public">
    <compoundname>sbIFileMetadataService</compoundname>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_file_metadata_service_1233d09ea939b1d88be9b9955e20df728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_job_progress" kindref="compound">sbIJobProgress</ref></type>
        <definition>sbIJobProgress sbIFileMetadataService::read</definition>
        <argsstring>(in nsIArray aMediaItemArray)</argsstring>
        <name>read</name>
        <param>
          <type>in nsIArray</type>
          <declname>aMediaItemArray</declname>
        </param>
        <briefdescription>
<para>Start a processing job to read metadata from the files associated with the given media items. </para>        </briefdescription>
        <detaileddescription>
<para>Note that all the media items must be from the same library. This restriction is due to the fact that library batching can only be done on a per library basis.</para><para>If called off of the main thread, will proxy to complete job startup. Be aware that proxy events may be processed on the calling thread while waiting. Also note that the <ref refid="interfacesb_i_job_progress" kindref="compound">sbIJobProgress</ref> token returned should NOT be accessed off of the main thread.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aMediaItemsArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array filled with media items to be scanned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An interface for monitoring the status of the request </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediacore/metadata/manager/public/sbIFileMetadataService.idl" line="77"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_file_metadata_service_1c2860e5f203f727476b4ac83305d0f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_job_progress" kindref="compound">sbIJobProgress</ref></type>
        <definition>sbIJobProgress sbIFileMetadataService::write</definition>
        <argsstring>(in nsIArray aMediaItemArray, in nsIStringEnumerator aRequiredProperties)</argsstring>
        <name>write</name>
        <param>
          <type>in nsIArray</type>
          <declname>aMediaItemArray</declname>
        </param>
        <param>
          <type>in nsIStringEnumerator</type>
          <declname>aRequiredProperties</declname>
        </param>
        <briefdescription>
<para>Start a processing job to write metadata from the given media items back to their associated files. </para>        </briefdescription>
        <detaileddescription>
<para>Note that all the media items must be from the same library. This restriction is due to the fact that library batching can only be done on a per library basis.</para><para>Also note that if a property is found in a file but does not exist in the associated <ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref>, it will be removed from the file on write.</para><para>Also note that for each item all the properties in the list of aRequiredProperties will be written even if they have not changed.</para><para>If called off of the main thread, will proxy to complete job startup. Be aware that proxy events may be processed on the calling thread while waiting. Also note that the <ref refid="interfacesb_i_job_progress" kindref="compound">sbIJobProgress</ref> token returned should NOT be accessed off of the main thread.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aMediaItemsArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array filled with media items to be scanned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aRequiredProperties</parametername>
</parameternamelist>
<parameterdescription>
<para>A String Enumertor filled with property ids that we wish to write. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An interface for monitoring the status of the request </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediacore/metadata/manager/public/sbIFileMetadataService.idl" line="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="c:/builds/songbird/trunk/components/mediacore/metadata/manager/public/sbIFileMetadataService.idl" line="58" bodyfile="c:/builds/songbird/trunk/components/mediacore/metadata/manager/public/sbIFileMetadataService.idl" bodystart="57" bodyend="108"/>
    <listofallmembers>
      <member refid="interfacesb_i_file_metadata_service_1233d09ea939b1d88be9b9955e20df728" prot="public" virt="non-virtual"><scope>sbIFileMetadataService</scope><name>read</name></member>
      <member refid="interfacesb_i_file_metadata_service_1c2860e5f203f727476b4ac83305d0f67" prot="public" virt="non-virtual"><scope>sbIFileMetadataService</scope><name>write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
