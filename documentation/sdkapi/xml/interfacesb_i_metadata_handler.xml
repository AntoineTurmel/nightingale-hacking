<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="interfacesb_i_metadata_handler" kind="interface" prot="public">
    <compoundname>sbIMetadataHandler</compoundname>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_metadata_handler_1e458a8ab0d74624ad43d7592c9fb548d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRInt32</type>
        <definition>PRInt32 sbIMetadataHandler::vote</definition>
        <argsstring>(in AString aUrl)</argsstring>
        <name>vote</name>
        <param>
          <type>in AString</type>
          <declname>aUrl</declname>
        </param>
        <briefdescription>
<para>Vote to be the handler returned for the given url. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="interfacesb_i_metadata_manager" kindref="compound">sbIMetadataManager</ref> will instantiate one of every <ref refid="interfacesb_i_metadata_handler" kindref="compound">sbIMetadataHandler</ref> subclass and ask it to vote on the given url. Whichever handler returns the highest vote will be used as the handler for the url.</para><para>Values less than zero cause that handler to be ignored.</para><para>At the moment, our handlers return -1, 0, or 1 (for &quot;no,&quot; &quot;maybe,&quot; and &quot;yes&quot;).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aUrl</parametername>
</parameternamelist>
<parameterdescription>
<para>The url upon which one should vote </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vote </para></simplesect>
<simplesect kind="see"><para><ref refid="interfacesb_i_metadata_manager" kindref="compound">sbIMetadataManager</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" line="97"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_metadata_handler_10e2be754f36f62a4984cb56576142ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMetadataHandler::supportedMIMETypes</definition>
        <argsstring>(out PRUint32 nMIMECount,[array, size_is(nMIMECount), retval] out wstring aMIMETypes)</argsstring>
        <name>supportedMIMETypes</name>
        <param>
          <type>out PRUint32</type>
          <declname>nMIMECount</declname>
        </param>
        <param>
          <attributes>[array, size_is(nMIMECount), retval]</attributes>
          <type>out wstring</type>
          <declname>aMIMETypes</declname>
        </param>
        <briefdescription>
<para>Get the mimetypes supported by this handler (probably DEPRECATED). </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000006"><xreftitle>Todo</xreftitle><xrefdescription><para>Make sure it&apos;s safe to deprecate these. Only the cores should need to return mimetype/extension info, I think. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nMIMECount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of mimetypes returned in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aMIMETypes</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of mimetypes supported by this handler </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" line="105"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_metadata_handler_17a6c8e683a208b6acae06a6ea4edd3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMetadataHandler::supportedFileExtensions</definition>
        <argsstring>(out PRUint32 nExtCount,[array, size_is(nExtCount), retval] out wstring aExts)</argsstring>
        <name>supportedFileExtensions</name>
        <param>
          <type>out PRUint32</type>
          <declname>nExtCount</declname>
        </param>
        <param>
          <attributes>[array, size_is(nExtCount), retval]</attributes>
          <type>out wstring</type>
          <declname>aExts</declname>
        </param>
        <briefdescription>
<para>Get the extensions supported by this handler (probably DEPRECATED). </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000007"><xreftitle>Todo</xreftitle><xrefdescription><para>Make sure it&apos;s safe to deprecate these. Only the cores should need to return mimetype/extension info, I think. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nExtCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of extensions returned in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aExts</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of extensions supported by this handler </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" line="113"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_metadata_handler_1089f9e2ab8e3494dc72dae7e937b0a56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRInt32</type>
        <definition>PRInt32 sbIMetadataHandler::read</definition>
        <argsstring>()</argsstring>
        <name>read</name>
        <briefdescription>
<para>Start the read operation. </para>        </briefdescription>
        <detaileddescription>
<para>After getting a handler from the <ref refid="interfacesb_i_metadata_manager" kindref="compound">sbIMetadataManager</ref>, the user code usually calls read upon it, immediately. The implementor may choose to handle the request immediately or asynchronously.</para><para><simplesect kind="return"><para>-1 if operating asynchronously, otherwise the number of metadata values read (0 on failure) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" line="124"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_metadata_handler_15ebeaf138cfa866b44ad8aceccd4174c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRInt32</type>
        <definition>PRInt32 sbIMetadataHandler::write</definition>
        <argsstring>()</argsstring>
        <name>write</name>
        <briefdescription>
<para>Start the write operation. </para>        </briefdescription>
        <detaileddescription>
<para>After getting a handler from the <ref refid="interfacesb_i_metadata_manager" kindref="compound">sbIMetadataManager</ref>, the user code may set an <ref refid="interfacesb_i_metadata_values" kindref="compound">sbIMetadataValues</ref> object into the handler and then call write to write the abstract metadata map into the specific metadata requirements of the file format supported by the handler.</para><para>Note that the number of items written may not always equal the number of items in the <ref refid="interfacesb_i_metadata_values" kindref="compound">sbIMetadataValues</ref> object if the underlying file format does not support the given keys.</para><para><xrefsect id="todo_1_todo000008"><xreftitle>Todo</xreftitle><xrefdescription><para>Make anything actually work with a write operation </para></xrefdescription></xrefsect><simplesect kind="return"><para>-1 if operating asynchronously, otherwise the number of metadata values written (0 on failure) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" line="141"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_metadata_handler_1420316e8648548ba5172a4c4544d7333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMetadataHandler::onChannelData</definition>
        <argsstring>(in nsISupports aChannel)</argsstring>
        <name>onChannelData</name>
        <param>
          <type>in nsISupports</type>
          <declname>aChannel</declname>
        </param>
        <briefdescription>
<para>Be thou informst that one&apos;s <ref refid="interfacesb_i_metadata_channel" kindref="compound">sbIMetadataChannel</ref> has just received data. </para>        </briefdescription>
        <detaileddescription>
<para>Every time the underlying nsIChannel dumps data on the <ref refid="interfacesb_i_metadata_channel" kindref="compound">sbIMetadataChannel</ref>, plus once more for when the nsIChannel reports a stop condition.</para><para>This is a chance for the handler code to attempt to parse the datastream.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aChannel</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="interfacesb_i_metadata_channel" kindref="compound">sbIMetadataChannel</ref> delivering data. You&apos;ll have to QI for it. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" line="153"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_metadata_handler_1761c2ace034fbc0f6e4ace75968b224a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMetadataHandler::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
<para>Close down the internals of the handler, stop any downloads, free any allocations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" line="158"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="interfacesb_i_metadata_handler_10d705e855c88cb318a6ecbf69d0ea546" prot="public" static="no" mutable="no">
        <type>attribute <ref refid="interfacesb_i_metadata_values" kindref="compound">sbIMetadataValues</ref></type>
        <definition>attribute sbIMetadataValues sbIMetadataHandler::values</definition>
        <argsstring></argsstring>
        <name>values</name>
        <briefdescription>
<para>The values object containing the metadata information. </para>        </briefdescription>
        <detaileddescription>
<para>When the handler has successfully completed its <ref refid="interfacesb_i_metadata_handler_1089f9e2ab8e3494dc72dae7e937b0a56" kindref="member">read()</ref> operation, the values attribute will be filled with the metadata from the url. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" line="53" bodyfile="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_metadata_handler_1978827eef884f62ce9da10d1344632a1" prot="public" static="no" mutable="no">
        <type>readonly attribute PRBool</type>
        <definition>readonly attribute PRBool sbIMetadataHandler::completed</definition>
        <argsstring></argsstring>
        <name>completed</name>
        <briefdescription>
<para>Whether or not the object has completed its <ref refid="interfacesb_i_metadata_handler_1089f9e2ab8e3494dc72dae7e937b0a56" kindref="member">read()</ref> operation. </para>        </briefdescription>
        <detaileddescription>
<para>This value is false until the handler completes its <ref refid="interfacesb_i_metadata_handler_1089f9e2ab8e3494dc72dae7e937b0a56" kindref="member">read()</ref> operation.</para><para>It is up to the implementor to determine if a <ref refid="interfacesb_i_metadata_handler_1089f9e2ab8e3494dc72dae7e937b0a56" kindref="member">read()</ref> call should operate asynchronously or by blocking. The user of the handler should not attempt to get the <ref refid="interfacesb_i_metadata_values" kindref="compound">sbIMetadataValues</ref> object before the <ref refid="interfacesb_i_metadata_handler_1089f9e2ab8e3494dc72dae7e937b0a56" kindref="member">read()</ref> is completed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" line="64" bodyfile="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_metadata_handler_18311aa7b7bc4102d02465b47ded3e7f3" prot="public" static="no" mutable="no">
        <type>attribute nsIChannel</type>
        <definition>attribute nsIChannel sbIMetadataHandler::channel</definition>
        <argsstring></argsstring>
        <name>channel</name>
        <briefdescription>
<para>The object&apos;s nsIChannel. </para>        </briefdescription>
        <detaileddescription>
<para>The object is assigned an nsIChannel from the <ref refid="interfacesb_i_metadata_manager" kindref="compound">sbIMetadataManager</ref> after it has successfully voted for an url. In the Read call, the implementor may choose to pull the url from the channel and use that directly, or open the channel (either itself or using an <ref refid="interfacesb_i_metadata_channel" kindref="compound">sbIMetadataChannel</ref> as a helper) and stream the data to be parsed.</para><para>In general, for local files, it is faster to pull the url and handle the metadata read immediately rather than open the channel. For remote files, it&apos;s far easier to just use the channel infrastructure already setup. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" line="79" bodyfile="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object capable of returning the metadata from the url to a file. </para>    </briefdescription>
    <detaileddescription>
<para>User code requests a handler by calling <ref refid="interfacesb_i_metadata_manager_1ae19d169e02736347d183bf89ae8ffa6" kindref="member">sbIMetadataManager::getHandlerForMediaURL</ref> that then returns one of these.</para><para><simplesect kind="see"><para><ref refid="interfacesb_i_metadata_manager" kindref="compound">sbIMetadataManager</ref> </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="320">
        <label>sbIMetadataHandler</label>
        <link refid="interfacesb_i_metadata_handler"/>
        <childnode refid="321" relation="usage">
          <edgelabel>values</edgelabel>
        </childnode>
      </node>
      <node id="321">
        <label>sbIMetadataValues</label>
        <link refid="interfacesb_i_metadata_values"/>
      </node>
    </collaborationgraph>
    <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" line="46" bodyfile="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataHandler.idl" bodystart="45" bodyend="159"/>
    <listofallmembers>
      <member refid="interfacesb_i_metadata_handler_18311aa7b7bc4102d02465b47ded3e7f3" prot="public" virt="non-virtual"><scope>sbIMetadataHandler</scope><name>channel</name></member>
      <member refid="interfacesb_i_metadata_handler_1761c2ace034fbc0f6e4ace75968b224a" prot="public" virt="non-virtual"><scope>sbIMetadataHandler</scope><name>close</name></member>
      <member refid="interfacesb_i_metadata_handler_1978827eef884f62ce9da10d1344632a1" prot="public" virt="non-virtual"><scope>sbIMetadataHandler</scope><name>completed</name></member>
      <member refid="interfacesb_i_metadata_handler_1420316e8648548ba5172a4c4544d7333" prot="public" virt="non-virtual"><scope>sbIMetadataHandler</scope><name>onChannelData</name></member>
      <member refid="interfacesb_i_metadata_handler_1089f9e2ab8e3494dc72dae7e937b0a56" prot="public" virt="non-virtual"><scope>sbIMetadataHandler</scope><name>read</name></member>
      <member refid="interfacesb_i_metadata_handler_17a6c8e683a208b6acae06a6ea4edd3b7" prot="public" virt="non-virtual"><scope>sbIMetadataHandler</scope><name>supportedFileExtensions</name></member>
      <member refid="interfacesb_i_metadata_handler_10e2be754f36f62a4984cb56576142ee4" prot="public" virt="non-virtual"><scope>sbIMetadataHandler</scope><name>supportedMIMETypes</name></member>
      <member refid="interfacesb_i_metadata_handler_10d705e855c88cb318a6ecbf69d0ea546" prot="public" virt="non-virtual"><scope>sbIMetadataHandler</scope><name>values</name></member>
      <member refid="interfacesb_i_metadata_handler_1e458a8ab0d74624ad43d7592c9fb548d" prot="public" virt="non-virtual"><scope>sbIMetadataHandler</scope><name>vote</name></member>
      <member refid="interfacesb_i_metadata_handler_15ebeaf138cfa866b44ad8aceccd4174c" prot="public" virt="non-virtual"><scope>sbIMetadataHandler</scope><name>write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
