<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="interfacesb_i_device_event_target" kind="interface" prot="public">
    <compoundname>sbIDeviceEventTarget</compoundname>
    <includes refid="sb_i_device_event_target_8idl" local="no">sbIDeviceEventTarget.idl</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_device_event_target_1d1a2b61726bb4d5928ff2e0b839bee54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>boolean sbIDeviceEventTarget::dispatchEvent</definition>
        <argsstring>(in sbIDeviceEvent aEvent,[optional] in PRBool aAsync)</argsstring>
        <name>dispatchEvent</name>
        <param>
          <type>in <ref refid="interfacesb_i_device_event" kindref="compound">sbIDeviceEvent</ref></type>
          <declname>aEvent</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in PRBool</type>
          <declname>aAsync</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dispatch a given event. The event will always be synchronously dispatched on the main (UI) thread.</para><para>An event may only be dispatched once; it may not be re-used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>the event to dispatch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSync</parametername>
</parameternamelist>
<parameterdescription>
<para>dispatch the event asynchronously (default false) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undefined if the event was dispatched asynchournously True if the event has been dispatched (false if no listeners) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/devices/base/public/sbIDeviceEventTarget.idl" line="50"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_device_event_target_10b98a373909bd311cacb6ec831011062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIDeviceEventTarget::addEventListener</definition>
        <argsstring>(in sbIDeviceEventListener aListener)</argsstring>
        <name>addEventListener</name>
        <param>
          <type>in <ref refid="interfacesb_i_device_event_listener" kindref="compound">sbIDeviceEventListener</ref></type>
          <declname>aListener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a event listener</para><para>If the event listener is added while an event is being dispatched, the new listener will not be triggered until the next event is dispatched. (This is true even if the new event is dispatched before the current listener finishes; the new listener will see any nested events.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/devices/base/public/sbIDeviceEventTarget.idl" line="60"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_device_event_target_194b22f4f570ec97a251dd31a1f44759d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIDeviceEventTarget::removeEventListener</definition>
        <argsstring>(in sbIDeviceEventListener aListener)</argsstring>
        <name>removeEventListener</name>
        <param>
          <type>in <ref refid="interfacesb_i_device_event_listener" kindref="compound">sbIDeviceEventListener</ref></type>
          <declname>aListener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a event listener</para><para>If an event is currently being dispatched, the listener will not be triggered for the event if it has not already done so. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/devices/base/public/sbIDeviceEventTarget.idl" line="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Implementations of this interface must be threadsafe. </para></simplesect>
</para>    </detaileddescription>
    <location file="c:/builds/songbird/trunk/components/devices/base/public/sbIDeviceEventTarget.idl" line="38" bodyfile="c:/builds/songbird/trunk/components/devices/base/public/sbIDeviceEventTarget.idl" bodystart="37" bodyend="69"/>
    <listofallmembers>
      <member refid="interfacesb_i_device_event_target_10b98a373909bd311cacb6ec831011062" prot="public" virt="non-virtual"><scope>sbIDeviceEventTarget</scope><name>addEventListener</name></member>
      <member refid="interfacesb_i_device_event_target_1d1a2b61726bb4d5928ff2e0b839bee54" prot="public" virt="non-virtual"><scope>sbIDeviceEventTarget</scope><name>dispatchEvent</name></member>
      <member refid="interfacesb_i_device_event_target_194b22f4f570ec97a251dd31a1f44759d" prot="public" virt="non-virtual"><scope>sbIDeviceEventTarget</scope><name>removeEventListener</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
