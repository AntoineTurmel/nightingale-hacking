<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="interfacesb_i_library_importer_listener" kind="interface" prot="public">
    <compoundname>sbILibraryImporterListener</compoundname>
    <includes refid="sb_i_library_importer_8idl" local="no">sbILibraryImporter.idl</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_library_importer_listener_1297c4a8756ad4009b3a8940970e1c3f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbILibraryImporterListener::onLibraryChanged</definition>
        <argsstring>(in AString aLibFilePath, in AString aGUID)</argsstring>
        <name>onLibraryChanged</name>
        <param>
          <type>in AString</type>
          <declname>aLibFilePath</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aGUID</declname>
        </param>
        <briefdescription>
<para>Handle library changed events. These events occur when the contents of the import library change. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLibFilePath</parametername>
</parameternamelist>
<parameterdescription>
<para>File path to external library that changed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aGUID</parametername>
</parameternamelist>
<parameterdescription>
<para>GUID of Songbird library into which external library was imported. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediaimport/library/base/public/sbILibraryImporter.idl" line="61"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_importer_listener_1ad53c8d805e27eac8111fa3fd1c73a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbILibraryImporterListener::onImportError</definition>
        <argsstring>()</argsstring>
        <name>onImportError</name>
        <briefdescription>
<para>Handle library import error events. These events occur whenever an error is encountered while importing a library. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediaimport/library/base/public/sbILibraryImporter.idl" line="69"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_importer_listener_1611be507822b138e7c8e7f6ccfc4234a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbILibraryImporterListener::onNonExistentMedia</definition>
        <argsstring>(in unsigned long aNonExistentMediaCount, in unsigned long aTrackCount)</argsstring>
        <name>onNonExistentMedia</name>
        <param>
          <type>in unsigned long</type>
          <declname>aNonExistentMediaCount</declname>
        </param>
        <param>
          <type>in unsigned long</type>
          <declname>aTrackCount</declname>
        </param>
        <briefdescription>
<para>Handle non-existent media events. These events occur whenever the media file for an imported track does not exist. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aNonExistentMediaCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of the number of non-existent track media files. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aTrackCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of the number of tracks. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediaimport/library/base/public/sbILibraryImporter.idl" line="83"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_importer_listener_1845d08a10e6de7067c0ebb33f71c8efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbILibraryImporterListener::onUnsupportedMedia</definition>
        <argsstring>()</argsstring>
        <name>onUnsupportedMedia</name>
        <briefdescription>
<para>Handle unsupported media events. These events occur whenever an attempt is made to import media that is not supported by Songbird. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediaimport/library/base/public/sbILibraryImporter.idl" line="91"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_importer_listener_16c3c7308cb3033d39d51d2a49f641d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbILibraryImporterListener::onDirtyPlaylist</definition>
        <argsstring>(in AString aPlaylistName, out boolean aApplyAll)</argsstring>
        <name>onDirtyPlaylist</name>
        <param>
          <type>in AString</type>
          <declname>aPlaylistName</declname>
        </param>
        <param>
          <type>out boolean</type>
          <declname>aApplyAll</declname>
        </param>
        <briefdescription>
<para>Handle dirty playlist events. These events occur when an imported library playlist has been modified in Songbird. This method returns the action to take, &quot;keep&quot; to keep the Songbird playlist unmodified, &quot;merge&quot; to merge the import library playlist into the Songbird playlist, and &quot;replace&quot; to replace the Songbird playlist. This method also returns whether to apply the action to all dirty playlists. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aPlaylistName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of dirty playlist. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aApplyAll</parametername>
</parameternamelist>
<parameterdescription>
<para>Apply action to all playlists. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Import action. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediaimport/library/base/public/sbILibraryImporter.idl" line="110"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface for listening to library importer events. </para>    </briefdescription>
    <detaileddescription>
<para>Implementors of this interface can listen to library importer events. </para>    </detaileddescription>
    <location file="c:/builds/songbird/trunk/components/mediaimport/library/base/public/sbILibraryImporter.idl" line="49" bodyfile="c:/builds/songbird/trunk/components/mediaimport/library/base/public/sbILibraryImporter.idl" bodystart="48" bodyend="111"/>
    <listofallmembers>
      <member refid="interfacesb_i_library_importer_listener_16c3c7308cb3033d39d51d2a49f641d07" prot="public" virt="non-virtual"><scope>sbILibraryImporterListener</scope><name>onDirtyPlaylist</name></member>
      <member refid="interfacesb_i_library_importer_listener_1ad53c8d805e27eac8111fa3fd1c73a24" prot="public" virt="non-virtual"><scope>sbILibraryImporterListener</scope><name>onImportError</name></member>
      <member refid="interfacesb_i_library_importer_listener_1297c4a8756ad4009b3a8940970e1c3f8" prot="public" virt="non-virtual"><scope>sbILibraryImporterListener</scope><name>onLibraryChanged</name></member>
      <member refid="interfacesb_i_library_importer_listener_1611be507822b138e7c8e7f6ccfc4234a" prot="public" virt="non-virtual"><scope>sbILibraryImporterListener</scope><name>onNonExistentMedia</name></member>
      <member refid="interfacesb_i_library_importer_listener_1845d08a10e6de7067c0ebb33f71c8efc" prot="public" virt="non-virtual"><scope>sbILibraryImporterListener</scope><name>onUnsupportedMedia</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
