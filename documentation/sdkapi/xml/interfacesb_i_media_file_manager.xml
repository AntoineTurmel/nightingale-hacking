<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="interfacesb_i_media_file_manager" kind="interface" prot="public">
    <compoundname>sbIMediaFileManager</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="interfacesb_i_media_file_manager_1796cb945d9209547503f0b2437825e9d" prot="public" static="no" mutable="no">
        <type>const unsigned short</type>
        <definition>const unsigned short sbIMediaFileManager::MANAGE_RENAME</definition>
        <argsstring></argsstring>
        <name>MANAGE_RENAME</name>
        <initializer> 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Organization Flags: MANAGE_RENAME - This renames a file so that it matches the metadata of the item, the rename will only happen if the item is located in or will be located in the Managed Folder. MANAGE_DELETE - This deletes an items file if it is located in the Managed Folder. MANAGE_COPY - This will copy an items file into the Managed Folder. MANAGE_MOVE - This will move a file into a sub folder in the Managed Folder based on the items metadata, the move will only happen if the item is located in or will be located in the Managed Folder.</para><para>Example modes: MANAGE_RENAME | MANAGE_MOVE - This will move and rename a file if it is located in the Managed Folder based on the items metadata. example: /ManagedFolder/Artist/Album/## - Title.ext MANAGE_COPY - This will only copy the file into the Managed Folder, it will not move or rename it based on the items metadata. MANAGE_RENAME | MANAGE_MOVE | MANAGE_COPY - This will copy, move and rename the items file into the Managed Folder based on the items metadata. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediamanager/public/sbIMediaFileManager.idl" line="73" bodyfile="c:/builds/songbird/trunk/components/mediamanager/public/sbIMediaFileManager.idl" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_media_file_manager_1aa316ddef503a073c622a91a49cf4d8c" prot="public" static="no" mutable="no">
        <type>const unsigned short</type>
        <definition>const unsigned short sbIMediaFileManager::MANAGE_DELETE</definition>
        <argsstring></argsstring>
        <name>MANAGE_DELETE</name>
        <initializer> 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediamanager/public/sbIMediaFileManager.idl" line="76" bodyfile="c:/builds/songbird/trunk/components/mediamanager/public/sbIMediaFileManager.idl" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_media_file_manager_16e294d428b9e6be81fbdd0bc6921f070" prot="public" static="no" mutable="no">
        <type>const unsigned short</type>
        <definition>const unsigned short sbIMediaFileManager::MANAGE_COPY</definition>
        <argsstring></argsstring>
        <name>MANAGE_COPY</name>
        <initializer> 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediamanager/public/sbIMediaFileManager.idl" line="79" bodyfile="c:/builds/songbird/trunk/components/mediamanager/public/sbIMediaFileManager.idl" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_media_file_manager_1e8a7344d457496d9984e0579a908e58f" prot="public" static="no" mutable="no">
        <type>const unsigned short</type>
        <definition>const unsigned short sbIMediaFileManager::MANAGE_MOVE</definition>
        <argsstring></argsstring>
        <name>MANAGE_MOVE</name>
        <initializer> 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediamanager/public/sbIMediaFileManager.idl" line="82" bodyfile="c:/builds/songbird/trunk/components/mediamanager/public/sbIMediaFileManager.idl" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_media_file_manager_1ff1c4db162c882b492ee4396ade3a7d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaFileManager::init</definition>
        <argsstring>([optional] in nsIPropertyBag2 aProperties)</argsstring>
        <name>init</name>
        <param>
          <attributes>[optional]</attributes>
          <type>in nsIPropertyBag2</type>
          <declname>aProperties</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the media file manager instance For all optional arguments, defaults are taken from the prefs <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[optional]</parametername>
</parameternamelist>
<parameterdescription>
<para>aProperties properties to use in place of prefs known key/value pairs: &quot;media-folder&quot;: (nsIFile) the folder to organize things into &quot;file-format&quot;: (ACString) the formatting string to use for the leaf name &quot;dir-format&quot;: (ACString) the formatting string to use for the path &quot;manage-mode&quot;: (PRUint32) the MANAGE_* constants </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediamanager/public/sbIMediaFileManager.idl" line="47"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_file_manager_1df27d89260dc79b19c57d0d5ce4e1a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>boolean sbIMediaFileManager::organizeItem</definition>
        <argsstring>(in sbIMediaItem aMediaItem, in unsigned short aManageType,[optional] in nsIFile aForceTargetFile)</argsstring>
        <name>organizeItem</name>
        <param>
          <type>in <ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref></type>
          <declname>aMediaItem</declname>
        </param>
        <param>
          <type>in unsigned short</type>
          <declname>aManageType</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in nsIFile</type>
          <declname>aForceTargetFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Organize an item in the media library folder</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aMediaItem</parametername>
</parameternamelist>
<parameterdescription>
<para>the item to organize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aManageType</parametername>
</parameternamelist>
<parameterdescription>
<para>the actions to take (see flags above) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aForceTargetFile</parametername>
</parameternamelist>
<parameterdescription>
<para>if given, force the target file to be based on this path, ignoring the properties on the item itself </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediamanager/public/sbIMediaFileManager.idl" line="94"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_file_manager_159f752b1c3ac679f6d5070b3c1ac7295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsIFile</type>
        <definition>nsIFile sbIMediaFileManager::getManagedPath</definition>
        <argsstring>(in sbIMediaItem aItem, in unsigned short aManageType)</argsstring>
        <name>getManagedPath</name>
        <param>
          <type>in <ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref></type>
          <declname>aItem</declname>
        </param>
        <param>
          <type>in unsigned short</type>
          <declname>aManageType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the path the item would be organized to if we were to do it</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aMediaItem</parametername>
</parameternamelist>
<parameterdescription>
<para>- the media item we will organize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aManageType</parametername>
</parameternamelist>
<parameterdescription>
<para>- the actions to take (see flags above) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resulting path </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediamanager/public/sbIMediaFileManager.idl" line="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="c:/builds/songbird/trunk/components/mediamanager/public/sbIMediaFileManager.idl" line="36" bodyfile="c:/builds/songbird/trunk/components/mediamanager/public/sbIMediaFileManager.idl" bodystart="35" bodyend="104"/>
    <listofallmembers>
      <member refid="interfacesb_i_media_file_manager_159f752b1c3ac679f6d5070b3c1ac7295" prot="public" virt="non-virtual"><scope>sbIMediaFileManager</scope><name>getManagedPath</name></member>
      <member refid="interfacesb_i_media_file_manager_1ff1c4db162c882b492ee4396ade3a7d6" prot="public" virt="non-virtual"><scope>sbIMediaFileManager</scope><name>init</name></member>
      <member refid="interfacesb_i_media_file_manager_16e294d428b9e6be81fbdd0bc6921f070" prot="public" virt="non-virtual"><scope>sbIMediaFileManager</scope><name>MANAGE_COPY</name></member>
      <member refid="interfacesb_i_media_file_manager_1aa316ddef503a073c622a91a49cf4d8c" prot="public" virt="non-virtual"><scope>sbIMediaFileManager</scope><name>MANAGE_DELETE</name></member>
      <member refid="interfacesb_i_media_file_manager_1e8a7344d457496d9984e0579a908e58f" prot="public" virt="non-virtual"><scope>sbIMediaFileManager</scope><name>MANAGE_MOVE</name></member>
      <member refid="interfacesb_i_media_file_manager_1796cb945d9209547503f0b2437825e9d" prot="public" virt="non-virtual"><scope>sbIMediaFileManager</scope><name>MANAGE_RENAME</name></member>
      <member refid="interfacesb_i_media_file_manager_1df27d89260dc79b19c57d0d5ce4e1a30" prot="public" virt="non-virtual"><scope>sbIMediaFileManager</scope><name>organizeItem</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
