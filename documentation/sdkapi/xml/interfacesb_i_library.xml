<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="interfacesb_i_library" kind="interface" prot="public">
    <compoundname>sbILibrary</compoundname>
    <basecompoundref refid="interfacesb_i_media_list" prot="public" virt="non-virtual">sbIMediaList</basecompoundref>
    <derivedcompoundref refid="interfacesb_i_device_library" prot="public" virt="non-virtual">sbIDeviceLibrary</derivedcompoundref>
    <includes refid="sb_i_library_8idl" local="no">sbILibrary.idl</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="interfacesb_i_library_1219c7f4ce3a62c36c374df24cb267d61" prot="public" static="no" mutable="no">
        <type>readonly attribute <ref refid="interfacesb_i_device" kindref="compound">sbIDevice</ref></type>
        <definition>readonly attribute sbIDevice sbILibrary::device</definition>
        <argsstring></argsstring>
        <name>device</name>
        <briefdescription>
<para>Reference to the device that this library is stored on. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="87" bodyfile="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_library_124498844eb5629b212440b0b1db0cd17" prot="public" static="no" mutable="no">
        <type>readonly attribute boolean</type>
        <definition>readonly attribute boolean sbILibrary::supportsForeignMediaItems</definition>
        <argsstring></argsstring>
        <name>supportsForeignMediaItems</name>
        <briefdescription>
<para>Declares if this library will host foreign media items. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="92" bodyfile="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_library_1283d3a82ec0021cfc02928330bd99cac" prot="public" static="no" mutable="no">
        <type>readonly attribute nsIPropertyBag2</type>
        <definition>readonly attribute nsIPropertyBag2 sbILibrary::creationParameters</definition>
        <argsstring></argsstring>
        <name>creationParameters</name>
        <briefdescription>
<para>Holds the parameters with which this library was created. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="97" bodyfile="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_library_1106f95a78294350f4def9d57d4c6df4a" prot="public" static="no" mutable="no">
        <type>readonly attribute <ref refid="interfacesb_i_library_factory" kindref="compound">sbILibraryFactory</ref></type>
        <definition>readonly attribute sbILibraryFactory sbILibrary::factory</definition>
        <argsstring></argsstring>
        <name>factory</name>
        <briefdescription>
<para>Holds the factory that created this library. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="102" bodyfile="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_library_17554ccb1c5ea11775ce4d38160492041" prot="public" static="no" mutable="no">
        <type>readonly attribute nsIStringEnumerator</type>
        <definition>readonly attribute nsIStringEnumerator sbILibrary::mediaListTypes</definition>
        <argsstring></argsstring>
        <name>mediaListTypes</name>
        <briefdescription>
<para>A list of available media list types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="187" bodyfile="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" bodystart="187" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_library_1bc37a369815fbf2f1174658ce0ec5f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsIChannel</type>
        <definition>nsIChannel sbILibrary::resolve</definition>
        <argsstring>(in nsIURI aUri)</argsstring>
        <name>resolve</name>
        <param>
          <type>in nsIURI</type>
          <declname>aUri</declname>
        </param>
        <briefdescription>
<para>Resolves a songbird schemed URL to a channel. Throws an exception if the item referenced in the URL is not found. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aUri</parametername>
</parameternamelist>
<parameterdescription>
<para>The nsIURI to a media item to resolve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An open channel to the content of the referenced media item </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="110"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_1a9fe98d3fedb5e8dd8ed597829b8ce56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref></type>
        <definition>sbIMediaItem sbILibrary::createMediaItem</definition>
        <argsstring>(in nsIURI aContentUri,[optional] in sbIPropertyArray aProperties,[optional] in boolean aAllowDuplicates)</argsstring>
        <name>createMediaItem</name>
        <param>
          <type>in nsIURI</type>
          <declname>aContentUri</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in <ref refid="interfacesb_i_property_array" kindref="compound">sbIPropertyArray</ref></type>
          <declname>aProperties</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in boolean</type>
          <declname>aAllowDuplicates</declname>
        </param>
        <briefdescription>
<para>Creates a new media item  aContentUri The URI pointing to the content of the new media item. Use <ref refid="interfacesb_i_library_utils_1fcd83765a77624bf3be65322495ab208" kindref="member">sbILibraryUtils.getContentURI</ref> or getFileContentURI to produce library content URI&apos;s. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aProperties</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional initial properties for this new item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aAllowDuplicates</parametername>
</parameternamelist>
<parameterdescription>
<para>If false, an attempt to create a new media item with a content URI that already exists in the library will simply return the existing item rather than creating a new one. If true, a new media item will be created with the specified content URI regardless if it is a duplicate. The default is false. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new, persisted media item </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="127"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_142f596caaed1cd39f4db42edc819f9c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>boolean sbILibrary::createMediaItemIfNotExist</definition>
        <argsstring>(in nsIURI aContentUri,[optional] in sbIPropertyArray aProperties,[optional] out sbIMediaItem aResultItem)</argsstring>
        <name>createMediaItemIfNotExist</name>
        <param>
          <type>in nsIURI</type>
          <declname>aContentUri</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in <ref refid="interfacesb_i_property_array" kindref="compound">sbIPropertyArray</ref></type>
          <declname>aProperties</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>out <ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref></type>
          <declname>aResultItem</declname>
        </param>
        <briefdescription>
<para>Create a new media item, disallowing duplicates, and return if it did. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[optional]</parametername>
</parameternamelist>
<parameterdescription>
<para>aResultItem the item that was created (or found) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether a new media item was created </para></simplesect>
<simplesect kind="see"><para><ref refid="interfacesb_i_library_1a9fe98d3fedb5e8dd8ed597829b8ce56" kindref="member">createMediaItem</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="137"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_162f2e88db6d62e1778ee96fbffc7dd1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_media_list" kindref="compound">sbIMediaList</ref></type>
        <definition>sbIMediaList sbILibrary::createMediaList</definition>
        <argsstring>(in AString aType,[optional] in sbIPropertyArray aProperties)</argsstring>
        <name>createMediaList</name>
        <param>
          <type>in AString</type>
          <declname>aType</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in <ref refid="interfacesb_i_property_array" kindref="compound">sbIPropertyArray</ref></type>
          <declname>aProperties</declname>
        </param>
        <briefdescription>
<para>Creates a new media list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aType</parametername>
</parameternamelist>
<parameterdescription>
<para>- The type of media list to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aProperties</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional initial properties for this new item</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new media list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="148"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_12d06325f48acd0eb7bd1d3da8d51dda5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_media_list" kindref="compound">sbIMediaList</ref></type>
        <definition>sbIMediaList sbILibrary::copyMediaList</definition>
        <argsstring>(in AString aType, in sbIMediaList aSource)</argsstring>
        <name>copyMediaList</name>
        <param>
          <type>in AString</type>
          <declname>aType</declname>
        </param>
        <param>
          <type>in <ref refid="interfacesb_i_media_list" kindref="compound">sbIMediaList</ref></type>
          <declname>aSource</declname>
        </param>
        <briefdescription>
<para>Creates a new media list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aType</parametername>
</parameternamelist>
<parameterdescription>
<para>- The type of media list to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSource</parametername>
</parameternamelist>
<parameterdescription>
<para>- A media list whose items and properties are to be copied.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new media list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="159"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_18618c5edb57160383e123241856a181d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref></type>
        <definition>sbIMediaItem sbILibrary::getMediaItem</definition>
        <argsstring>(in AString aGuid)</argsstring>
        <name>getMediaItem</name>
        <param>
          <type>in AString</type>
          <declname>aGuid</declname>
        </param>
        <briefdescription>
<para>Get a media item. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aGuid</parametername>
</parameternamelist>
<parameterdescription>
<para>Guid of media item to get </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The requested media item </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="166"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_1c32c418bb3e15bb67250a836aba063c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref></type>
        <definition>sbIMediaItem sbILibrary::getDuplicate</definition>
        <argsstring>(in sbIMediaItem aMediaItem)</argsstring>
        <name>getDuplicate</name>
        <param>
          <type>in <ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref></type>
          <declname>aMediaItem</declname>
        </param>
        <briefdescription>
<para>Search for and return a duplicate of the media item specified by aMediaItem. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aMediaItem</parametername>
</parameternamelist>
<parameterdescription>
<para>Media item for which to get duplicate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Duplicate media item or null if no duplicates. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="175"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_106128d059bd1a24fb499dadd4b8bea4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbILibrary::clearItems</definition>
        <argsstring>()</argsstring>
        <name>clearItems</name>
        <briefdescription>
<para>Clear all media items (excluding medialists) from the library. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If you wish to clear the entire library (including medialists) use <ref refid="interfacesb_i_media_list_15b727b02e89e57a15b7f78778722c4a6" kindref="member">clear()</ref> instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="182"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_1f87abee5d36302272e3d842af0bc9125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbILibrary::registerMediaListFactory</definition>
        <argsstring>(in sbIMediaListFactory aFactory)</argsstring>
        <name>registerMediaListFactory</name>
        <param>
          <type>in <ref refid="interfacesb_i_media_list_factory" kindref="compound">sbIMediaListFactory</ref></type>
          <declname>aFactory</declname>
        </param>
        <briefdescription>
<para>Register a new media list type at run time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aFactory</parametername>
</parameternamelist>
<parameterdescription>
<para>- The factory that will create the media list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="194"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_1103b68674687a92cdb798c8e481aa2f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbILibrary::optimize</definition>
        <argsstring>()</argsstring>
        <name>optimize</name>
        <briefdescription>
<para>Called when the library should remove unsupported media list types, unknown property types, temporary items, or otherwise optimize its performance or size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="209"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_104b2f426aecb73455a3b1245451f4af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbILibrary::flush</definition>
        <argsstring>()</argsstring>
        <name>flush</name>
        <briefdescription>
<para>Called when the library should save any cached data to disk. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="214"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_15d4add99176f0b5a9d03948d2f0eee3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsIArray</type>
        <definition>nsIArray sbILibrary::batchCreateMediaItems</definition>
        <argsstring>(in nsIArray aURIArray,[optional] in nsIArray aPropertyArrayArray,[optional] in boolean aAllowDuplicates)</argsstring>
        <name>batchCreateMediaItems</name>
        <param>
          <type>in nsIArray</type>
          <declname>aURIArray</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in nsIArray</type>
          <declname>aPropertyArrayArray</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in boolean</type>
          <declname>aAllowDuplicates</declname>
        </param>
        <briefdescription>
<para>Create many media items from a list of URIs, and notify their addition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aURIArray</parametername>
</parameternamelist>
<parameterdescription>
<para>nsIArray of nsIURI objects </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPropertyArrayArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional array of <ref refid="interfacesb_i_property_array" kindref="compound">sbIPropertyArray</ref>. If specified, the properties specified at each array index will be used in the creation of the new media item at the same array index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aAllowDuplicates</parametername>
</parameternamelist>
<parameterdescription>
<para>If false, URIs specified in aURIArray that already exist in the library will not be created and not returned. If true, media items will be created for all of the URIs specified regardless if they already exist. The default is false. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nsIArray of the new <ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref> objects </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="231"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_1e1f6bac067056817c98716f9192ad744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsIArray</type>
        <definition>nsIArray sbILibrary::batchCreateMediaItemsIfNotExist</definition>
        <argsstring>(in nsIArray aURIArray,[optional] in nsIArray aPropertyArrayArray,[optional] out nsIArray aResultItemArray)</argsstring>
        <name>batchCreateMediaItemsIfNotExist</name>
        <param>
          <type>in nsIArray</type>
          <declname>aURIArray</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in nsIArray</type>
          <declname>aPropertyArrayArray</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>out nsIArray</type>
          <declname>aResultItemArray</declname>
        </param>
        <briefdescription>
<para>Create many media items from a list of URIs, disallowing duplicates, and return which items were created. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aURIArray</parametername>
</parameternamelist>
<parameterdescription>
<para>nsIArray of nsIURI objects </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPropertyArrayArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional array of <ref refid="interfacesb_i_property_array" kindref="compound">sbIPropertyArray</ref>. If specified, the properties specified at each array index will be used in the creation of the new media item at the same array index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aResultItemArray</parametername>
</parameternamelist>
<parameterdescription>
<para>nsIArray of <ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref> objects that were created (or found). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nsIArray of nsIVariant objects of type VTYPE_BOOL indicating which items were newly created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="248"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_library_15236e2cf65e133dff8618b6196817a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbILibrary::batchCreateMediaItemsAsync</definition>
        <argsstring>(in sbIBatchCreateMediaItemsListener aListener, in nsIArray aURIArray,[optional] in nsIArray aPropertyArrayArray,[optional] in boolean aAllowDuplicates)</argsstring>
        <name>batchCreateMediaItemsAsync</name>
        <param>
          <type>in <ref refid="interfacesb_i_batch_create_media_items_listener" kindref="compound">sbIBatchCreateMediaItemsListener</ref></type>
          <declname>aListener</declname>
        </param>
        <param>
          <type>in nsIArray</type>
          <declname>aURIArray</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in nsIArray</type>
          <declname>aPropertyArrayArray</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in boolean</type>
          <declname>aAllowDuplicates</declname>
        </param>
        <briefdescription>
<para>Asychronously create many media items from a list of URIs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aListener</parametername>
</parameternamelist>
<parameterdescription>
<para>Listener to receive progress and complete notifications </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aURIArray</parametername>
</parameternamelist>
<parameterdescription>
<para>nsIArray of nsIURI objects </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPropertyArrayArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional array of <ref refid="interfacesb_i_property_array" kindref="compound">sbIPropertyArray</ref>. If specified, the properties specified at each array index will be used in the creation of the new media item at the same array index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aAllowDuplicates</parametername>
</parameternamelist>
<parameterdescription>
<para>If false, URIs specified in aURIArray that already exist in the library will not be created and not returned. If true, media items will be created for all of the URIs specified regardless if they already exist. The default is false. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="265"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Media library abstraction. </para>    </briefdescription>
    <detaileddescription>
<para>The library interface is the primary means of exposing media library data to Songbird. Implementors of this interface must also provide implementations of <ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref> and <ref refid="interfacesb_i_media_list" kindref="compound">sbIMediaList</ref>.</para><para><simplesect kind="see"><para><ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref>, <ref refid="interfacesb_i_media_list" kindref="compound">sbIMediaList</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="374">
        <label>sbIMediaList</label>
        <link refid="interfacesb_i_media_list"/>
        <childnode refid="375" relation="public-inheritance">
        </childnode>
      </node>
      <node id="373">
        <label>sbILibrary</label>
        <link refid="interfacesb_i_library"/>
        <childnode refid="374" relation="public-inheritance">
        </childnode>
      </node>
      <node id="376">
        <label>sbILibraryResource</label>
        <link refid="interfacesb_i_library_resource"/>
      </node>
      <node id="375">
        <label>sbIMediaItem</label>
        <link refid="interfacesb_i_media_item"/>
        <childnode refid="376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="377">
        <label>sbIDeviceLibrary</label>
        <link refid="interfacesb_i_device_library"/>
        <childnode refid="373" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="379">
        <label>sbIMediaList</label>
        <link refid="interfacesb_i_media_list"/>
        <childnode refid="380" relation="public-inheritance">
        </childnode>
      </node>
      <node id="385">
        <label>sbIDeviceStatus</label>
        <link refid="interfacesb_i_device_status"/>
        <childnode refid="380" relation="usage">
          <edgelabel>mediaItem</edgelabel>
        </childnode>
        <childnode refid="379" relation="usage">
          <edgelabel>mediaList</edgelabel>
        </childnode>
      </node>
      <node id="382">
        <label>sbIDevice</label>
        <link refid="interfacesb_i_device"/>
        <childnode refid="383" relation="usage">
          <edgelabel>content</edgelabel>
        </childnode>
        <childnode refid="385" relation="usage">
          <edgelabel>currentStatus</edgelabel>
        </childnode>
        <childnode refid="386" relation="usage">
          <edgelabel>properties</edgelabel>
        </childnode>
      </node>
      <node id="378">
        <label>sbILibrary</label>
        <link refid="interfacesb_i_library"/>
        <childnode refid="379" relation="public-inheritance">
        </childnode>
        <childnode refid="382" relation="usage">
          <edgelabel>device</edgelabel>
        </childnode>
        <childnode refid="384" relation="usage">
          <edgelabel>factory</edgelabel>
        </childnode>
      </node>
      <node id="381">
        <label>sbILibraryResource</label>
        <link refid="interfacesb_i_library_resource"/>
      </node>
      <node id="380">
        <label>sbIMediaItem</label>
        <link refid="interfacesb_i_media_item"/>
        <childnode refid="381" relation="public-inheritance">
        </childnode>
        <childnode refid="378" relation="usage">
          <edgelabel>library</edgelabel>
        </childnode>
      </node>
      <node id="383">
        <label>sbIDeviceContent</label>
        <link refid="interfacesb_i_device_content"/>
        <childnode refid="384" relation="usage">
          <edgelabel>libraryFactory</edgelabel>
        </childnode>
      </node>
      <node id="384">
        <label>sbILibraryFactory</label>
        <link refid="interfacesb_i_library_factory"/>
      </node>
      <node id="386">
        <label>sbIDeviceProperties</label>
        <link refid="interfacesb_i_device_properties"/>
      </node>
    </collaborationgraph>
    <location file="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" line="83" bodyfile="c:/builds/songbird/trunk/components/library/base/public/sbILibrary.idl" bodystart="82" bodyend="266"/>
    <listofallmembers>
      <member refid="interfacesb_i_media_list_16fe6be51b869ba4b97dc5274ab68813d" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>add</name></member>
      <member refid="interfacesb_i_media_list_1647f0790225f9e23f83db83da1718cb4" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>addAll</name></member>
      <member refid="interfacesb_i_media_list_1f8515c51ec7849141b2682696ebfb5de" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>addListener</name></member>
      <member refid="interfacesb_i_media_list_13437b5aa10efd05b309d9f71868057b7" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>addSome</name></member>
      <member refid="interfacesb_i_library_15d4add99176f0b5a9d03948d2f0eee3b" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>batchCreateMediaItems</name></member>
      <member refid="interfacesb_i_library_15236e2cf65e133dff8618b6196817a39" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>batchCreateMediaItemsAsync</name></member>
      <member refid="interfacesb_i_library_1e1f6bac067056817c98716f9192ad744" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>batchCreateMediaItemsIfNotExist</name></member>
      <member refid="interfacesb_i_media_list_15b727b02e89e57a15b7f78778722c4a6" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>clear</name></member>
      <member refid="interfacesb_i_library_106128d059bd1a24fb499dadd4b8bea4a" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>clearItems</name></member>
      <member refid="interfacesb_i_media_list_1cb4bbfe64589e3bd1d973632b39b3116" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>contains</name></member>
      <member refid="interfacesb_i_media_item_149d00fe6e35d8d24dc468b97d43d8075" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>contentLength</name></member>
      <member refid="interfacesb_i_media_item_1574db3949d138422afdbd6ecffd88aa2" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>contentSrc</name></member>
      <member refid="interfacesb_i_media_item_11df3ae03b08948558b1a311e3705db07" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>contentType</name></member>
      <member refid="interfacesb_i_library_12d06325f48acd0eb7bd1d3da8d51dda5" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>copyMediaList</name></member>
      <member refid="interfacesb_i_library_resource_162a515cdcadcae2da7861391abbb36e4" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>created</name></member>
      <member refid="interfacesb_i_library_1a9fe98d3fedb5e8dd8ed597829b8ce56" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>createMediaItem</name></member>
      <member refid="interfacesb_i_library_142f596caaed1cd39f4db42edc819f9c8" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>createMediaItemIfNotExist</name></member>
      <member refid="interfacesb_i_library_162f2e88db6d62e1778ee96fbffc7dd1c" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>createMediaList</name></member>
      <member refid="interfacesb_i_media_list_194596861a47fd029591cb920bdd1d1d0" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>createView</name></member>
      <member refid="interfacesb_i_library_1283d3a82ec0021cfc02928330bd99cac" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>creationParameters</name></member>
      <member refid="interfacesb_i_library_1219c7f4ce3a62c36c374df24cb267d61" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>device</name></member>
      <member refid="interfacesb_i_media_list_1ff2200a96847fd47d61dc63572cd48ce" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>enumerateAllItems</name></member>
      <member refid="interfacesb_i_media_list_1bb70c99d074eeaa0d17b2042824bf202" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>enumerateItemsByProperties</name></member>
      <member refid="interfacesb_i_media_list_11cc23df33dcd0af42d8aea4922c7aa78" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>enumerateItemsByProperty</name></member>
      <member refid="interfacesb_i_media_list_1c06c5fe198ada5d24ee62f7930038e1c" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>ENUMERATIONTYPE_LOCKING</name></member>
      <member refid="interfacesb_i_media_list_1ac5c344da31a52fc85cf7ed797cf1111" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>ENUMERATIONTYPE_SNAPSHOT</name></member>
      <member refid="interfacesb_i_library_resource_132061d667e86c05b22d3ee6d57e24001" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>equals</name></member>
      <member refid="interfacesb_i_library_1106f95a78294350f4def9d57d4c6df4a" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>factory</name></member>
      <member refid="interfacesb_i_library_104b2f426aecb73455a3b1245451f4af5" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>flush</name></member>
      <member refid="interfacesb_i_media_list_197a6fb8331dbd27cf9f53dbcd97681d2" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>getDistinctValuesForProperty</name></member>
      <member refid="interfacesb_i_library_1c32c418bb3e15bb67250a836aba063c0" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>getDuplicate</name></member>
      <member refid="interfacesb_i_media_list_16ab593212150bf9bf55b0a05207867a7" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>getItemByGuid</name></member>
      <member refid="interfacesb_i_media_list_12fd1e5e5bf2a9691bfde77a5a0eddd6a" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>getItemByIndex</name></member>
      <member refid="interfacesb_i_media_list_1b9d616412cdb0df6c7e1c793f8bd6e78" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>getItemsByProperties</name></member>
      <member refid="interfacesb_i_media_list_14937729ad5c31e326b306c3b9d28811a" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>getItemsByProperty</name></member>
      <member refid="interfacesb_i_library_18618c5edb57160383e123241856a181d" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>getMediaItem</name></member>
      <member refid="interfacesb_i_library_resource_191201a282a4020651d75455f2bbc963e" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>getProperties</name></member>
      <member refid="interfacesb_i_library_resource_188a79d69e6ad049697c4b54d69aa98e5" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>getProperty</name></member>
      <member refid="interfacesb_i_library_resource_1c97a2ea6d6aa52d2dfd74095895f74f6" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>guid</name></member>
      <member refid="interfacesb_i_media_list_13cc0eed8d4c3ac71ba2d805438c4adf6" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>indexOf</name></member>
      <member refid="interfacesb_i_media_list_1d022caf363793628e7ef1b96ccf67ea1" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>isEmpty</name></member>
      <member refid="interfacesb_i_media_item_1679ecac5135fd57929f83c0ea0c09eba" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>isMutable</name></member>
      <member refid="interfacesb_i_media_list_19edde98509df43db6a983d4937781d56" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>lastIndexOf</name></member>
      <member refid="interfacesb_i_media_list_150ecebf0fc3f329dab91244321638a0e" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>length</name></member>
      <member refid="interfacesb_i_media_item_119762d6d72170ace737a639575712ff1" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>library</name></member>
      <member refid="interfacesb_i_media_list_1cdecf4b09dd4e75a52e9be77d378e6f3" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>LISTENER_FLAGS_AFTERITEMREMOVED</name></member>
      <member refid="interfacesb_i_media_list_16e0542725b8ace2f19f7556d3192ed5f" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>LISTENER_FLAGS_ALL</name></member>
      <member refid="interfacesb_i_media_list_1c038790117b70fcca91a4a6f6c5a3f4b" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>LISTENER_FLAGS_BATCHBEGIN</name></member>
      <member refid="interfacesb_i_media_list_1536109c8e3dc6da8d732ad92a226337b" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>LISTENER_FLAGS_BATCHEND</name></member>
      <member refid="interfacesb_i_media_list_1ebd887a26980780de64ddf4af9cf430a" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>LISTENER_FLAGS_BEFOREITEMREMOVED</name></member>
      <member refid="interfacesb_i_media_list_19db5641f8058c3e4b81711df8cf3653a" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>LISTENER_FLAGS_BEFORELISTCLEARED</name></member>
      <member refid="interfacesb_i_media_list_1b34ff623969f79f3dab95304e42f34b3" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>LISTENER_FLAGS_ITEMADDED</name></member>
      <member refid="interfacesb_i_media_list_19900bddb359408a49158687dfcb6f20d" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>LISTENER_FLAGS_ITEMMOVED</name></member>
      <member refid="interfacesb_i_media_list_134e744de3ce3931f387c6ab405c3a968" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>LISTENER_FLAGS_ITEMUPDATED</name></member>
      <member refid="interfacesb_i_media_list_110cf8a4549906ace13097775e484c2b3" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>LISTENER_FLAGS_LISTCLEARED</name></member>
      <member refid="interfacesb_i_media_item_109426f490e2fde8aecf02c2bfada0a7a" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>mediaCreated</name></member>
      <member refid="interfacesb_i_library_17554ccb1c5ea11775ce4d38160492041" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>mediaListTypes</name></member>
      <member refid="interfacesb_i_media_item_1d8fc55899ebe6d777619b12e2ccec9e2" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>mediaUpdated</name></member>
      <member refid="interfacesb_i_media_list_1eb0a00c26bfd525c8b3543da57c516d1" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>name</name></member>
      <member refid="interfacesb_i_media_item_144f6159371d8779fea4a05ee75a54c8f" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>openInputStream</name></member>
      <member refid="interfacesb_i_media_item_1f9e5e1ec817d1cf04696332c2ee55f95" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>openInputStreamAsync</name></member>
      <member refid="interfacesb_i_media_item_15894f5aedd040fa0ed26cc578544d7d6" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>openOutputStream</name></member>
      <member refid="interfacesb_i_library_1103b68674687a92cdb798c8e481aa2f7" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>optimize</name></member>
      <member refid="interfacesb_i_library_resource_160d843bb58c9afaf665dd40ff16246d3" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>propertyIDs</name></member>
      <member refid="interfacesb_i_library_1f87abee5d36302272e3d842af0bc9125" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>registerMediaListFactory</name></member>
      <member refid="interfacesb_i_media_list_163e7e739718bd6d35016500933e5fc58" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>remove</name></member>
      <member refid="interfacesb_i_media_list_148c9653c3324dfe0a1dedb4b6307ea29" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>removeByIndex</name></member>
      <member refid="interfacesb_i_media_list_137a3275d1ea302a95b706a31413e3084" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>removeListener</name></member>
      <member refid="interfacesb_i_media_list_122c907e9dbc8abb40bd4f8e63e9b935d" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>removeSome</name></member>
      <member refid="interfacesb_i_library_1bc37a369815fbf2f1174658ce0ec5f98" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>resolve</name></member>
      <member refid="interfacesb_i_media_list_154a8cc70b3884a1fe8c8b5f38437b9c3" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>runInBatchMode</name></member>
      <member refid="interfacesb_i_library_resource_179625ea92faf0b5dfadc74c840b2525b" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>setProperties</name></member>
      <member refid="interfacesb_i_library_resource_17d26996d427fa332307d53a124f0fc46" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>setProperty</name></member>
      <member refid="interfacesb_i_library_124498844eb5629b212440b0b1db0cd17" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>supportsForeignMediaItems</name></member>
      <member refid="interfacesb_i_media_item_1febfa1e819a1155c461fb047cf4d0f5d" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>testIsAvailable</name></member>
      <member refid="interfacesb_i_media_item_1d14095f80e5f7f2d02cce741016088d2" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>toString</name></member>
      <member refid="interfacesb_i_media_list_1687bc602daf1ac786a7a0049b939c736" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>type</name></member>
      <member refid="interfacesb_i_library_resource_1377285cd148468c9550954df62ecad13" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>updated</name></member>
      <member refid="interfacesb_i_library_resource_1faa01b7805181fabba68fd9a721e7d3d" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>userEditable</name></member>
      <member refid="interfacesb_i_media_list_1d79e1478f69e0d8ba8bed29364d5fb13" prot="public" virt="non-virtual"><scope>sbILibrary</scope><name>userEditableContent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
