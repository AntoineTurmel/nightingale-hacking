<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="interfacesb_i_metadata_job_manager" kind="interface" prot="public">
    <compoundname>sbIMetadataJobManager</compoundname>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_metadata_job_manager_19f265fad62cd8cc309f4a86c89d410d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_metadata_job" kindref="compound">sbIMetadataJob</ref></type>
        <definition>sbIMetadataJob sbIMetadataJobManager::newJob</definition>
        <argsstring>(in nsIArray aMediaItemsArray, in unsigned long aSleepMS,[optional] in unsigned short aJobType)</argsstring>
        <name>newJob</name>
        <param>
          <type>in nsIArray</type>
          <declname>aMediaItemsArray</declname>
        </param>
        <param>
          <type>in unsigned long</type>
          <declname>aSleepMS</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in unsigned short</type>
          <declname>aJobType</declname>
        </param>
        <briefdescription>
<para>Start a new metadata processing task for the given array of media items. </para>        </briefdescription>
        <detaileddescription>
<para>This method will launch a new metadata task and return the task object for monitoring.</para><para>You can construct the required array like so: <verbatim>
      var toScan = Components.classes[&quot;@songbirdnest.com/moz/xpcom/threadsafe-array;1&quot;]
        .createInstance(Components.interfaces.nsIMutableArray);

      for (var i = 0; i &lt; 100; i++)
        toScan.appendElement(myMediaItems[i], false);

      var myJob = theMetadataJobManager.newJob(toScan);
</verbatim></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aMediaItemsArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array filled with media items to be scanned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSleepMS</parametername>
</parameternamelist>
<parameterdescription>
<para>How much of an interval/sleep per loop in and out of thread. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aJobType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="interfacesb_i_metadata_job_156029ad63489ec9ed96a7fffa6194ae0" kindref="member">sbIMetadataJob.JOBTYPE_READ</ref> or <ref refid="interfacesb_i_metadata_job_1b3491c19711d1a2849bdeecec95909e6" kindref="member">sbIMetadataJob.JOBTYPE_WRITE</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
TODO: Consider changing aSleepMS to an priority enum. Callers shouldn&apos;t have to care about sleep time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/mediacore/metadata/manager/public/sbIMetadataJobManager.idl" line="82"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Coordinates batch metadata read/write jobs. </para>    </briefdescription>
    <detaileddescription>
<para>Supports the creation of threaded read/write jobs for local media (URIs beginning with <ulink url="file://">file://</ulink>), and timer driven read jobs for remote media.</para><para>An nsIArray of <ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref> are passed to this interface to begin a metadata task. An <ref refid="interfacesb_i_metadata_job" kindref="compound">sbIMetadataJob</ref> element will be returned to the calling interface.</para><para>The Metadata Job Manager is a service and should be called via do_GetService. Because it relies upon starting timers into the main thread, <ref refid="interfacesb_i_metadata_job_manager_19f265fad62cd8cc309f4a86c89d410d1" kindref="member">newJob()</ref> may only be called from the main thread.</para><para><simplesect kind="see"><para><ref refid="interfacesb_i_library" kindref="compound">sbILibrary</ref>, <ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref>, <ref refid="interfacesb_i_metadata_job" kindref="compound">sbIMetadataJob</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="c:/builds/songbird/trunk/components/mediacore/metadata/manager/public/sbIMetadataJobManager.idl" line="55" bodyfile="c:/builds/songbird/trunk/components/mediacore/metadata/manager/public/sbIMetadataJobManager.idl" bodystart="54" bodyend="83"/>
    <listofallmembers>
      <member refid="interfacesb_i_metadata_job_manager_19f265fad62cd8cc309f4a86c89d410d1" prot="public" virt="non-virtual"><scope>sbIMetadataJobManager</scope><name>newJob</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
