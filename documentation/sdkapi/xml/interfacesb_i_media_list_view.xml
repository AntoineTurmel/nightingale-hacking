<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="interfacesb_i_media_list_view" kind="interface" prot="public">
    <compoundname>sbIMediaListView</compoundname>
    <includes refid="sb_i_media_list_view_8idl" local="no">sbIMediaListView.idl</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="interfacesb_i_media_list_view_10c728825b5bc85265d000a68d22d56a9" prot="public" static="no" mutable="no">
        <type>readonly attribute <ref refid="interfacesb_i_media_list" kindref="compound">sbIMediaList</ref></type>
        <definition>readonly attribute sbIMediaList sbIMediaListView::mediaList</definition>
        <argsstring></argsstring>
        <name>mediaList</name>
        <briefdescription>
<para>The media list this view is on. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="94" bodyfile="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_media_list_view_1667647b9de49e09c0ff49680a1167811" prot="public" static="no" mutable="no">
        <type>readonly attribute unsigned long</type>
        <definition>readonly attribute unsigned long sbIMediaListView::length</definition>
        <argsstring></argsstring>
        <name>length</name>
        <briefdescription>
<para>Returns the length of filtered view of this list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="99" bodyfile="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_media_list_view_1ff6a1e3d67d58ff5a00dfe486efb5305" prot="public" static="no" mutable="no">
        <type>readonly attribute nsITreeView</type>
        <definition>readonly attribute nsITreeView sbIMediaListView::treeView</definition>
        <argsstring></argsstring>
        <name>treeView</name>
        <briefdescription>
<para>Get a treeview that will display this media list view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="104" bodyfile="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_media_list_view_1c8b1eafe724ee791059510c9fdeb8b24" prot="public" static="no" mutable="no">
        <type>readonly attribute <ref refid="interfacesb_i_cascade_filter_set" kindref="compound">sbICascadeFilterSet</ref></type>
        <definition>readonly attribute sbICascadeFilterSet sbIMediaListView::cascadeFilterSet</definition>
        <argsstring></argsstring>
        <name>cascadeFilterSet</name>
        <briefdescription>
<para>Get the cascade filter set for this media list view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="109" bodyfile="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_media_list_view_1fb1ed8f2da0b28b41be435d0f6c51c12" prot="public" static="no" mutable="no">
        <type>readonly attribute <ref refid="interfacesb_i_media_list_view_selection" kindref="compound">sbIMediaListViewSelection</ref></type>
        <definition>readonly attribute sbIMediaListViewSelection sbIMediaListView::selection</definition>
        <argsstring></argsstring>
        <name>selection</name>
        <briefdescription>
<para>Get the selection for the view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="212" bodyfile="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_media_list_view_1845aa28b17e2eab43b1ea8b08811d247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref></type>
        <definition>sbIMediaItem sbIMediaListView::getItemByIndex</definition>
        <argsstring>(in unsigned long aIndex)</argsstring>
        <name>getItemByIndex</name>
        <param>
          <type>in unsigned long</type>
          <declname>aIndex</declname>
        </param>
        <briefdescription>
<para>Get a media item in the filtered view of this list by index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Filtered index of the media item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Media item with the requested index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="116"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_list_view_1e0d9cde9e14c0b162f746122c8b88632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long sbIMediaListView::getIndexForItem</definition>
        <argsstring>(in sbIMediaItem aMediaItem)</argsstring>
        <name>getIndexForItem</name>
        <param>
          <type>in <ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref></type>
          <declname>aMediaItem</declname>
        </param>
        <briefdescription>
<para>Searches the view for the first occurrence of the specified media item and returns the index where it was found. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aMediaItem</parametername>
</parameternamelist>
<parameterdescription>
<para>Media item to search for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index where the media item was found </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>NS_ERROR_NOT_AVAILABLE</parametername>
</parameternamelist>
<parameterdescription>
<para>if the media item is not in the view </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="125"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_list_view_17c335bf3d146657c98337f79a476eef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long sbIMediaListView::getUnfilteredIndex</definition>
        <argsstring>(in unsigned long aIndex)</argsstring>
        <name>getUnfilteredIndex</name>
        <param>
          <type>in unsigned long</type>
          <declname>aIndex</declname>
        </param>
        <briefdescription>
<para>Given an index of an item in the filtered list, get the index of the same item in the unfiltered list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Filtered index of the media item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of the same item in the unfiltered list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="133"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_list_view_1ef081e769938e55da2a7d7651922d9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIMediaListView::getViewItemUIDForIndex</definition>
        <argsstring>(in unsigned long aIndex)</argsstring>
        <name>getViewItemUIDForIndex</name>
        <param>
          <type>in unsigned long</type>
          <declname>aIndex</declname>
        </param>
        <briefdescription>
<para>Returns an opaque identifier that uniquely identifies the media item at a given position. This identifier can be used later to find the same media item after this view&apos;s filter and sort has been changed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Filtered index of the media item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Opaque identifier of specified media item </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="143"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_list_view_1fa7d01d0813d145a01b4763d2e8065bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long sbIMediaListView::getIndexForViewItemUID</definition>
        <argsstring>(in AString aViewItemUID)</argsstring>
        <name>getIndexForViewItemUID</name>
        <param>
          <type>in AString</type>
          <declname>aViewItemUID</declname>
        </param>
        <briefdescription>
<para>Given an opaque identifier returned by getViewItemUIDForIndex, return the index of the media item it identifies. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aViewItemUID</parametername>
</parameternamelist>
<parameterdescription>
<para>The opaque identifier returned by getViewItemUIDForIndex </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of media item the identifer identifies. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="152"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_list_view_1c6c7cdf19023b7038b1e1cda883008cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsIStringEnumerator</type>
        <definition>nsIStringEnumerator sbIMediaListView::getDistinctValuesForProperty</definition>
        <argsstring>(in AString aPropertyID)</argsstring>
        <name>getDistinctValuesForProperty</name>
        <param>
          <type>in AString</type>
          <declname>aPropertyID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="159"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_list_view_148af8a8f54219b72f876c72b86b6abf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_media_list_view" kindref="compound">sbIMediaListView</ref></type>
        <definition>sbIMediaListView sbIMediaListView::clone</definition>
        <argsstring>()</argsstring>
        <name>clone</name>
        <briefdescription>
<para>Create a clone of this view. This will return a copy with the same search, filter, sort, and cascade filter set as the original. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A clone of the media list view </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="166"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_list_view_1b5977daa0e5a454727f4ddf42e5525da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_media_list_view_state" kindref="compound">sbIMediaListViewState</ref></type>
        <definition>sbIMediaListViewState sbIMediaListView::getState</definition>
        <argsstring>()</argsstring>
        <name>getState</name>
        <briefdescription>
<para>Returns a snapshot of the current state of this view. Can later be used to restore the state by passing the returned object as an argument to sbIMediaList::CreateView(). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The state of this media list view </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="174"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_list_view_197dba92eca2e3eeed5b202d02063ea08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaListView::addListener</definition>
        <argsstring>(in sbIMediaListViewListener aListener,[optional] in boolean aOwnsWeak)</argsstring>
        <name>addListener</name>
        <param>
          <type>in <ref refid="interfacesb_i_media_list_view_listener" kindref="compound">sbIMediaListViewListener</ref></type>
          <declname>aListener</declname>
        </param>
        <param>
          <attributes>[optional]</attributes>
          <type>in boolean</type>
          <declname>aOwnsWeak</declname>
        </param>
        <briefdescription>
<para>Add a listener to this view to be notified of changes to filter configuration, search, and sort configuration. </para>        </briefdescription>
        <detaileddescription>
<para>Calling addListener twice with the same listener and weak setting will be ignored. Calling twice with the same listener but different weak settings will cause two references to be stored, one weak and one strong.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aListener</parametername>
</parameternamelist>
<parameterdescription>
<para>The listener instance. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aOwnsWeak</parametername>
</parameternamelist>
<parameterdescription>
<para>[optional] Whether or not to hold a weak reference to the listener. If aOwnsWeak is true then aListener must be able to QI to nsISupportsWeakReference. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interfacesb_i_media_list_view_listener" kindref="compound">sbIMediaListViewListener</ref> </para><para>nsISupportsWeakReference </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="192"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_list_view_15e1b82d0a1890358c5cbd75d625cdd08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaListView::removeListener</definition>
        <argsstring>(in sbIMediaListViewListener aListener)</argsstring>
        <name>removeListener</name>
        <param>
          <type>in <ref refid="interfacesb_i_media_list_view_listener" kindref="compound">sbIMediaListViewListener</ref></type>
          <declname>aListener</declname>
        </param>
        <briefdescription>
<para>Remove a listener from the view. </para>        </briefdescription>
        <detaileddescription>
<para>Calling removeListener with a listener that has not been previously added with addListener is a no-op.</para><para>Calling removeListener with a listener that had both a weak and a strong reference stored (via two calls to addListener with different values for aOwnsWeak) will cause the weak listener to be removed first. A second call to removeListener is necessary to remove the strong reference.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aListener</parametername>
</parameternamelist>
<parameterdescription>
<para>The listener instance to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="207"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_list_view_112208ca9fb7dc450225df7dc709ae281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaListView::removeSelectedMediaItems</definition>
        <argsstring>()</argsstring>
        <name>removeSelectedMediaItems</name>
        <briefdescription>
<para>Remove selected items from the view&apos;s media list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="217"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A distinct view on a given media list. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ref refid="interfacesb_i_media_list" kindref="compound">sbIMediaList</ref> </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="745">
        <label>sbIMediaList</label>
        <link refid="interfacesb_i_media_list"/>
        <childnode refid="746" relation="public-inheritance">
        </childnode>
      </node>
      <node id="744">
        <label>sbIMediaListView</label>
        <link refid="interfacesb_i_media_list_view"/>
        <childnode refid="745" relation="usage">
          <edgelabel>mediaList</edgelabel>
        </childnode>
        <childnode refid="754" relation="usage">
          <edgelabel>selection</edgelabel>
        </childnode>
        <childnode refid="755" relation="usage">
          <edgelabel>cascadeFilterSet</edgelabel>
        </childnode>
      </node>
      <node id="754">
        <label>sbIMediaListViewSelection</label>
        <link refid="interfacesb_i_media_list_view_selection"/>
        <childnode refid="746" relation="usage">
          <edgelabel>currentMediaItem</edgelabel>
        </childnode>
      </node>
      <node id="752">
        <label>sbIDeviceStatus</label>
        <link refid="interfacesb_i_device_status"/>
        <childnode refid="746" relation="usage">
          <edgelabel>mediaItem</edgelabel>
        </childnode>
        <childnode refid="745" relation="usage">
          <edgelabel>mediaList</edgelabel>
        </childnode>
      </node>
      <node id="749">
        <label>sbIDevice</label>
        <link refid="interfacesb_i_device"/>
        <childnode refid="750" relation="usage">
          <edgelabel>content</edgelabel>
        </childnode>
        <childnode refid="752" relation="usage">
          <edgelabel>currentStatus</edgelabel>
        </childnode>
        <childnode refid="753" relation="usage">
          <edgelabel>properties</edgelabel>
        </childnode>
      </node>
      <node id="748">
        <label>sbILibrary</label>
        <link refid="interfacesb_i_library"/>
        <childnode refid="745" relation="public-inheritance">
        </childnode>
        <childnode refid="749" relation="usage">
          <edgelabel>device</edgelabel>
        </childnode>
        <childnode refid="751" relation="usage">
          <edgelabel>factory</edgelabel>
        </childnode>
      </node>
      <node id="755">
        <label>sbICascadeFilterSet</label>
        <link refid="interfacesb_i_cascade_filter_set"/>
      </node>
      <node id="747">
        <label>sbILibraryResource</label>
        <link refid="interfacesb_i_library_resource"/>
      </node>
      <node id="746">
        <label>sbIMediaItem</label>
        <link refid="interfacesb_i_media_item"/>
        <childnode refid="747" relation="public-inheritance">
        </childnode>
        <childnode refid="748" relation="usage">
          <edgelabel>library</edgelabel>
        </childnode>
      </node>
      <node id="750">
        <label>sbIDeviceContent</label>
        <link refid="interfacesb_i_device_content"/>
        <childnode refid="751" relation="usage">
          <edgelabel>libraryFactory</edgelabel>
        </childnode>
      </node>
      <node id="751">
        <label>sbILibraryFactory</label>
        <link refid="interfacesb_i_library_factory"/>
      </node>
      <node id="753">
        <label>sbIDeviceProperties</label>
        <link refid="interfacesb_i_device_properties"/>
      </node>
    </collaborationgraph>
    <location file="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" line="90" bodyfile="c:/builds/songbird/trunk/components/library/base/public/sbIMediaListView.idl" bodystart="89" bodyend="218"/>
    <listofallmembers>
      <member refid="interfacesb_i_media_list_view_197dba92eca2e3eeed5b202d02063ea08" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>addListener</name></member>
      <member refid="interfacesb_i_media_list_view_1c8b1eafe724ee791059510c9fdeb8b24" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>cascadeFilterSet</name></member>
      <member refid="interfacesb_i_media_list_view_148af8a8f54219b72f876c72b86b6abf9" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>clone</name></member>
      <member refid="interfacesb_i_media_list_view_1c6c7cdf19023b7038b1e1cda883008cd" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>getDistinctValuesForProperty</name></member>
      <member refid="interfacesb_i_media_list_view_1e0d9cde9e14c0b162f746122c8b88632" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>getIndexForItem</name></member>
      <member refid="interfacesb_i_media_list_view_1fa7d01d0813d145a01b4763d2e8065bc" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>getIndexForViewItemUID</name></member>
      <member refid="interfacesb_i_media_list_view_1845aa28b17e2eab43b1ea8b08811d247" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>getItemByIndex</name></member>
      <member refid="interfacesb_i_media_list_view_1b5977daa0e5a454727f4ddf42e5525da" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>getState</name></member>
      <member refid="interfacesb_i_media_list_view_17c335bf3d146657c98337f79a476eef0" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>getUnfilteredIndex</name></member>
      <member refid="interfacesb_i_media_list_view_1ef081e769938e55da2a7d7651922d9f1" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>getViewItemUIDForIndex</name></member>
      <member refid="interfacesb_i_media_list_view_1667647b9de49e09c0ff49680a1167811" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>length</name></member>
      <member refid="interfacesb_i_media_list_view_10c728825b5bc85265d000a68d22d56a9" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>mediaList</name></member>
      <member refid="interfacesb_i_media_list_view_15e1b82d0a1890358c5cbd75d625cdd08" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>removeListener</name></member>
      <member refid="interfacesb_i_media_list_view_112208ca9fb7dc450225df7dc709ae281" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>removeSelectedMediaItems</name></member>
      <member refid="interfacesb_i_media_list_view_1fb1ed8f2da0b28b41be435d0f6c51c12" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>selection</name></member>
      <member refid="interfacesb_i_media_list_view_1ff6a1e3d67d58ff5a00dfe486efb5305" prot="public" virt="non-virtual"><scope>sbIMediaListView</scope><name>treeView</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
