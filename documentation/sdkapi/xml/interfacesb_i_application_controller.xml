<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="interfacesb_i_application_controller" kind="interface" prot="public">
    <compoundname>sbIApplicationController</compoundname>
    <includes refid="sb_i_application_controller_8idl" local="no">sbIApplicationController.idl</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="interfacesb_i_application_controller_177c6d55500371bc29e36acbddc7bf19b" prot="public" static="no" mutable="no">
        <type>readonly attribute nsIDOMWindow</type>
        <definition>readonly attribute nsIDOMWindow sbIApplicationController::activeWindow</definition>
        <argsstring></argsstring>
        <name>activeWindow</name>
        <briefdescription>
<para>The current active window. The current active window, regardless of category. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/controller/public/sbIApplicationController.idl" line="64" bodyfile="c:/builds/songbird/trunk/components/controller/public/sbIApplicationController.idl" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="interfacesb_i_application_controller_138d4418a2635bb4af53878fc12f91229" prot="public" static="no" mutable="no">
        <type>readonly attribute nsIDOMWindow</type>
        <definition>readonly attribute nsIDOMWindow sbIApplicationController::activeMainWindow</definition>
        <argsstring></argsstring>
        <name>activeMainWindow</name>
        <briefdescription>
<para>The current active Songbird window The current active window of type Songbird:Main. Usually the primary Songbird window, with playback controls, playlist display panes, etc. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/controller/public/sbIApplicationController.idl" line="72" bodyfile="c:/builds/songbird/trunk/components/controller/public/sbIApplicationController.idl" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_application_controller_1f0bf267bd45094dd2284d8105392ed97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIApplicationController::playDefault</definition>
        <argsstring>()</argsstring>
        <name>playDefault</name>
        <briefdescription>
<para>Begin playback using whatever UI context is available. </para>        </briefdescription>
        <detaileddescription>
<para>Used to initiate playback when what to play is not clear. Will try to delegate playback to the UI, and match user expectations. If the open windows are unable to determine what should be played, the first track in the main library will be selected.</para><para>This method should be used as a fallback when no context is available to callers.</para><para>This method may be removed once we have a standard way to broadcast application wide events. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c:/builds/songbird/trunk/components/controller/public/sbIApplicationController.idl" line="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Global root controller for the Songbird application. </para>    </briefdescription>
    <detaileddescription>
<para>This service represents the global instance of the Songbird application.</para><para>One day the implementation of this interface will be responsible for bringing up the main window and generally managing application lifecycle.</para><para>The interface may also be exposed as a replacement for / addition to FUEL&apos;s Application object, and offer accessors for other global Songbird objects. For example, we may eventually have accessors like Application.songbird.mediacoreManager.playbackControl.</para><para>Other future functionality may include:<itemizedlist>
<listitem><para>quit();</para></listitem><listitem><para>openMainWindow();</para></listitem></itemizedlist>
</para>    </detaileddescription>
    <location file="c:/builds/songbird/trunk/components/controller/public/sbIApplicationController.idl" line="58" bodyfile="c:/builds/songbird/trunk/components/controller/public/sbIApplicationController.idl" bodystart="57" bodyend="90"/>
    <listofallmembers>
      <member refid="interfacesb_i_application_controller_138d4418a2635bb4af53878fc12f91229" prot="public" virt="non-virtual"><scope>sbIApplicationController</scope><name>activeMainWindow</name></member>
      <member refid="interfacesb_i_application_controller_177c6d55500371bc29e36acbddc7bf19b" prot="public" virt="non-virtual"><scope>sbIApplicationController</scope><name>activeWindow</name></member>
      <member refid="interfacesb_i_application_controller_1f0bf267bd45094dd2284d8105392ed97" prot="public" virt="non-virtual"><scope>sbIApplicationController</scope><name>playDefault</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
