<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="interfacesb_i_media_page_manager" kind="interface" prot="public">
    <compoundname>sbIMediaPageManager</compoundname>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_media_page_manager_1b0da2b8351dacdffa79b8af35bc5cbc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_media_page_info" kindref="compound">sbIMediaPageInfo</ref></type>
        <definition>sbIMediaPageInfo sbIMediaPageManager::registerPage</definition>
        <argsstring>(in AString aName, in AString aURL, in sbIMediaListMatch aMatch)</argsstring>
        <name>registerPage</name>
        <param>
          <type>in AString</type>
          <declname>aName</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aURL</declname>
        </param>
        <param>
          <type>in <ref refid="interfacesb_i_media_list_match" kindref="compound">sbIMediaListMatch</ref></type>
          <declname>aMatch</declname>
        </param>
        <briefdescription>
<para>Register a medialist page. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aName</parametername>
</parameternamelist>
<parameterdescription>
<para>The localized name of the page </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aURL</parametername>
</parameternamelist>
<parameterdescription>
<para>The chrome URL to the page </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aMatch</parametername>
</parameternamelist>
<parameterdescription>
<para>The interface or js function used to determine whether this page matches a particular medialist </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An sbMediaListIPageInfo interface describing the page </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="z:/projects/songbird/components/mediapages/public/sbIMediaPageManager.idl" line="50"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_page_manager_1ee5875014d322d175a339af793dc7470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaPageManager::unregisterPage</definition>
        <argsstring>(in sbIMediaPageInfo aPageInfo)</argsstring>
        <name>unregisterPage</name>
        <param>
          <type>in <ref refid="interfacesb_i_media_page_info" kindref="compound">sbIMediaPageInfo</ref></type>
          <declname>aPageInfo</declname>
        </param>
        <briefdescription>
<para>Unregister a medialist page. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aPageInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="interfacesb_i_media_page_info" kindref="compound">sbIMediaPageInfo</ref> interface as previously returned by registerPage </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="z:/projects/songbird/components/mediapages/public/sbIMediaPageManager.idl" line="57"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_page_manager_15869ba37f805051bbf09ccc5f7f83533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsISimpleEnumerator</type>
        <definition>nsISimpleEnumerator sbIMediaPageManager::getAvailablePages</definition>
        <argsstring>([optional] in sbIMediaList aList)</argsstring>
        <name>getAvailablePages</name>
        <param>
          <attributes>[optional]</attributes>
          <type>in <ref refid="interfacesb_i_media_list" kindref="compound">sbIMediaList</ref></type>
          <declname>aList</declname>
        </param>
        <briefdescription>
<para>Get the list of available pages. The list parameter is optional, if not specified, the entire list of registered pages is returned. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aList</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) The medialist for which the list of available matching pages is being requested </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An nsISimpleEnumerator containing a list of <ref refid="interfacesb_i_media_page_info" kindref="compound">sbIMediaPageInfo</ref> interfaces </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="z:/projects/songbird/components/mediapages/public/sbIMediaPageManager.idl" line="66"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_page_manager_17b5bf3bf48c088d0f6a618ec326548c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_media_page_info" kindref="compound">sbIMediaPageInfo</ref></type>
        <definition>sbIMediaPageInfo sbIMediaPageManager::getPage</definition>
        <argsstring>(in sbIMediaList aList)</argsstring>
        <name>getPage</name>
        <param>
          <type>in <ref refid="interfacesb_i_media_list" kindref="compound">sbIMediaList</ref></type>
          <declname>aList</declname>
        </param>
        <briefdescription>
<para>Get the active page for a medialist. </para>        </briefdescription>
        <detaileddescription>
<para>Pages are matched in the order of registration, that is, if several pages match a particular medialist, the first one to have been registered is returned.</para><para>If a page has been set to a medialist via the setPage method, the search for a matching list is bypassed, and that page is returned again, unless it no longer exists or no longer matches the medialist.</para><para>If a medialist has a defaultMediaPageURL property set to a particular page, and has not been set to a different one via the setPage method, the search is also bypassed, and that page is returned, unless it no longer exists or no longer matches the medialist.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aList</parametername>
</parameternamelist>
<parameterdescription>
<para>The medialist for which the active page is being requested </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="z:/projects/songbird/components/mediapages/public/sbIMediaPageManager.idl" line="86"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_page_manager_19ec7b0a91b3a5c7fafa3466cd1e693a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaPageManager::setPage</definition>
        <argsstring>(in sbIMediaList aList, in sbIMediaPageInfo aPageInfo)</argsstring>
        <name>setPage</name>
        <param>
          <type>in <ref refid="interfacesb_i_media_list" kindref="compound">sbIMediaList</ref></type>
          <declname>aList</declname>
        </param>
        <param>
          <type>in <ref refid="interfacesb_i_media_page_info" kindref="compound">sbIMediaPageInfo</ref></type>
          <declname>aPageInfo</declname>
        </param>
        <briefdescription>
<para>Set the active page for a medialist. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aList</parametername>
</parameternamelist>
<parameterdescription>
<para>The medialist for which the page is being set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPageInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>The page that is being set to the medialist </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="z:/projects/songbird/components/mediapages/public/sbIMediaPageManager.idl" line="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The medialist page manager, used to register, unregister, enumerate, set and retrieve page/medialists associations. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="z:/projects/songbird/components/mediapages/public/sbIMediaPageManager.idl" line="41" bodyfile="z:/projects/songbird/components/mediapages/public/sbIMediaPageManager.idl" bodystart="40" bodyend="95"/>
    <listofallmembers>
      <member refid="interfacesb_i_media_page_manager_15869ba37f805051bbf09ccc5f7f83533" prot="public" virt="non-virtual"><scope>sbIMediaPageManager</scope><name>getAvailablePages</name></member>
      <member refid="interfacesb_i_media_page_manager_17b5bf3bf48c088d0f6a618ec326548c2" prot="public" virt="non-virtual"><scope>sbIMediaPageManager</scope><name>getPage</name></member>
      <member refid="interfacesb_i_media_page_manager_1b0da2b8351dacdffa79b8af35bc5cbc0" prot="public" virt="non-virtual"><scope>sbIMediaPageManager</scope><name>registerPage</name></member>
      <member refid="interfacesb_i_media_page_manager_19ec7b0a91b3a5c7fafa3466cd1e693a0" prot="public" virt="non-virtual"><scope>sbIMediaPageManager</scope><name>setPage</name></member>
      <member refid="interfacesb_i_media_page_manager_1ee5875014d322d175a339af793dc7470" prot="public" virt="non-virtual"><scope>sbIMediaPageManager</scope><name>unregisterPage</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
