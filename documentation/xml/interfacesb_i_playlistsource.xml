<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="interfacesb_i_playlistsource" kind="interface" prot="public">
    <compoundname>sbIPlaylistsource</compoundname>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_playlistsource_12efc10bd0627bf5525ea01f1a7762e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRBool</type>
        <definition>PRBool sbIPlaylistsource::refExists</definition>
        <argsstring>(in AString aRefName)</argsstring>
        <name>refExists</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <briefdescription>
<para>Determine whether or not a ref value is already loaded in the system. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True, if the ref exists in the system. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="371"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_17cba66906dfa84b51d53cbfc2ab281ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistsource::feedPlaylist</definition>
        <argsstring>(in AString aRefName, in AString aContextGUID, in AString aTableName)</argsstring>
        <name>feedPlaylist</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aContextGUID</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aTableName</declname>
        </param>
        <briefdescription>
<para>Prepare a database table to be made available to the UI as an RDFDataSource. </para>        </briefdescription>
        <detaileddescription>
<para>This method is called with the guid and table of a playlist and a string to be used as the ref=&quot;XXXXXX&quot; param for the tree. The string must begin with &quot;NC:&quot; (don&apos;t look at me, that&apos;s what moz demands).</para><para>The string passed to this method will then be used as a reference to the underlying data source in all the other methods on this interface.</para><para>The datasource is not actually published until <ref refid="interfacesb_i_playlistsource_1c6837b064124287a7d0593d3bcb54c3e" kindref="member">executeFeed()</ref> is called. This allows the coder to setup filters with <ref refid="interfacesb_i_playlistsource_172443689f82b47f25e78c777519e1e7f" kindref="member">setFilter()</ref> first.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aContextGUID</parametername>
</parameternamelist>
<parameterdescription>
<para>The database identifier string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aTableName</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist table name </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="391"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_151ab17e9aab86bd6df20f61197315334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistsource::clearPlaylist</definition>
        <argsstring>(in AString aRefName)</argsstring>
        <name>clearPlaylist</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <briefdescription>
<para>[DEPRECATED] </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="398"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1c6837b064124287a7d0593d3bcb54c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRInt32</type>
        <definition>PRInt32 sbIPlaylistsource::executeFeed</definition>
        <argsstring>(in AString aRefName)</argsstring>
        <name>executeFeed</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <briefdescription>
<para>Prepare and execute the SQL queries required for a datasource to make the playlist available to the UI. </para>        </briefdescription>
        <detaileddescription>
<para>After calling <ref refid="interfacesb_i_playlistsource_17cba66906dfa84b51d53cbfc2ab281ac" kindref="member">feedPlaylist()</ref> and optionally calling <ref refid="interfacesb_i_playlistsource_172443689f82b47f25e78c777519e1e7f" kindref="member">setFilter()</ref>, call this method to launch the SQL queries and present the data to whomever is observing the feed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="409"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_172443689f82b47f25e78c777519e1e7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistsource::setFilter</definition>
        <argsstring>(in AString aRefName, in PRInt32 aIndex, in AString aFilterString, in AString aFilterRefName, in AString aFilterColumn)</argsstring>
        <name>setFilter</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in PRInt32</type>
          <declname>aIndex</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aFilterString</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aFilterRefName</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aFilterColumn</declname>
        </param>
        <briefdescription>
<para>Set a filter to act upon a datasource. </para>        </briefdescription>
        <detaileddescription>
<para>This method is used to set or modify a filter on the datasource output.</para><para>A datasource may have a number of hierarchical column filters applied to it. These feed the filterlist elements in a library display.</para><para>Each filter creates its own datasource to feed a filterlist element, with its own unique FilterRefName (usually just the playlist RefName plus the FilterColumn string). It also must begin with &quot;NC:&quot; or it won&apos;t work.</para><para>The Index parameter specifies the hierarchy of the filters. Filters with lower indices will act upon the output of ones with higher indices. While any int values may be passed as indices, the <ref refid="interfacesb_i_playlistsource_167fab740f41a3f7942cb2faef2d5be05" kindref="member">getFilter()</ref> function must be called with that value to retrieve the filter. If they are not contiguous values, you cannot iterate them using <ref refid="interfacesb_i_playlistsource_19095aad2ed77a76875f9df9818a8f514" kindref="member">getNumFilters()</ref>.</para><para>The FilterString parameter is a semicolon delimited list of values that are matched via OR to the playlist itself. A blank string is analogous to the &quot;All&quot; selection in the filterlist element.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The hierarchical level of the filter to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aFilterString</parametername>
</parameternamelist>
<parameterdescription>
<para>A semicolon list of values to filter against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aFilterRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the filter datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aFilterColumn</parametername>
</parameternamelist>
<parameterdescription>
<para>The column name to filter against </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="439"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_19095aad2ed77a76875f9df9818a8f514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRInt32</type>
        <definition>PRInt32 sbIPlaylistsource::getNumFilters</definition>
        <argsstring>(in AString aRefName)</argsstring>
        <name>getNumFilters</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <briefdescription>
<para>Return the count of filters on a datasource. </para>        </briefdescription>
        <detaileddescription>
<para>This value can only be used for enumeration if <ref refid="interfacesb_i_playlistsource_172443689f82b47f25e78c777519e1e7f" kindref="member">setFilter()</ref> was properly called with its indices in order from 0</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="449"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1b1eb2bc05563de7808b101b1c78c31bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistsource::removeFilter</definition>
        <argsstring>(in AString aRefName, in PRInt32 aIndex)</argsstring>
        <name>removeFilter</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in PRInt32</type>
          <declname>aIndex</declname>
        </param>
        <briefdescription>
<para>Remove a filter (entirely) from a datasource. </para>        </briefdescription>
        <detaileddescription>
<para>This method entirely removes a filter from being bound to a playlist. Set aFilterString to blank (&quot;&quot;) if you want to make the filter have no current filtering value.</para><para>This value can only be used for enumeration if <ref refid="interfacesb_i_playlistsource_172443689f82b47f25e78c777519e1e7f" kindref="member">setFilter()</ref> was properly called with its indices in order from 0</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index value of the filter to be referenced </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interfacesb_i_playlistsource_172443689f82b47f25e78c777519e1e7f" kindref="member">setFilter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="465"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_167fab740f41a3f7942cb2faef2d5be05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIPlaylistsource::getFilter</definition>
        <argsstring>(in AString aRefName, in PRInt32 aIndex)</argsstring>
        <name>getFilter</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in PRInt32</type>
          <declname>aIndex</declname>
        </param>
        <briefdescription>
<para>Get the filter string from a datasource&apos;s filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index value of the filter to be referenced </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The filter string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="474"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_11281ef77d0adaa4232a8065c720799d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIPlaylistsource::getFilterColumn</definition>
        <argsstring>(in AString aRefName, in PRInt32 aIndex)</argsstring>
        <name>getFilterColumn</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in PRInt32</type>
          <declname>aIndex</declname>
        </param>
        <briefdescription>
<para>Get the filter column from a datasource&apos;s filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index value of the filter to be referenced </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The filter column string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="483"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1c33c099ede486f421d9594cc025e3fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIPlaylistsource::getFilterRef</definition>
        <argsstring>(in AString aRefName, in PRInt32 aIndex)</argsstring>
        <name>getFilterRef</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in PRInt32</type>
          <declname>aIndex</declname>
        </param>
        <briefdescription>
<para>Get the ref for the filter&apos;s published RDF datasource. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index value of the filter to be referenced </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The filter&apos;s ref string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="492"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_123e18fe37391d19aa14d26d79bc60ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistsource::setSearchString</definition>
        <argsstring>(in AString aRefName, in AString aSearchString, in PRBool aResetFilters)</argsstring>
        <name>setSearchString</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aSearchString</declname>
        </param>
        <param>
          <type>in PRBool</type>
          <declname>aResetFilters</declname>
        </param>
        <briefdescription>
<para>Set the search string on a datasource. </para>        </briefdescription>
        <detaileddescription>
<para>The syntax of the string should be a space-delimited list search terms. The results will only be items that match all the terms in displayed columns.</para><para>Pass a blank string to clear this value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSearchString</parametername>
</parameternamelist>
<parameterdescription>
<para>The string defining the search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aResetFilters</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, setting this string will also reset the filters. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="507"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_11b0ee23d3cfdeac9b4d4c215f7c734a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIPlaylistsource::getSearchString</definition>
        <argsstring>(in AString aRefName)</argsstring>
        <name>getSearchString</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <briefdescription>
<para>Get the search string on a datasource. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The search string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="515"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1a4fa7f75aefef1f288f0eeab4fe3a24d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistsource::setOrder</definition>
        <argsstring>(in AString aRefName, in AString aColumnName)</argsstring>
        <name>setOrder</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aColumnName</declname>
        </param>
        <briefdescription>
<para>Set the sort order on a datasource. </para>        </briefdescription>
        <detaileddescription>
<para>The sort order should be the name of an existing column. The results will be sorted using that column data</para><para>Pass a blank string to reset to a default order.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSearchString</parametername>
</parameternamelist>
<parameterdescription>
<para>The column name on which to perform sorting </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="528"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_124ea2cd356d53909be33da0de7f6d185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIPlaylistsource::getOrder</definition>
        <argsstring>(in AString aRefName)</argsstring>
        <name>getOrder</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <briefdescription>
<para>Get the sort order from a datasource. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The column on which sorting is being performed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="536"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_11d234687358c422ec6389e41781726fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIPlaylistsource::getRefGUID</definition>
        <argsstring>(in AString aRefName)</argsstring>
        <name>getRefGUID</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <briefdescription>
<para>Get the database guid string on a datasource. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The guid string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="544"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1d4992a81c2566d41f04111449d398c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIPlaylistsource::getRefTable</definition>
        <argsstring>(in AString aRefName)</argsstring>
        <name>getRefTable</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <briefdescription>
<para>Get the database table string on a datasource. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The table string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="552"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1557de9e5bf5b4762598ae09c5fdeec89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRInt32</type>
        <definition>PRInt32 sbIPlaylistsource::getRefRowCount</definition>
        <argsstring>(in AString aRefName)</argsstring>
        <name>getRefRowCount</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <briefdescription>
<para>Get the row count on a datasource. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The row count </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="560"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_18116add630302d287f0309e1ece0c874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRInt32</type>
        <definition>PRInt32 sbIPlaylistsource::getRefColumnCount</definition>
        <argsstring>(in AString aRefName)</argsstring>
        <name>getRefColumnCount</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <briefdescription>
<para>Get the column count on a datasource. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The column count </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="568"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1cbb07ee906cfeb6a1bfd846b92713c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIPlaylistsource::getRefRowCellByColumn</definition>
        <argsstring>(in AString aRefName, in PRInt32 aRow, in AString aColumn)</argsstring>
        <name>getRefRowCellByColumn</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in PRInt32</type>
          <declname>aRow</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aColumn</declname>
        </param>
        <briefdescription>
<para>Get the value of a cell on a datasource. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aRow</parametername>
</parameternamelist>
<parameterdescription>
<para>The row index of the cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aColumn</parametername>
</parameternamelist>
<parameterdescription>
<para>The column name of the cell </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cell value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="578"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_11a7c7584eb7e068731feeafedf35fdd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRInt32</type>
        <definition>PRInt32 sbIPlaylistsource::getRefRowByColumnValue</definition>
        <argsstring>(in AString aRefName, in AString aColumn, in AString aValue)</argsstring>
        <name>getRefRowByColumnValue</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aColumn</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aValue</declname>
        </param>
        <briefdescription>
<para>Calculate the row index of a cell based upon the value of a column. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aColumn</parametername>
</parameternamelist>
<parameterdescription>
<para>The column name of the cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to test against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The row index, or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="588"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_170f855d07d4b464586e13ddbf4c75df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIPlaylistsource::getRefColumnValueByRow</definition>
        <argsstring>(in AString aRefName, in AString aColumn, in PRUint32 aRow)</argsstring>
        <name>getRefColumnValueByRow</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aColumn</declname>
        </param>
        <param>
          <type>in PRUint32</type>
          <declname>aRow</declname>
        </param>
        <briefdescription>
<para>Extract the value of a column based on the cell row. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aColumn</parametername>
</parameternamelist>
<parameterdescription>
<para>The column name on which to get the value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aRow</parametername>
</parameternamelist>
<parameterdescription>
<para>The row for which to extract column values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value (or undefined if the row is invalid) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="598"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_12bc53c53868489b336756fefee80aeed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistsource::getRefRowsByColumnValues</definition>
        <argsstring>(in AString aRefName, in AString aColumn, in PRUint32 aValueCount,[array, size_is(aValueCount)] in wstring aValues, out PRUint32 aRowCount,[array, size_is(aRowCount), retval] out PRUint32 aRows)</argsstring>
        <name>getRefRowsByColumnValues</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aColumn</declname>
        </param>
        <param>
          <type>in PRUint32</type>
          <declname>aValueCount</declname>
        </param>
        <param>
          <attributes>[array, size_is(aValueCount)]</attributes>
          <type>in wstring</type>
          <declname>aValues</declname>
        </param>
        <param>
          <type>out PRUint32</type>
          <declname>aRowCount</declname>
        </param>
        <param>
          <attributes>[array, size_is(aRowCount), retval]</attributes>
          <type>out PRUint32</type>
          <declname>aRows</declname>
        </param>
        <briefdescription>
<para>Calculate the row indices of an array of cells based upon their values for a column. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aColumn</parametername>
</parameternamelist>
<parameterdescription>
<para>The column name on which to perform the search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aValueCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of values passed in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aValues</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of values to test against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aRowCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows returned in the array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The array of row indices (items for values that were not found are set to -1) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="610"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1dc448aa09ceff922b96b77c0417f4f3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistsource::getRefColumnValuesByRows</definition>
        <argsstring>(in AString aRefName, in AString aColumn, in PRUint32 aRowCount,[array, size_is(aRowCount)] in PRUint32 aRows, out PRUint32 aValueCount,[array, size_is(aValueCount), retval] out wstring aValues)</argsstring>
        <name>getRefColumnValuesByRows</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aColumn</declname>
        </param>
        <param>
          <type>in PRUint32</type>
          <declname>aRowCount</declname>
        </param>
        <param>
          <attributes>[array, size_is(aRowCount)]</attributes>
          <type>in PRUint32</type>
          <declname>aRows</declname>
        </param>
        <param>
          <type>out PRUint32</type>
          <declname>aValueCount</declname>
        </param>
        <param>
          <attributes>[array, size_is(aValueCount), retval]</attributes>
          <type>out wstring</type>
          <declname>aValues</declname>
        </param>
        <briefdescription>
<para>Extract the values of a column based on the rows for an array of cells. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aColumn</parametername>
</parameternamelist>
<parameterdescription>
<para>The column name on which to perform the extraction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aRowCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows passed in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aRows</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of rows for which to extract column values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aValueCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of values extracted and returned in the array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The array of values (items for rows that were invalid are set to undefined) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="622"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1b8b46852edde8982064c59af12001ea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRBool</type>
        <definition>PRBool sbIPlaylistsource::isQueryExecuting</definition>
        <argsstring>(in AString aRefName)</argsstring>
        <name>isQueryExecuting</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <briefdescription>
<para>Determine if a datasource is currently executing its internal queries. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True, if the query is executing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="630"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_13fc85b63625b392d2e7195a9ae2b39f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRInt32</type>
        <definition>PRInt32 sbIPlaylistsource::waitForQueryCompletion</definition>
        <argsstring>(in AString aRefName)</argsstring>
        <name>waitForQueryCompletion</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <briefdescription>
<para>Wait the main thread until the ref is completely updated. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The last error of the query </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="638"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1084b810650bc01feb3811e75a947ce08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistsource::forceGetTargets</definition>
        <argsstring>(in AString aRefName, in PRBool isPermanent)</argsstring>
        <name>forceGetTargets</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in PRBool</type>
          <declname>isPermanent</declname>
        </param>
        <briefdescription>
<para>Force the nsIRDFDataSource::GetTargets() method to be called. </para>        </briefdescription>
        <detaileddescription>
<para>At times, it may be convenient to feed a playlist, without actually displaying the playlist (for instance, <ref refid="interfacesb_i_playlist_playback" kindref="compound">sbIPlaylistPlayback</ref> operates upon datasources).</para><para>This method forces the internal RDF method called by the consumers of its data in RDF format, and properly constructs the internal structures necessary to properly query this interface for its information.</para><para><xrefsect id="todo_1_todo000021"><xreftitle>Todo</xreftitle><xrefdescription><para>I&apos;m pretty sure this is broken right now </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isPermanent</parametername>
</parameternamelist>
<parameterdescription>
<para>If True, preserve the forceGetTargets state. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="655"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1531d4eed56ba18c723b4cac47683fad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistsource::incomingObserver</definition>
        <argsstring>(in AString aRefName, in nsIDOMNode aObject)</argsstring>
        <name>incomingObserver</name>
        <param>
          <type>in AString</type>
          <declname>aRefName</declname>
        </param>
        <param>
          <type>in nsIDOMNode</type>
          <declname>aObject</declname>
        </param>
        <briefdescription>
<para>Hint to the interface that an observer is about to be attached. </para>        </briefdescription>
        <detaileddescription>
<para>Because the nsIRDFObserver interface does not include information about the observing object, this method may be called before setting the datasources and ref attributes on a xul element to scope updates to the element&apos;s observer to a particular RefName string.</para><para>If code does not call this method, the accepted observer will be told to update for all changes to all refs published by this object. That&apos;s probably ugly and definitely a performance drain.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aRefName</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the datasource </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aObject</parametername>
</parameternamelist>
<parameterdescription>
<para>The object acting as the observer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="672"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1d4573ffc4adc449ee8fd0fdf365a63b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistsource::registerPlaylistCommands</definition>
        <argsstring>(in AString aContextGUID, in AString aTableName, in AString aPlaylistType, in sbIPlaylistCommands aCommandObj)</argsstring>
        <name>registerPlaylistCommands</name>
        <param>
          <type>in AString</type>
          <declname>aContextGUID</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aTableName</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aPlaylistType</declname>
        </param>
        <param>
          <type>in <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref></type>
          <declname>aCommandObj</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> objects to be shown for specific playlists. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> interface is used to algorithmically define a set of commands to be rendered arbitrarily by a playlist ui object (currently, playlist.xml).</para><para>Commands can be registered for an entire database (by setting ContextGUID and leaving TableName null), or for any &quot;type&quot; characteristic.</para><para><xrefsect id="todo_1_todo000022"><xreftitle>Todo</xreftitle><xrefdescription><para>Currently, new registrations overwrite previous registrations. BAD. Make them save and return an array. Please don&apos;t overwrite our standard commands. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aContextGUID</parametername>
</parameternamelist>
<parameterdescription>
<para>The guid string for the database to register against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aTableName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the table to register against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPlaylistType</parametername>
</parameternamelist>
<parameterdescription>
<para>The arbitrary type string to register against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCommandObj</parametername>
</parameternamelist>
<parameterdescription>
<para>The command object instance to be used for these playlists </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref>, <ref refid="interfacesb_i_playlistsource_128b770cb0c0d34f16002b949e0f70bb2" kindref="member">unregisterPlaylistCommands</ref>, playlist.xml </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="691"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_128b770cb0c0d34f16002b949e0f70bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistsource::unregisterPlaylistCommands</definition>
        <argsstring>(in AString aContextGUID, in AString aTableName, in AString aPlaylistType, in sbIPlaylistCommands aCommandObj)</argsstring>
        <name>unregisterPlaylistCommands</name>
        <param>
          <type>in AString</type>
          <declname>aContextGUID</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aTableName</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aPlaylistType</declname>
        </param>
        <param>
          <type>in <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref></type>
          <declname>aCommandObj</declname>
        </param>
        <briefdescription>
<para>Unregister <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> that was previously registered. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aContextGUID</parametername>
</parameternamelist>
<parameterdescription>
<para>The guid that was used to register the sbIPlaylistCommand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aTableName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the table that was used to register the sbIPlaylistCommand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPlaylistType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type string that was used to register the sbIPlaylistCommand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCommandObj</parametername>
</parameternamelist>
<parameterdescription>
<para>The command object that was registered </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref>, <ref refid="interfacesb_i_playlistsource_1d4573ffc4adc449ee8fd0fdf365a63b6" kindref="member">registerPlaylistCommands</ref>, playlist.xml </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="702"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1e47fb9f63394b3a15d8aad27ab488164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsISimpleEnumerator</type>
        <definition>nsISimpleEnumerator sbIPlaylistsource::getPlaylistCommands</definition>
        <argsstring>(in AString aContextGUID, in AString aPlaylistType)</argsstring>
        <name>getPlaylistCommands</name>
        <param>
          <type>in AString</type>
          <declname>aContextGUID</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aPlaylistType</declname>
        </param>
        <briefdescription>
<para>Retrieve the <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> object to be shown for a specific playlist. </para>        </briefdescription>
        <detaileddescription>
<para>Given the guid, table, and type strings, return a duplicate instance of the <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> object registered.</para><para>The &quot;type&quot; string has precedence over the &quot;guid&quot;/&quot;table&quot; pair.</para><para>This method is only called by the playlist UI object, in playlist.xml</para><para><xrefsect id="todo_1_todo000023"><xreftitle>Todo</xreftitle><xrefdescription><para>Currently, new registrations overwrite previous registrations. BAD. Make them save and return an array. Please don&apos;t overwrite our standard commands. </para></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aContextGUID</parametername>
</parameternamelist>
<parameterdescription>
<para>The guid string for the playlist </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPlaylistType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the playlist </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A simple enumerator of newly duplicated command object instances to be used for this playlist </para></simplesect>
<simplesect kind="see"><para><ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref>, playlist.xml </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="720"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlistsource_1e621715726ddb2122b051b30ab32269c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIPlaylistsource::calculateRef</definition>
        <argsstring>(in AString aContextGUID, in AString aTableName)</argsstring>
        <name>calculateRef</name>
        <param>
          <type>in AString</type>
          <declname>aContextGUID</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aTableName</declname>
        </param>
        <briefdescription>
<para>Calculate the unique identifier for a playlist based on a guid and a table. </para>        </briefdescription>
        <detaileddescription>
<para>Given a guid and table, calculate the unique identifier of a playlist and return it.</para><para>This function should only be used for normal playlists</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aGuidContextGUID</parametername>
</parameternamelist>
<parameterdescription>
<para>The guid string for the playlist </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aTableName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the playlist </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The unique identifier for the playlist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="733"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The internal RDF Data Source that sends playlist data to the UI. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="interfacesb_i_playlistsource" kindref="compound">sbIPlaylistsource</ref> acts as the intermediary between the database table that represents a library or a playlist and the display of that info into a &lt;playlist&gt; UI element.</para><para>When a playlist element is told to bind to a specific database table, the playlist asks <ref refid="interfacesb_i_playlistsource" kindref="compound">sbIPlaylistsource</ref> to create a new RDF ref that can properly feed data to its internal xul tree (see: <ref refid="interfacesb_i_playlistsource_17cba66906dfa84b51d53cbfc2ab281ac" kindref="member">feedPlaylist()</ref>, <ref refid="interfacesb_i_playlistsource_1c6837b064124287a7d0593d3bcb54c3e" kindref="member">executeFeed()</ref>). A table may be fed and made available to this interface without involving a playlist element by calling <ref refid="interfacesb_i_playlistsource_1084b810650bc01feb3811e75a947ce08" kindref="member">forceGetTargets()</ref> for that RefName.</para><para>The RefName param passed to <ref refid="interfacesb_i_playlistsource_17cba66906dfa84b51d53cbfc2ab281ac" kindref="member">feedPlaylist()</ref> is used from then on to identify each specific source for further modification or information. If you would like to obtain specific information about the data currently displayed in a playlist object, use that object&apos;s .ref property as the RefName parameter to these methods.</para><para><ref refid="interfacesb_i_playlistsource" kindref="compound">sbIPlaylistsource</ref> provides methods to implement various modifications to the underlying SQL queries that drive the display of a playlist table. Filters may be specified that feed a dependent RDF source and are used by the &lt;filterlist&gt; UI element when displaying a standard libaray (see: <ref refid="interfacesb_i_playlistsource_172443689f82b47f25e78c777519e1e7f" kindref="member">setFilter()</ref>, <ref refid="interfacesb_i_playlistsource_19095aad2ed77a76875f9df9818a8f514" kindref="member">getNumFilters()</ref>, <ref refid="interfacesb_i_playlistsource_1b1eb2bc05563de7808b101b1c78c31bc" kindref="member">removeFilter()</ref>, <ref refid="interfacesb_i_playlistsource_167fab740f41a3f7942cb2faef2d5be05" kindref="member">getFilter()</ref>, <ref refid="interfacesb_i_playlistsource_1c33c099ede486f421d9594cc025e3fc2" kindref="member">getFilterRef()</ref>) and an override string may be specified to support a direct search feature (see: <ref refid="interfacesb_i_playlistsource_123e18fe37391d19aa14d26d79bc60ddf" kindref="member">setSearchString()</ref>, <ref refid="interfacesb_i_playlistsource_11b0ee23d3cfdeac9b4d4c215f7c734a5" kindref="member">getSearchString()</ref>).</para><para>This interface also allows direct access to the underlying data returned by the database, avoiding additional queries (see: <ref refid="interfacesb_i_playlistsource_1557de9e5bf5b4762598ae09c5fdeec89" kindref="member">getRefRowCount()</ref>, <ref refid="interfacesb_i_playlistsource_18116add630302d287f0309e1ece0c874" kindref="member">getRefColumnCount()</ref>, <ref refid="interfacesb_i_playlistsource_1cbb07ee906cfeb6a1bfd846b92713c69" kindref="member">getRefRowCellByColumn()</ref>, <ref refid="interfacesb_i_playlistsource_11a7c7584eb7e068731feeafedf35fdd3" kindref="member">getRefRowByColumnValue()</ref>) and can also return the table and guid of the query (see: <ref refid="interfacesb_i_playlistsource_11d234687358c422ec6389e41781726fd" kindref="member">getRefGUID()</ref>, <ref refid="interfacesb_i_playlistsource_1d4992a81c2566d41f04111449d398c03" kindref="member">getRefTable()</ref>).</para><para>Lastly, it acts as a centralized storehouse for <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> implementations. Registering a custom commands object into this interface will specify rules to be used to determine if those commands should be shown in any specific playlist element&apos;s display (see: <ref refid="interfacesb_i_playlistsource_1d4573ffc4adc449ee8fd0fdf365a63b6" kindref="member">registerPlaylistCommands()</ref>, <ref refid="interfacesb_i_playlistsource_1e47fb9f63394b3a15d8aad27ab488164" kindref="member">getPlaylistCommands()</ref>).</para><para><simplesect kind="see"><para>playlist.xml </para></simplesect>
</para>    </detaileddescription>
    <location file="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" line="364" bodyfile="C:/projects/songbird/components/playlistsource/public/sbIPlaylistsource.idl" bodystart="363" bodyend="734"/>
    <listofallmembers>
      <member refid="interfacesb_i_playlistsource_1e621715726ddb2122b051b30ab32269c" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>calculateRef</name></member>
      <member refid="interfacesb_i_playlistsource_151ab17e9aab86bd6df20f61197315334" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>clearPlaylist</name></member>
      <member refid="interfacesb_i_playlistsource_1c6837b064124287a7d0593d3bcb54c3e" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>executeFeed</name></member>
      <member refid="interfacesb_i_playlistsource_17cba66906dfa84b51d53cbfc2ab281ac" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>feedPlaylist</name></member>
      <member refid="interfacesb_i_playlistsource_1084b810650bc01feb3811e75a947ce08" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>forceGetTargets</name></member>
      <member refid="interfacesb_i_playlistsource_167fab740f41a3f7942cb2faef2d5be05" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getFilter</name></member>
      <member refid="interfacesb_i_playlistsource_11281ef77d0adaa4232a8065c720799d5" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getFilterColumn</name></member>
      <member refid="interfacesb_i_playlistsource_1c33c099ede486f421d9594cc025e3fc2" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getFilterRef</name></member>
      <member refid="interfacesb_i_playlistsource_19095aad2ed77a76875f9df9818a8f514" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getNumFilters</name></member>
      <member refid="interfacesb_i_playlistsource_124ea2cd356d53909be33da0de7f6d185" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getOrder</name></member>
      <member refid="interfacesb_i_playlistsource_1e47fb9f63394b3a15d8aad27ab488164" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getPlaylistCommands</name></member>
      <member refid="interfacesb_i_playlistsource_18116add630302d287f0309e1ece0c874" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getRefColumnCount</name></member>
      <member refid="interfacesb_i_playlistsource_170f855d07d4b464586e13ddbf4c75df2" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getRefColumnValueByRow</name></member>
      <member refid="interfacesb_i_playlistsource_1dc448aa09ceff922b96b77c0417f4f3b" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getRefColumnValuesByRows</name></member>
      <member refid="interfacesb_i_playlistsource_11d234687358c422ec6389e41781726fd" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getRefGUID</name></member>
      <member refid="interfacesb_i_playlistsource_11a7c7584eb7e068731feeafedf35fdd3" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getRefRowByColumnValue</name></member>
      <member refid="interfacesb_i_playlistsource_1cbb07ee906cfeb6a1bfd846b92713c69" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getRefRowCellByColumn</name></member>
      <member refid="interfacesb_i_playlistsource_1557de9e5bf5b4762598ae09c5fdeec89" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getRefRowCount</name></member>
      <member refid="interfacesb_i_playlistsource_12bc53c53868489b336756fefee80aeed" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getRefRowsByColumnValues</name></member>
      <member refid="interfacesb_i_playlistsource_1d4992a81c2566d41f04111449d398c03" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getRefTable</name></member>
      <member refid="interfacesb_i_playlistsource_11b0ee23d3cfdeac9b4d4c215f7c734a5" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>getSearchString</name></member>
      <member refid="interfacesb_i_playlistsource_1531d4eed56ba18c723b4cac47683fad6" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>incomingObserver</name></member>
      <member refid="interfacesb_i_playlistsource_1b8b46852edde8982064c59af12001ea0" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>isQueryExecuting</name></member>
      <member refid="interfacesb_i_playlistsource_12efc10bd0627bf5525ea01f1a7762e21" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>refExists</name></member>
      <member refid="interfacesb_i_playlistsource_1d4573ffc4adc449ee8fd0fdf365a63b6" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>registerPlaylistCommands</name></member>
      <member refid="interfacesb_i_playlistsource_1b1eb2bc05563de7808b101b1c78c31bc" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>removeFilter</name></member>
      <member refid="interfacesb_i_playlistsource_172443689f82b47f25e78c777519e1e7f" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>setFilter</name></member>
      <member refid="interfacesb_i_playlistsource_1a4fa7f75aefef1f288f0eeab4fe3a24d" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>setOrder</name></member>
      <member refid="interfacesb_i_playlistsource_123e18fe37391d19aa14d26d79bc60ddf" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>setSearchString</name></member>
      <member refid="interfacesb_i_playlistsource_128b770cb0c0d34f16002b949e0f70bb2" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>unregisterPlaylistCommands</name></member>
      <member refid="interfacesb_i_playlistsource_13fc85b63625b392d2e7195a9ae2b39f5" prot="public" virt="non-virtual"><scope>sbIPlaylistsource</scope><name>waitForQueryCompletion</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
