<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="interfacesb_i_metadata_job_manager" kind="interface" prot="public">
    <compoundname>sbIMetadataJobManager</compoundname>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_metadata_job_manager_1d8a4bd8fbf221a030bb7e554d85d1dbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_metadata_job" kindref="compound">sbIMetadataJob</ref></type>
        <definition>sbIMetadataJob sbIMetadataJobManager::newJob</definition>
        <argsstring>(in nsIArray aMediaItemsArray, in unsigned long aSleepMS)</argsstring>
        <name>newJob</name>
        <param>
          <type>in nsIArray</type>
          <declname>aMediaItemsArray</declname>
        </param>
        <param>
          <type>in unsigned long</type>
          <declname>aSleepMS</declname>
        </param>
        <briefdescription>
<para>Start a new task scanning the given array of media items. </para>        </briefdescription>
        <detaileddescription>
<para>This task will launch a new metadata task and return the task object for monitoring.</para><para>You can construct the required array like so: <verbatim>      var toScan = Components.classes[&quot;@mozilla.org/array;1&quot;]
        .createInstance(Components.interfaces.nsIMutableArray);

      for (var i = 0; i &lt; 100; i++)
        toScan.appendElement(myMediaItems[i], false);

      var myJob = theMetadataJobManager.newJob(toScan);
</verbatim></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aMediaItemsArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array filled with media items to be scanned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSleepMS</parametername>
</parameternamelist>
<parameterdescription>
<para>How much of an interval/sleep per loop in and out of thread. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataJobManager.idl" line="81"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_metadata_job_manager_1670828ecd74c91874b45e46489191293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMetadataJobManager::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Shuts down the job manager and cancels any outstanding tasks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataJobManager.idl" line="87"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Metadata Job Manager scans local and remote tracks for metadata in own-thread and in main-thread. </para>    </briefdescription>
    <detaileddescription>
<para>To qualify as local media the URI for the piece of media must begin with the following scheme:</para><para><itemizedlist>
<listitem><para><ulink url="file://.">file://.</ulink></para></listitem></itemizedlist>
</para><para>Remote media is scanned from the main thread using timer based workers.</para><para>An nsIArray of <ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref> are passed to this interface to begin a metadata scan task. An <ref refid="interfacesb_i_metadata_job" kindref="compound">sbIMetadataJob</ref> element will be returned to the calling interface.</para><para>The Metadata Job Manager is a service and should be called via do_GetService. Because it relies upon starting timers into the main thread, <ref refid="interfacesb_i_metadata_job_manager_1d8a4bd8fbf221a030bb7e554d85d1dbd" kindref="member">newJob()</ref> may only be called from the main thread.</para><para><simplesect kind="see"><para><ref refid="interfacesb_i_library" kindref="compound">sbILibrary</ref>, <ref refid="interfacesb_i_media_item" kindref="compound">sbIMediaItem</ref>, <ref refid="interfacesb_i_metadata_job" kindref="compound">sbIMetadataJob</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataJobManager.idl" line="60" bodyfile="C:/projects/songbird/components/mediacore/metadata/manager/public/sbIMetadataJobManager.idl" bodystart="59" bodyend="88"/>
    <listofallmembers>
      <member refid="interfacesb_i_metadata_job_manager_1d8a4bd8fbf221a030bb7e554d85d1dbd" prot="public" virt="non-virtual"><scope>sbIMetadataJobManager</scope><name>newJob</name></member>
      <member refid="interfacesb_i_metadata_job_manager_1670828ecd74c91874b45e46489191293" prot="public" virt="non-virtual"><scope>sbIMetadataJobManager</scope><name>stop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
