<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="interfacesb_i_playlist_commands_manager" kind="interface" prot="public">
    <compoundname>sbIPlaylistCommandsManager</compoundname>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_playlist_commands_manager_1d43255300ff79bffb9d103d4647de36d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistCommandsManager::registerPlaylistCommandsMediaItem</definition>
        <argsstring>(in AString aContextGUID, in AString aPlaylistType, in sbIPlaylistCommands aCommandObj)</argsstring>
        <name>registerPlaylistCommandsMediaItem</name>
        <param>
          <type>in AString</type>
          <declname>aContextGUID</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aPlaylistType</declname>
        </param>
        <param>
          <type>in <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref></type>
          <declname>aCommandObj</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> objects to be shown for specific playlists in order to let the user perform actions on a playlist&apos;s items. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> interface is used to algorithmically define a set of commands to be rendered arbitrarily by a playlist ui object (currently, playlist.xml).</para><para>Commands can be registered for a spcific playlist, or for any &quot;type&quot; characteristic.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aContextGUID</parametername>
</parameternamelist>
<parameterdescription>
<para>The guid string for the database to register against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPlaylistType</parametername>
</parameternamelist>
<parameterdescription>
<para>The arbitrary type string to register against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCommandObj</parametername>
</parameternamelist>
<parameterdescription>
<para>The command object instance to be used for these playlists </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref>, unregisterPlaylistCommands, playlist.xml </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistcommands/public/sbIPlaylistCommands.idl" line="341"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlist_commands_manager_14d7b3bd7eafd494e724aea3dc3d37909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistCommandsManager::unregisterPlaylistCommandsMediaItem</definition>
        <argsstring>(in AString aContextGUID, in AString aPlaylistType, in sbIPlaylistCommands aCommandObj)</argsstring>
        <name>unregisterPlaylistCommandsMediaItem</name>
        <param>
          <type>in AString</type>
          <declname>aContextGUID</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aPlaylistType</declname>
        </param>
        <param>
          <type>in <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref></type>
          <declname>aCommandObj</declname>
        </param>
        <briefdescription>
<para>Unregister a <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> object that was previously registered to registerPlaylistCommandsMediaItem. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aContextGUID</parametername>
</parameternamelist>
<parameterdescription>
<para>The guid that was used to register the sbIPlaylistCommand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPlaylistType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type string that was used to register the sbIPlaylistCommand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCommandObj</parametername>
</parameternamelist>
<parameterdescription>
<para>The command object that was registered </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref>, registerPlaylistCommands, playlist.xml </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistcommands/public/sbIPlaylistCommands.idl" line="351"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlist_commands_manager_1e0955c51878fae0a49d5f65ad3a5356d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsISimpleEnumerator</type>
        <definition>nsISimpleEnumerator sbIPlaylistCommandsManager::getPlaylistCommandsMediaItem</definition>
        <argsstring>(in AString aContextGUID, in AString aPlaylistType)</argsstring>
        <name>getPlaylistCommandsMediaItem</name>
        <param>
          <type>in AString</type>
          <declname>aContextGUID</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aPlaylistType</declname>
        </param>
        <briefdescription>
<para>Retrieve the list of <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> objects registered to a specific playlist. </para>        </briefdescription>
        <detaileddescription>
<para>Given the guid, table, and type strings, returns a list of duplicate instances of the corresponding <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> objects.</para><para>The &quot;type&quot; string has precedence over the &quot;guid&quot;/&quot;table&quot; pair.</para><para>This method is only called by the playlist UI object, in playlist.xml</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aContextGUID</parametername>
</parameternamelist>
<parameterdescription>
<para>The guid string for the playlist </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPlaylistType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the playlist </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A simple enumerator of newly duplicated command object instances to be used for this playlist </para></simplesect>
<simplesect kind="see"><para><ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref>, playlist.xml </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistcommands/public/sbIPlaylistCommands.idl" line="368"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlist_commands_manager_1c4861ebbacc2d3690b01ba3c245a9e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistCommandsManager::registerPlaylistCommandsMediaList</definition>
        <argsstring>(in AString aContextGUID, in AString aPlaylistType, in sbIPlaylistCommands aCommandObj)</argsstring>
        <name>registerPlaylistCommandsMediaList</name>
        <param>
          <type>in AString</type>
          <declname>aContextGUID</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aPlaylistType</declname>
        </param>
        <param>
          <type>in <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref></type>
          <declname>aCommandObj</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> objects to be shown for specific playlists in order to let the user perform actions on the playlist itself. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> interface is used to algorithmically define a set of commands to be rendered arbitrarily by a service tree ui object (currently, servicepane.xml).</para><para>Commands can be registered for a spcific playlist, or for any &quot;type&quot; characteristic.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aContextGUID</parametername>
</parameternamelist>
<parameterdescription>
<para>The guid string for the database to register against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPlaylistType</parametername>
</parameternamelist>
<parameterdescription>
<para>The arbitrary type string to register against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCommandObj</parametername>
</parameternamelist>
<parameterdescription>
<para>The command object instance to be used for these playlists </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref>, unregisterPlaylistCommands, playlist.xml </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistcommands/public/sbIPlaylistCommands.idl" line="385"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlist_commands_manager_1f4f55b9bca19a4838b0243e8712d4453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIPlaylistCommandsManager::unregisterPlaylistCommandsMediaList</definition>
        <argsstring>(in AString aContextGUID, in AString aPlaylistType, in sbIPlaylistCommands aCommandObj)</argsstring>
        <name>unregisterPlaylistCommandsMediaList</name>
        <param>
          <type>in AString</type>
          <declname>aContextGUID</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aPlaylistType</declname>
        </param>
        <param>
          <type>in <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref></type>
          <declname>aCommandObj</declname>
        </param>
        <briefdescription>
<para>Unregister a <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> object that was previously registered to registerPlaylistCommandsMediaList. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aContextGUID</parametername>
</parameternamelist>
<parameterdescription>
<para>The guid that was used to register the sbIPlaylistCommand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPlaylistType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type string that was used to register the sbIPlaylistCommand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCommandObj</parametername>
</parameternamelist>
<parameterdescription>
<para>The command object that was registered </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref>, registerPlaylistCommands, playlist.xml </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistcommands/public/sbIPlaylistCommands.idl" line="395"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_playlist_commands_manager_1add075eaf8e161fa5dee7b37123a0eb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nsISimpleEnumerator</type>
        <definition>nsISimpleEnumerator sbIPlaylistCommandsManager::getPlaylistCommandsMediaList</definition>
        <argsstring>(in AString aContextGUID, in AString aPlaylistType)</argsstring>
        <name>getPlaylistCommandsMediaList</name>
        <param>
          <type>in AString</type>
          <declname>aContextGUID</declname>
        </param>
        <param>
          <type>in AString</type>
          <declname>aPlaylistType</declname>
        </param>
        <briefdescription>
<para>Retrieve the list of <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> objects to be used for a specific playlist. </para>        </briefdescription>
        <detaileddescription>
<para>Given the guid, table, and type strings, returns a list of duplicate instances of the corresponding <ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref> objects.</para><para>The &quot;type&quot; string has precedence over the &quot;guid&quot;/&quot;table&quot; pair.</para><para>This method is only called by the playlist UI object, in playlist.xml</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aContextGUID</parametername>
</parameternamelist>
<parameterdescription>
<para>The guid string for the playlist </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPlaylistType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the playlist </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A simple enumerator of newly duplicated command object instances to be used for this playlist </para></simplesect>
<simplesect kind="see"><para><ref refid="interfacesb_i_playlist_commands" kindref="compound">sbIPlaylistCommands</ref>, playlist.xml </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/playlistcommands/public/sbIPlaylistCommands.idl" line="412"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The service used to register, unregister, and list playlist commands for a particular playlist guid or type. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/projects/songbird/components/playlistcommands/public/sbIPlaylistCommands.idl" line="325" bodyfile="C:/projects/songbird/components/playlistcommands/public/sbIPlaylistCommands.idl" bodystart="324" bodyend="413"/>
    <listofallmembers>
      <member refid="interfacesb_i_playlist_commands_manager_1e0955c51878fae0a49d5f65ad3a5356d" prot="public" virt="non-virtual"><scope>sbIPlaylistCommandsManager</scope><name>getPlaylistCommandsMediaItem</name></member>
      <member refid="interfacesb_i_playlist_commands_manager_1add075eaf8e161fa5dee7b37123a0eb6" prot="public" virt="non-virtual"><scope>sbIPlaylistCommandsManager</scope><name>getPlaylistCommandsMediaList</name></member>
      <member refid="interfacesb_i_playlist_commands_manager_1d43255300ff79bffb9d103d4647de36d" prot="public" virt="non-virtual"><scope>sbIPlaylistCommandsManager</scope><name>registerPlaylistCommandsMediaItem</name></member>
      <member refid="interfacesb_i_playlist_commands_manager_1c4861ebbacc2d3690b01ba3c245a9e0e" prot="public" virt="non-virtual"><scope>sbIPlaylistCommandsManager</scope><name>registerPlaylistCommandsMediaList</name></member>
      <member refid="interfacesb_i_playlist_commands_manager_14d7b3bd7eafd494e724aea3dc3d37909" prot="public" virt="non-virtual"><scope>sbIPlaylistCommandsManager</scope><name>unregisterPlaylistCommandsMediaItem</name></member>
      <member refid="interfacesb_i_playlist_commands_manager_1f4f55b9bca19a4838b0243e8712d4453" prot="public" virt="non-virtual"><scope>sbIPlaylistCommandsManager</scope><name>unregisterPlaylistCommandsMediaList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
