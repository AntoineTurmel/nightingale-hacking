<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="interfacesb_i_media_scan_query" kind="interface" prot="public">
    <compoundname>sbIMediaScanQuery</compoundname>
    <includes refid="sb_i_media_library_8idl" local="no">sbIMediaLibrary.idl</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfacesb_i_media_scan_query_18b4a82193d18f837383c0616366311c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaScanQuery::setDirectory</definition>
        <argsstring>(in AString strDirectory)</argsstring>
        <name>setDirectory</name>
        <param>
          <type>in AString</type>
          <declname>strDirectory</declname>
        </param>
        <briefdescription>
<para>Set the directory to scan. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strDirectory</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory to scan </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interfacesb_i_media_scan_query_153696d402eb06a9261233dab7a70c253" kindref="member">getDirectory</ref>, <ref refid="interfacesb_i_media_scan_query_1871ba508889490927aaef8f98d55adee" kindref="member">setRecurse</ref>, <ref refid="interfacesb_i_media_scan_query_14af431e11660c06664c369f45a5844d1" kindref="member">getRecurse</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="596"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_153696d402eb06a9261233dab7a70c253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIMediaScanQuery::getDirectory</definition>
        <argsstring>()</argsstring>
        <name>getDirectory</name>
        <briefdescription>
<para>Get the directory to scan. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The directory to scan </para></simplesect>
<simplesect kind="see"><para><ref refid="interfacesb_i_media_scan_query_18b4a82193d18f837383c0616366311c9" kindref="member">setDirectory</ref>, <ref refid="interfacesb_i_media_scan_query_1871ba508889490927aaef8f98d55adee" kindref="member">setRecurse</ref>, <ref refid="interfacesb_i_media_scan_query_14af431e11660c06664c369f45a5844d1" kindref="member">getRecurse</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="604"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_1871ba508889490927aaef8f98d55adee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaScanQuery::setRecurse</definition>
        <argsstring>(in PRBool bRecurse)</argsstring>
        <name>setRecurse</name>
        <param>
          <type>in PRBool</type>
          <declname>bRecurse</declname>
        </param>
        <briefdescription>
<para>Set the scan to run recursively under the given directory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bRecurse</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, scan subdirectories </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interfacesb_i_media_scan_query_18b4a82193d18f837383c0616366311c9" kindref="member">setDirectory</ref>, <ref refid="interfacesb_i_media_scan_query_153696d402eb06a9261233dab7a70c253" kindref="member">getDirectory</ref>, <ref refid="interfacesb_i_media_scan_query_14af431e11660c06664c369f45a5844d1" kindref="member">getRecurse</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="612"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_14af431e11660c06664c369f45a5844d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRBool</type>
        <definition>PRBool sbIMediaScanQuery::getRecurse</definition>
        <argsstring>()</argsstring>
        <name>getRecurse</name>
        <briefdescription>
<para>Whether or not the scan will run recursively. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>If true, scan subdirectories </para></simplesect>
<simplesect kind="see"><para><ref refid="interfacesb_i_media_scan_query_18b4a82193d18f837383c0616366311c9" kindref="member">setDirectory</ref>, <ref refid="interfacesb_i_media_scan_query_153696d402eb06a9261233dab7a70c253" kindref="member">getDirectory</ref>, <ref refid="interfacesb_i_media_scan_query_1871ba508889490927aaef8f98d55adee" kindref="member">setRecurse</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="620"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_16e29719d16cb593bf973efd3b2003406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaScanQuery::addFileExtension</definition>
        <argsstring>(in AString strExtension)</argsstring>
        <name>addFileExtension</name>
        <param>
          <type>in AString</type>
          <declname>strExtension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="622"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_196fb72973c3acb6a8a91bb23663ef738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaScanQuery::setCallback</definition>
        <argsstring>(in sbIMediaScanCallback pCallback)</argsstring>
        <name>setCallback</name>
        <param>
          <type>in <ref refid="interfacesb_i_media_scan_callback" kindref="compound">sbIMediaScanCallback</ref></type>
          <declname>pCallback</declname>
        </param>
        <briefdescription>
<para>Set the callback object for the scan. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interfacesb_i_media_scan_callback" kindref="compound">sbIMediaScanCallback</ref>, <ref refid="interfacesb_i_media_scan_query_11ce82e218fbdcd5cd9e40c8796af5874" kindref="member">getCallback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="630"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_11ce82e218fbdcd5cd9e40c8796af5874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfacesb_i_media_scan_callback" kindref="compound">sbIMediaScanCallback</ref></type>
        <definition>sbIMediaScanCallback sbIMediaScanQuery::getCallback</definition>
        <argsstring>()</argsstring>
        <name>getCallback</name>
        <briefdescription>
<para>Get the callback object for the scan. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The callback object </para></simplesect>
<simplesect kind="see"><para><ref refid="interfacesb_i_media_scan_callback" kindref="compound">sbIMediaScanCallback</ref>, <ref refid="interfacesb_i_media_scan_query_196fb72973c3acb6a8a91bb23663ef738" kindref="member">setCallback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="638"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_1d7dbcfcaf302d7c5f21bec1e007ed370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRUint32</type>
        <definition>PRUint32 sbIMediaScanQuery::getFileCount</definition>
        <argsstring>()</argsstring>
        <name>getFileCount</name>
        <briefdescription>
<para>Get the number of files found. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of files found </para></simplesect>
<simplesect kind="see"><para><ref refid="interfacesb_i_media_scan_query_1bb10844488de21d7f8a144e67f7f58e4" kindref="member">getFilePath</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="646"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_16e0ad6f37c5b19167b263be765557df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaScanQuery::addFilePath</definition>
        <argsstring>(in AString strFilePath)</argsstring>
        <name>addFilePath</name>
        <param>
          <type>in AString</type>
          <declname>strFilePath</declname>
        </param>
        <briefdescription>
<para>USER CODE SHOULD NOT REFERENCE THIS METHOD. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="651"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_1bb10844488de21d7f8a144e67f7f58e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIMediaScanQuery::getFilePath</definition>
        <argsstring>(in PRUint32 nIndex)</argsstring>
        <name>getFilePath</name>
        <param>
          <type>in PRUint32</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
<para>Get the N&apos;th file from the results of the scan. </para>        </briefdescription>
        <detaileddescription>
<para>Don&apos;t call this while <ref refid="interfacesb_i_media_scan_query_13b087511f162069170a062dcfc5e6f01" kindref="member">isScanning()</ref> is true.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the files array to retrieve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interfacesb_i_media_scan_query_1d7dbcfcaf302d7c5f21bec1e007ed370" kindref="member">getFileCount</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="661"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_13b087511f162069170a062dcfc5e6f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRBool</type>
        <definition>PRBool sbIMediaScanQuery::isScanning</definition>
        <argsstring>()</argsstring>
        <name>isScanning</name>
        <briefdescription>
<para>Whether or not the scan operation is executing. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True, if the scan is executing </para></simplesect>
<simplesect kind="see"><para><ref refid="interfacesb_i_database_query" kindref="compound">sbIDatabaseQuery</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="669"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_1c3c9d071ace92eb5d3cdc711d3ccce1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaScanQuery::setIsScanning</definition>
        <argsstring>(in PRBool bIsScanning)</argsstring>
        <name>setIsScanning</name>
        <param>
          <type>in PRBool</type>
          <declname>bIsScanning</declname>
        </param>
        <briefdescription>
<para>USER CODE SHOULD NOT REFERENCE THIS METHOD. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="674"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_169cb4e3652c7d5a03dd97f1d7b09599b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIMediaScanQuery::getLastFileFound</definition>
        <argsstring>()</argsstring>
        <name>getLastFileFound</name>
        <briefdescription>
<para>Returns the most recent file found by the scan. </para>        </briefdescription>
        <detaileddescription>
<para>This method may be called while the scan is executing to provide a periodic snapshot of the scan results.</para><para><simplesect kind="return"><para>The path to the last file found </para></simplesect>
<simplesect kind="see"><para><ref refid="interfacesb_i_media_scan_query_14a743fd39e77c2b16b2d2c811ac8dca9" kindref="member">getCurrentScanPath</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="685"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_14a743fd39e77c2b16b2d2c811ac8dca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AString</type>
        <definition>AString sbIMediaScanQuery::getCurrentScanPath</definition>
        <argsstring>()</argsstring>
        <name>getCurrentScanPath</name>
        <briefdescription>
<para>Returns the most recent directory scanned. </para>        </briefdescription>
        <detaileddescription>
<para>This method may be called while the scan is executing to provide a periodic snapshot of the scan results.</para><para><simplesect kind="return"><para>The path to the last file found </para></simplesect>
<simplesect kind="see"><para><ref refid="interfacesb_i_media_scan_query_169cb4e3652c7d5a03dd97f1d7b09599b" kindref="member">getLastFileFound</ref>, <ref refid="interfacesb_i_media_scan_query_10e53bb27d5bf8e7ab842abe6ab326411" kindref="member">setCurrentScanPath</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="696"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_10e53bb27d5bf8e7ab842abe6ab326411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaScanQuery::setCurrentScanPath</definition>
        <argsstring>(in AString strScanPath)</argsstring>
        <name>setCurrentScanPath</name>
        <param>
          <type>in AString</type>
          <declname>strScanPath</declname>
        </param>
        <briefdescription>
<para>USER CODE SHOULD NOT REFERENCE THIS METHOD. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="701"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_12de7a89ef78e4c3b831a0ca191b251c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbIMediaScanQuery::cancel</definition>
        <argsstring>()</argsstring>
        <name>cancel</name>
        <briefdescription>
<para>Cancel the current scanning loop. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="706"/>
      </memberdef>
      <memberdef kind="function" id="interfacesb_i_media_scan_query_101969cc32c9dbf040277bb0deb77220d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRBool</type>
        <definition>PRBool sbIMediaScanQuery::isCancelled</definition>
        <argsstring>()</argsstring>
        <name>isCancelled</name>
        <briefdescription>
<para>USER CODE SHOULD NOT REFERENCE THIS METHOD. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="711"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object to scan through the files of a folder (and optionally subfolders). </para>    </briefdescription>
    <detaileddescription>
<para>This object is used to rapidly gather a list of all the files found under a given directory path. It runs from a separate thread.</para><para>User code may call <ref refid="interfacesb_i_media_scan_query_14a743fd39e77c2b16b2d2c811ac8dca9" kindref="member">getCurrentScanPath()</ref> and <ref refid="interfacesb_i_media_scan_query_169cb4e3652c7d5a03dd97f1d7b09599b" kindref="member">getLastFileFound()</ref> from the main thread to get a periodic snapshot of the current progress of the scan.</para><para>Execute a scan by creating a scan query, filling it out, and passing it to the <ref refid="interfacesb_i_media_scan" kindref="compound">sbIMediaScan</ref> interface for processing: <verbatim>function ScanBeneathADirectory(aPath) {
  // Create the objects
  var aMediaScan = Components.classes[&quot;@songbirdnest.com/Songbird/MediaScan;1&quot;]
    .createInstance(Components.interfaces.sbIMediaScan);
  var aMediaScanQuery = Components.classes[&quot;@songbirdnest.com/Songbird/MediaScanQuery;1&quot;]
    .createInstance(Components.interfaces.sbIMediaScanQuery);

  // Setup the query
  aMediaScanQuery.setDirectory(aPath);
  aMediaScanQuery.setRecurse(true);
          
  // Execute the query
  aMediaScan.submitQuery(aMediaScanQuery);
  return aMediaScanQuery;
}
</verbatim></para><para><simplesect kind="see"><para><ref refid="interfacesb_i_media_scan_callback" kindref="compound">sbIMediaScanCallback</ref>, <ref refid="interfacesb_i_media_scan" kindref="compound">sbIMediaScan</ref>, MediaScan.h </para></simplesect>
</para>    </detaileddescription>
    <location file="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" line="589" bodyfile="C:/projects/songbird/components/medialibrary/public/sbIMediaLibrary.idl" bodystart="588" bodyend="712"/>
    <listofallmembers>
      <member refid="interfacesb_i_media_scan_query_16e29719d16cb593bf973efd3b2003406" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>addFileExtension</name></member>
      <member refid="interfacesb_i_media_scan_query_16e0ad6f37c5b19167b263be765557df0" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>addFilePath</name></member>
      <member refid="interfacesb_i_media_scan_query_12de7a89ef78e4c3b831a0ca191b251c9" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>cancel</name></member>
      <member refid="interfacesb_i_media_scan_query_11ce82e218fbdcd5cd9e40c8796af5874" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>getCallback</name></member>
      <member refid="interfacesb_i_media_scan_query_14a743fd39e77c2b16b2d2c811ac8dca9" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>getCurrentScanPath</name></member>
      <member refid="interfacesb_i_media_scan_query_153696d402eb06a9261233dab7a70c253" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>getDirectory</name></member>
      <member refid="interfacesb_i_media_scan_query_1d7dbcfcaf302d7c5f21bec1e007ed370" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>getFileCount</name></member>
      <member refid="interfacesb_i_media_scan_query_1bb10844488de21d7f8a144e67f7f58e4" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>getFilePath</name></member>
      <member refid="interfacesb_i_media_scan_query_169cb4e3652c7d5a03dd97f1d7b09599b" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>getLastFileFound</name></member>
      <member refid="interfacesb_i_media_scan_query_14af431e11660c06664c369f45a5844d1" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>getRecurse</name></member>
      <member refid="interfacesb_i_media_scan_query_101969cc32c9dbf040277bb0deb77220d" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>isCancelled</name></member>
      <member refid="interfacesb_i_media_scan_query_13b087511f162069170a062dcfc5e6f01" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>isScanning</name></member>
      <member refid="interfacesb_i_media_scan_query_196fb72973c3acb6a8a91bb23663ef738" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>setCallback</name></member>
      <member refid="interfacesb_i_media_scan_query_10e53bb27d5bf8e7ab842abe6ab326411" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>setCurrentScanPath</name></member>
      <member refid="interfacesb_i_media_scan_query_18b4a82193d18f837383c0616366311c9" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>setDirectory</name></member>
      <member refid="interfacesb_i_media_scan_query_1c3c9d071ace92eb5d3cdc711d3ccce1b" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>setIsScanning</name></member>
      <member refid="interfacesb_i_media_scan_query_1871ba508889490927aaef8f98d55adee" prot="public" virt="non-virtual"><scope>sbIMediaScanQuery</scope><name>setRecurse</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
