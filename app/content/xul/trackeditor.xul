<?xml version="1.0"?>
<!--
/*
 //
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css" type="text/css"?>
<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >
<window
 xmlns:html="http://www.w3.org/1999/xhtml"
 xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
 id="track_editor"
 title="&trackeditor.title;"
 hidechrome="true"
 buttons="none"
 onkeydown="handleKeyDown(event);"
 onload="onLoadTrackEditor();"
 onunload="onUnloadTrackEditor();"
 windowtype="track_editor"
 onfocus="onFocus()"
 onblur="onBlur()"

  
 spacers_drag_window="true"
>
  
<windowregion/>

<stack flex="1">

  <vbox class="sb_faceplate, dialog" flex="1" id="trackeditor_frame">
    <hbox class="sb_faceplate">
        <image id="chrome_nw" class="sb_faceplate"/>
        <image id="chrome_n" class="sb_faceplate" flex="1"/>
        <image id="chrome_ne" class="sb_faceplate"/>
    </hbox>
    <hbox class="sb_faceplate" flex="1">
        <image id="chrome_w" class="sb_faceplate"/>
        <spacer flex="1"/>
        <image id="chrome_e" class="sb_faceplate"/>
    </hbox>
    <hbox class="sb_faceplate">
        <image id="chrome_sw" class="sb_faceplate"/>
        <image id="chrome_s" class="sb_faceplate" flex="1"/>
        <image id="chrome_se" class="sb_faceplate"/>
    </hbox>
  </vbox>
  
  <vbox class="sb_faceplate" flex="1">
    <hbox class="sb_faceplate" id="frame_top_resizers">
      <x_resizer oncommand="onWindowResizeComplete()" id="frame_resize_to" dir="topleft" x_style="cursor: nw-resize;"/>
      <x_resizer oncommand="onWindowResizeComplete()" id="frame_resize_t" dir="top" style="cursor: n-resize;" flex="1"/>
      <x_resizer oncommand="onWindowResizeComplete()" id="frame_resize_to" dir="topright" x_style="cursor: ne-resize;"/>
    </hbox>
    <hbox class="sb_faceplate" flex="1">
    
    <hbox class="sb_faceplate" id="frame_middle_resizers" flex="1">
      
        <vbox class="sb_faceplate">
          <x_resizer oncommand="onWindowResizeComplete()" id="frame_resize_mo" dir="topleft" x_style="cursor: nw-resize;"/>
          <resizer oncommand="onWindowResizeComplete()" id="frame_resize_m" dir="left" style="cursor: w-resize;" flex="1"/>
          <x_resizer oncommand="onWindowResizeComplete()" id="frame_resize_mo" dir="bottomleft" x_style="cursor: sw-resize;"/>
        </vbox>
        
        <vbox class="sb_faceplate" id="chrome_bkgd" flex="1" drag_window="true">
          <menubar id="trackeditor_menu" hidden="false" class="sb_faceplate" oncommand="onMenu(event.target)"/>
        
          <hbox id="window_top" class="sb_faceplate" drag_window="true">
            <label id="app_title" value="&trackeditor.title;" class="sb_faceplate" drag_window="true"/>
            <spacer width="5" drag_window="true"/>                    
            <spacer flex="1" drag_window="true"/>           
            <spacer width="5" drag_window="true"/>
            <button id="sysbtn_close" class="sb_faceplate" oncommand="onExit( );" tooltiptext="&tooltip.exit;"/>
          </hbox>
          <spacer height="3" drag_window="true"/>
          
          <description class="dialog_label" drag_window="true">
          &trackeditor.disclaimer;
          </description>
          <spacer height="8" drag_window="true"/>
          

          <hbox id="trackeditor.hflex">
            <trackeditor id="trackeditor.trackeditor" hflex="trackeditor.hflex" title="&trackeditor.trackdata;" flex="1" />
          </hbox>
          
          <hbox id="exttrackeditor.hflex">
            <exttrackeditor id="trackeditor.exttrackeditor" hflex="exttrackeditor.hflex" title="&trackeditor.exttrackdata;" flex="1" 
             exclude="uuid;url;title;artist;album;genre;length"/>
          </hbox>
          
<!--
          <hbox id="tageditor.hflex">
            <tageditor id="trackeditor.tageditor" hflex="tageditor.hflex" title="&trackeditor.tags;" flex="1" />
          </hbox>
-->          
          <spacer height="5"/>
          <hbox>
            <spacer flex="1"/>           
            <button id="button_ok" label="&window.ok;" class="dialog_button sb_faceplate" oncommand="if ( doOK() ) onExit( );"/>
            <spacer width="5"/>
            <button id="button_undo" label="&window.undo;" class="dialog_button sb_faceplate" oncommand="doUndo();"/> 
            <spacer width="5"/>
            <button id="button_cancel" label="&window.cancel;" class="dialog_button sb_faceplate" oncommand="if ( doCancel() ) onExit( );"/> 
          </hbox>
         </vbox>      

        <vbox class="sb_faceplate">
          <x_resizer oncommand="onWindowResizeComplete()" id="frame_resize_mo" dir="topright" x_style="cursor: ne-resize;"/>
          <resizer oncommand="onWindowResizeComplete()" id="frame_resize_m" dir="right" style="cursor: e-resize;" flex="1"/>
          <x_resizer oncommand="onWindowResizeComplete()" id="frame_resize_mo" dir="bottomright" x_style="cursor: se-resize;"/>
        </vbox>
        
      </hbox> <!-- frame_middle_resizers -->
    </hbox>
    <hbox class="sb_faceplate" id="frame_bottom_resizers">
      <x_resizer oncommand="onWindowResizeComplete()" id="frame_resize_to" dir="bottomleft" x_style="cursor: sw-resize;"/>
      <x_resizer oncommand="onWindowResizeComplete()" id="frame_resize_t" dir="bottom" x_style="cursor: s-resize;" flex="1"/>
      <x_resizer oncommand="onWindowResizeComplete()" id="frame_resize_to" dir="bottomright" x_style="cursor: se-resize;"/>
    </hbox>
  </vbox>


   
</stack>
  
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/songbird_interfaces.js" />
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/sbDataRemoteUtils.js" />
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/windowDrag.js" />
  <script type="application/x-javascript"  
   src="chrome://songbird/content/scripts/window_utils.js" />
  
  <script>

  <![CDATA[

  const VK_ESCAPE = 27;
  const VK_ENTER = 13;
  
  var playlist = null;
  
  var dirty = {
    value: false,
    setDirty: function(val) {
      this.value = val;
      enableUndo();
    },
    isDirty: function() {
      return this.value;
    }
  };
  
  var _focus = {
    value: false,
    setIsFocused : function(val) {
      this.value = val;
    },
    isFocused: function() {
      return this.value;
    }
  };
  
  function onLoadTrackEditor() {
    try {
      fixWindow("window_top", "app_title");
    }
    catch (e) { }

    SBDataIncrementValue( "backscan.paused" );

    var doc = window.arguments[0];
    var _trackeditor = document.getElementById("trackeditor.trackeditor");
    _trackeditor.setBaseDocument(doc);
    _trackeditor.setDirtyObject(dirty);
    _trackeditor.setMainFocusObject(_focus);
    var _exttrackeditor = document.getElementById("trackeditor.exttrackeditor");
    _exttrackeditor.setBaseDocument(doc);
    _exttrackeditor.setDirtyObject(dirty);
    _exttrackeditor.setMainFocusObject(_focus);
    //var _tageditor = document.getElementById("trackeditor.tageditor");
    //_tageditor.setBaseDocument(doc);
    //_tageditor.setDirtyObject(dirty);
    //_tageditor.setMainFocusObject(_focus);
    
    disableUndo();
    
    playlist = doc.__CURRENTPLAYLIST__;
    if (playlist)
    {
      playlist.addEventListener("playlist-destroy", onDestroyPlaylist, false);
    }

    onWindowLoadPosition();
    document.getElementById("trackeditor.trackeditor").openDrawer();
    setTrackeditorMinMaxCallback();
  }
  
  function onDestroyPlaylist() {
    onExit();
  }
  
  function onUnloadTrackEditor() {
    if (playlist)
    {
      playlist.removeEventListener("playlist-destroy", onDestroyPlaylist, false);
    }
    
    // decrement the backscan.pause count to a floor of 0
    SBDataDecrementValue( "backscan.paused", 0 );

    onWindowSavePosition();
  }
  
  function enableUndo() {
    document.getElementById("button_undo").removeAttribute("disabled");
  }
  
  function disableUndo() {
    document.getElementById("button_undo").setAttribute("disabled", "true");
  }
  
  function doOK() {
    //if (playlist) playlist.deselectAll();
    document.getElementById("trackeditor.trackeditor").apply();
    document.getElementById("trackeditor.exttrackeditor").apply();
    //document.getElementById("trackeditor.tageditor").apply();
    return true;
  }

  function doUndo() {
    document.getElementById("trackeditor.trackeditor").undo();
    document.getElementById("trackeditor.exttrackeditor").undo();
    //document.getElementById("trackeditor.tageditor").undo();
    dirty.setDirty(false);
    disableUndo();
  }
  
  function doCancel() {
    return true;
  }

  function handleKeyDown(event) 
  {
    switch (event.keyCode)
    {
      case VK_ESCAPE:
        document.getElementById("button_cancel").doCommand();
        break;
      case VK_ENTER:
        document.getElementById("button_ok").doCommand();
        break;
    }
  }
  
  function onFocus() {
    _focus.setIsFocused(true);
  }

  function onBlur() {
    _focus.setIsFocused(false);
  }

  function setTrackeditorMinMaxCallback()
  {
    try {
      var windowMinMax = Components.classes["@songbirdnest.com/Songbird/WindowMinMax;1"];
      if (windowMinMax) {
        var service = windowMinMax.getService(Components.interfaces.sbIWindowMinMax);
        if (service)
          service.setCallback(document, SBTrackeditorWindowMinMaxCB);
      }
    }
    catch (err) {
      // No component
      dump("Error. trackeditor.xul:setMinMaxCallback() \n " + err + "\n");
    }
  }

  var SBTrackeditorWindowMinMaxCB = 
  {
    // Shrink until the box doesn't match the window, then stop.
    _minwidth: -1,
    _cssminwidth: -1,
    GetMinWidth: function()
    {
      if (this._cssminwidth == -1) {
        this._cssminwidth = parseInt(getStyle(document.documentElement, "min-width"));
      }
      // If min size is not yet known and if the window size is different from the document's box object, 
      if (this._minwidth == -1 && window.innerWidth != document.getElementById('trackeditor_frame').boxObject.width)
      { 
        // Then we know we've hit the minimum width, record it. Because you can't query it directly.
        this._minwidth = document.getElementById('trackeditor_frame').boxObject.width + 1;
      }
      return Math.max(this._minwidth, this._cssminwidth);
    },

    GetMinHeight: function()
    {
      return -1;
    },

    GetMaxWidth: function()
    {
      return -1;
    },

    GetMaxHeight: function()
    {
      return -1;
    },

    OnWindowClose: function()
    {
      setTimeout(onExit, 0);
    },

    QueryInterface : function(aIID)
    {
      if (!aIID.equals(Components.interfaces.sbIWindowMinMaxCallback) &&
          !aIID.equals(Components.interfaces.nsISupportsWeakReference) &&
          !aIID.equals(Components.interfaces.nsISupports)) 
      {
        throw Components.results.NS_ERROR_NO_INTERFACE;
      }
      
      return this;
    }
  }

  function getStyle(el,styleProp)
  {
    var v;
    if (el) {
      var s = document.defaultView.getComputedStyle(el,null);
      v = s.getPropertyValue(styleProp);
    }
    return v;
  }
  
  ]]>
  </script>

</window>
