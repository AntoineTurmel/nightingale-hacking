<?xml version="1.0"?>
<!--
/*
 //
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css" type="text/css"?>
<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >
<window
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:rdf="http://www.w3.org/TR/WD-rdf-syntax#"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  onload="onInit();"
  onunload="onDeinit();"
>

  <hbox flex="1">
    <spacer width="3"/> 
    <vbox flex="1">
      <hbox align="center">
        <label id="trackeditor.label.guid"  value="&metadata.uuid;" width="96"/>
        <dbedit_label id="trackeditor.guid" column="http://songbirdnest.com/data/1.0#GUID" flex="1"/>
      </hbox>
      <spacer height="3"/>
      <hbox align="center">
        <label id="trackeditor.label.url"  value="&metadata.url;" width="96"/>
        <dbedit_label id="trackeditor.url" column="http://songbirdnest.com/data/1.0#contentURL" flex="1"/>
      </hbox>
      <hbox align="center">
        <label id="trackeditor.label.title"  value="&metadata.title;" width="96"/>
        <dbedit_textbox id="trackeditor.title" column="http://songbirdnest.com/data/1.0#trackName" flex="1"/>
      </hbox>
      <hbox align="center">
        <label id="trackeditor.label.artist"  value="&metadata.artist;" width="96"/>
        <dbedit_menulist editable="true" populateuniques="1" id="trackeditor.artist" column="http://songbirdnest.com/data/1.0#artistName" flex="1" />
      </hbox>
      <hbox align="center">
        <label id="trackeditor.label.album"  value="&metadata.album;" width="96"/>
        <dbedit_menulist editable="true" populateuniques="1" id="trackeditor.album" column="http://songbirdnest.com/data/1.0#albumName" flex="1"/>
      </hbox>
      <hbox align="center">
        <label id="trackeditor.label.genre"  value="&metadata.genre;" width="96"/>
        <dbedit_menulist editable="true" populateuniques="1" id="trackeditor.genre" column="http://songbirdnest.com/data/1.0#genre" flex="1"/>
      </hbox>
      <spacer height="8"/> 
      <hbox align="center">
        <label id="trackeditor.label.length"  value="&metadata.length;" width="96"/>
        <dbedit_label id="trackeditor.length" column="http://songbirdnest.com/data/1.0#duration" flex="1"/>
      </hbox>
    </vbox>
    <spacer width="3"/> 
  </hbox>
 
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/songbird_interfaces.js"/>
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/sbDataRemoteUtils.js"/>
 
  <script>
  <![CDATA[
  var Cc = Components.classes;
  var Ci = Components.interfaces;
  var Cr = Components.results;

  var controls = Array();
  var playlist = null;
  var guids = Array();
  var dirtyobject = null;
  var focusobject = null;

  function apply() 
  {
    for (var i=0;i<controls.length;i++)
      controls[i].apply();
  }
  
  function undo() 
  {
    for (var i=0;i<controls.length;i++)
      controls[i].undo();
  }
  
  function checkFormatErrors() 
  {
    for (var i=0;i<controls.length;i++) {
      if (!controls[i].validateValue()) return controls[i].column;
    }
    return null;
  }
  
  function setObjects(theplaylist, dirty, focus) {
    playlist = theplaylist;
    dirtyobject = dirty;
    focusobject = focus;
    //setControlsPlaylistObject();
    //setControlsDirtyObject();
    watchPlaylist();
    loadSelection();
  }

  document.__APPLY_FUNCTION__ = apply;
  document.__UNDO_FUNCTION__ = undo;
  document.__CHECKFORMATERRORS_FUNCTION__ = checkFormatErrors;
  document.__SETOBJECTS_FUNCTION__ = setObjects;
  
  function onInit()
  {
    try
    { 
      loadControls();
    }
    catch ( err )
    {
      alert( err );
    }
  } 
  
  /*function setControlsDirtyObject() {
    for (var i=0;i<controls.length;i++) controls[i].dirtyobject = dirtyobject;
  }

  function setControlsPlaylistObject() {
    for (var i=0;i<controls.length;i++) controls[i].playlist = playlist;
  }*/

  function loadControls() {
    controls.push(document.getElementById("trackeditor.guid"));
    controls.push(document.getElementById("trackeditor.url"));
    controls.push(document.getElementById("trackeditor.title"));
    controls.push(document.getElementById("trackeditor.artist"));
    controls.push(document.getElementById("trackeditor.album"));
    controls.push(document.getElementById("trackeditor.genre"));
    controls.push(document.getElementById("trackeditor.length"));
  }
  
  function onTrackChange() {
    if (controls.length == 0) { setTimeout("onTrackChange();"); return; }
    for (var i=0;i<controls.length;i++) {
      controls[i].dirtyobject = dirtyobject;
      controls[i].playlist = playlist;
      controls[i].guids = guids;
      controls[i].undo();
    }
  }

  function onDeinit()
  {
    if (playlist)
    {
      playlist.removeEventListener("playlist-selchange", onPlaylistSelectionChanged, false);
    }
  }
  
  function watchPlaylist()
  {
    if (playlist)
    {
      playlist.addEventListener("playlist-selchange", onPlaylistSelectionChanged, false);
    }
  }
  
  function onPlaylistSelectionChanged()
  {
    if (dirtyobject && dirtyobject.isDirty()) return; // ignore new selection if anything has been edited
    if (focusobject && focusobject.isFocused()) return; // ignore new selection if the window is focused (the selection can't possibly have been made by the user!)
    loadSelection();
  }

  function loadSelection()
  {
    if (!playlist) { setTimeout("loadSelection();", 0); return; }
    var _guids = Array();
    if (playlist && playlist.treeView && playlist.treeView.selectedMediaItems) 
    {
      var items = playlist.treeView.selectedMediaItems;
      while (items.hasMoreElements()) {
        var item = items.getNext().mediaItem;
        if (item) _guids.push(item.guid);
      }
    }
    guids = _guids;
    onTrackChange();
  }
  
 ]]>
  </script>
  
</window>
