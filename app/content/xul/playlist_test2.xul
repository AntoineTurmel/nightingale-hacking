<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
 -->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css" type="text/css"?>
<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<window
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:rdf="http://www.w3.org/TR/WD-rdf-syntax#"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  onload="LocalLoad();"
>
  <playlist2 id="playlist_test" 
      flex="1"
      enableColumnDrag="true"
      persist="column-list column-widths"
      editable="true"
  />

  <!-- Load the sbPlaylistsource helper -->
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/songbird_interfaces.js"/>
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/sbDataRemoteUtils.js"/>
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/metrics.js"/>
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/dragWindow.js" />
  <script type="application/x-javascript"  
   src="chrome://songbird/content/scripts/window_utils.js"/> 

  <!-- Local hardcoded sample js -->
  <script type="application/x-javascript">
  <![CDATA[
if (typeof(Cc) == "undefined")
 const Cc = Components.classes;
if (typeof(Ci) == "undefined")
 const Ci = Components.interfaces;

try
{
  var SBLibraryCommands = 
  {
    m_Playlist: null,

    m_root_commands :
    {
      m_Types: new Array
      (
        "action",
        "action",
        "action",
        "action",
        "action",
        "action"
      ),

      m_Ids: new Array
      (
        "library_cmd_play",
        "library_cmd_remove",
        "library_cmd_edit",
        "library_cmd_addtoplaylist",
        "library_cmd_burntocd",
        "library_cmd_device"
      ),
      
      m_Names: new Array
      (
        "&command.play",
        "&command.remove",
        "&command.edit",
        "&command.addtoplaylist",
        "&command.burntocd",
        "&command.device"
      ),
      
      m_Tooltips: new Array
      (
        "&command.tooltip.play",
        "&command.tooltip.remove",
        "&command.tooltip.edit",
        "&command.tooltip.addtoplaylist",
        "&command.tooltip.burntocd",
        "&command.tooltip.device"
      )
    },
    
    _getMenu: function(aSubMenu)
    {
      var cmds;
      switch (aSubMenu) {
        //case "submenu1": 
          //cmds = this.m_submenu1_commands;
          //break;
        default:
          cmds = this.m_root_commands;
          break;
      }
      return cmds;
    },   
  
    getNumCommands: function( aSubMenu, aHost )
    {
      var cmds = this._getMenu(aSubMenu);
      if ( 
          ( cmds.m_Tooltips.length != cmds.m_Ids.length ) ||
          ( cmds.m_Names.length != cmds.m_Ids.length ) ||
          ( cmds.m_Tooltips.length != cmds.m_Names.length )
         )
      {
        alert( "PlaylistCommands - Array lengths do not match!" );
        return 0;
      }
      return cmds.m_Ids.length;
    },
  
    getCommandId: function( aSubMenu, aIndex, aHost )
    {
      var cmds = this._getMenu(aSubMenu);
      if ( aIndex >= cmds.m_Ids.length )
      {
        return "";
      }
      return cmds.m_Ids[ aIndex ];
    },
    
    getCommandType: function( aSubMenu, aIndex, aHost )
    {
      var cmds = this._getMenu(aSubMenu);
      if ( aIndex >= cmds.m_Ids.length )
      {
        return "";
      }
      return cmds.m_Types[ aIndex ];
    },
  
    getCommandText: function( aSubMenu, aIndex, aHost )
    {
      var cmds = this._getMenu(aSubMenu);
      if ( aIndex >= cmds.m_Names.length )
      {
        return "";
      }
      return cmds.m_Names[ aIndex ];
    },
  
    getCommandFlex: function( aSubMenu, aIndex, aHost )
    {
      var cmds = this._getMenu(aSubMenu);
      if ( cmds.m_Types[ aIndex ] == "separator" ) return 1;
      return 0;
    },

    getCommandToolTipText: function( aSubMenu, aIndex, aHost )
    {
      var cmds = this._getMenu(aSubMenu);
      if ( aIndex >= cmds.m_Tooltips.length )
      {
        return "";
      }
      return cmds.m_Tooltips[ aIndex ];
    },

    getCommandValue: function( aSubMenu, aIndex, aHost )
    {
      var cmds = this._getMenu(aSubMenu);
      switch (cmds.m_Ids[aIndex]) {
        // ...
      }
      return "";
    },

    instantiateCustomCommand: function( aId, aHost ) 
    {
      return null;
    },

    refreshCustomCommand: function( aElement, aId, aHost ) 
    {
    },
  
    getCommandEnabled: function( aSubMenu, aIndex, aHost )
    {
      var cmds = this._getMenu(aSubMenu);
      var playlist = this.m_Playlist;

      // Bail out early if we don't have our playlist somehow
      if ( ! playlist )
        return false;

      var command = cmds.m_Ids[aIndex];    

      switch ( command )
      {
        case "library_cmd_device":
        case "library_cmd_burntocd":
        {
          // These commands are not fully implemented yet
          return false;
        }
        break;

        case "library_cmd_remove":
        {
          // Special case for the Smart Playlist - "Remove" makes no sense and
          // should be disabled. If this isn't a Smart Playlist then default
          // logic is appropriate.
          if (playlist.mediaListView.mediaList instanceof Ci.sbILocalDatabaseSmartMediaList)
            return false;
        }
        break;
      }

      // By default return true if there is at least one item selected
      return playlist.tree.view.selectionCount > 0;
    },

    onCommand: function( id, value, host )
    {
      if ( id )
      {
        // Was it from the toolbarbutton?
        var tbb = (host == "toolbar");
        switch( id )
        {
          case "library_cmd_play":
            var index = this.m_Playlist.tree.view.selection.currentIndex;
            if (index >= 0) {
              var gPPS = Cc["@songbirdnest.com/Songbird/PlaylistPlayback;1"]
                           .getService(Ci.sbIPlaylistPlayback);
              gPPS.playView(this.m_Playlist.mediaListView, index);
            }
          break;
          case "library_cmd_edit":
            if ( this.m_Playlist.tree.currentIndex != -1 )
            {
              if ( tbb || this.m_Playlist.tree.view.selectionCount > 1 )
              {
                // Edit the entire track
                this.m_Playlist.sendEditorEvent();
              }
              else
              {
                // Edit the context cell
                this.m_Playlist.startCellEditing();
              }
            }
          break;
          case "library_cmd_addtoplaylist":
            if ( this.m_Playlist.tree.currentIndex != -1 )
            {
              // add the currently selected track to a (possibly new) playlist
              this.m_Playlist.addToPlaylist();
            }
          break;
          case "library_cmd_remove":
            this.m_Playlist.removeSelectedTracks();
          break;
          case "library_cmd_burntocd":
            if ( this.m_Playlist.tree.currentIndex != -1 )
            {
              // Repurpose the command to act as if a doubleclick
              this.m_Playlist.sendBurnToCDEvent();
            }
          break;
        }
      }
    },
    
    // The object registered with the sbIPlaylistSource interface acts 
    // as a template for instances bound to specific playlist elements
    duplicate: function()
    {
      var obj = {};
      for ( var i in this )
      {
        obj[ i ] = this[ i ];
      }
      return obj;
    },
    
    setMediaList: function( playlist )
    {
      // Ah.  Sometimes, things are being secure.
      if ( playlist.wrappedJSObject )
        playlist = playlist.wrappedJSObject;
      this.m_Playlist = playlist;
    },
    
    QueryInterface : function(aIID)
    {
      if (!aIID.equals(Components.interfaces.sbIPlaylistCommands) &&
          !aIID.equals(Components.interfaces.nsISupportsWeakReference) &&
          !aIID.equals(Components.interfaces.nsISupports)) 
      {
        throw Components.results.NS_ERROR_NO_INTERFACE;
      }
      
      return this;
    }
    
  } // end of sbPlaylistCommands
  
  
  // Helper function to extract and unescape a query string param
  // from the given url string
  function getQueryStringParam(param, url) {
            
    // Build a regular expression to extract param=string 
    var re = new RegExp("[&\\?]" + param + "=([\\w%]*)(&.*)?$");
    
    var results = re.exec(url);    
    if (results && results.length >= 2) {
      return unescape(results[1]);
    }
    return "";
  }
  
  function LocalLoad()
  {
    try
    { 
      // Default values, in case we get confused
      var libraryManager = Components.classes["@songbirdnest.com/Songbird/library/Manager;1"]
                                     .getService(Components.interfaces.sbILibraryManager);
      var libraryGUID = libraryManager.mainLibrary.guid;
      var mediaListGUID = "library";
      
      var url = window.location.href;

      // Cook the mediaListGUID from the magic browser uri?
      // Extract things like ?library,main@library.songbirdnest.com
      var libraryStrings = /\?((\w+),)?([\w@\.-]+)/.exec(url);
      if (libraryStrings && libraryStrings.length == 4) {
        // Match form ?library,main@library.songbirdnest.com
        if (libraryStrings[2]) {
          mediaListGUID = libraryStrings[2];
          libraryGUID = libraryStrings[3];
        // Match form ?main@library.songbirdnest.com
        } else {
          mediaListGUID = libraryStrings[3];      
        }
      }

      // Assuming we have any clue
      if ( ( mediaListGUID.length > 0 ) && ( libraryGUID.length > 0 ) )
      {
        // Get the correct sbILibrary
        var libraryManager = Components.classes["@songbirdnest.com/Songbird/library/Manager;1"].
                              getService(Components.interfaces.sbILibraryManager);
        var library = libraryManager.getLibrary( libraryGUID );

        // Then the sbIMediaList
        var mediaList = null;
        if ( mediaListGUID == "library" )
          mediaList = library
        else
          mediaList = library.getMediaItem( mediaListGUID );
          
        // Doublecheck that you actually have what you think you have.
        if ( mediaList )
        {
          mediaList = mediaList.QueryInterface(Components.interfaces.sbIMediaList);
        }
        
        // And if you do, use it.  
        if ( mediaList )
        {
          var view = mediaList.createView();
          var filter = view.cascadeFilterSet;
          filter.appendSearch(["*"], 1);
          filter.appendFilter("http://songbirdnest.com/data/1.0#year");
          filter.appendFilter("http://songbirdnest.com/data/1.0#artistName");
          filter.appendFilter("http://songbirdnest.com/data/1.0#albumName");
          
          // If a search parameter was passed in, use it
          var searchTerm = getQueryStringParam("search", url);
          if (searchTerm == "") {
            filter.set(0, [], 0);
          }
          else {
            filter.set(0, [searchTerm], 1);
          }
          
          var playlist = document.getElementById("playlist_test");
          SBLibraryCommands.m_Playlist = playlist;
          playlist.bind(view, SBLibraryCommands);
        }
        else
        {
          // Bad bad bad.
        }
      }      
    }
    catch ( err )
    {
      alert( err );
    }
  }
}
catch ( err )
{
  alert( err );
}
  ]]>
  </script>

</window>

