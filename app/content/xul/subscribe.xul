<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css" type="text/css"?>

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<window
 xmlns:html="http://www.w3.org/1999/xhtml"
 xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
 xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
 id="subscribe"
 title="&subscribe.title;"
 onload="doLoad();"
 onkeypress="onKeyPress(event);"
 flex="1"
 hidechrome="true"
  
 spacers_drag_window="true"
>

  <windowregion/>
  
  <sb-sys-outer-frame resizers="none" flex="1">
    <sb-sys-dialog-titlebar/>
    
    <hbox align="center">
      <label class="dialog_label" value="URL:"/>
      <textbox class="dialog_textbox" id="subscribe_url" />
    </hbox>
    <spacer height="5"/>
    <hbox class="sb_faceplate" align="center">
    <spacer width="40"/>
    <label class="dialog_label" id="auto_subscribe_label" label="&subscribe.autocheck;"/>
    <textbox class="dialog_textbox" id="subscribe_interval" />
    <menulist id="subscribe_interval_unit" >
      <menupopup id="subscribe_interval_unit_popup">
        <menuitem id="subscribe_interval_days" label="&subscribe.days;" value="days"/>
        <menuitem id="subscribe_interval_hours" label="&subscribe.hours;" value="hours"/>
        <menuitem id="subscribe_interval_minutes" label="&subscribe.minutes;" value="minutes" />
      </menupopup>
    </menulist>
    </hbox>
    <spacer height="10"/>             
    <label class="dialog_label" value="&subscribe.destinationfolder;"/>
    <hbox>
      <textbox class="dialog_textbox" id="subscribe_folder_path" flex="1"/>
      <button id="button_browse" label="&window.browse;" class="dialog_button sb_faceplate" oncommand="doBrowse();"/>
    </hbox>        
    <spacer height="8"/>           
    <hbox>
      <spacer flex="1"/>           
      <button id="button_ok" label="&window.ok;" class="dialog_button sb_faceplate"
              oncommand="if ( doOK() ) onExit( );"/>
      <spacer width="5"/>
      <button id="button_cancel" label="&window.cancel;" class="dialog_button sb_faceplate"
              oncommand="if ( doCancel() ) onExit( );"/>
    </hbox>
  </sb-sys-outer-frame>
 
  <!-- SCRIPTS -->
  <script type="application/x-javascript" src="chrome://songbird/content/scripts/dragWindow.js" />
  <script type="application/x-javascript" src="chrome://songbird/content/scripts/window_utils.js" />
  <script type="application/x-javascript" src="chrome://songbird/content/scripts/sbDataRemoteUtils.js" />
  <script type="application/x-javascript" src="chrome://songbird/content/scripts/songbird_interfaces.js" />
  <script type="application/x-javascript" src="chrome://songbird/content/scripts/dynamic_playlist_updater.js" />
  <script type="application/x-javascript" src="chrome://songbird/content/scripts/messagebox.js" />

  <script>
  <![CDATA[
    function onKeyPress(event)
    {
      if ( event.keyCode == 13 ) {          // enter
        if ( doOK() ) onExit();
      } else if ( event.keyCode == 27 ) {   // ESC
          if ( doCancel() ) onExit();
      }
    }

    function doLoad()
    {
      const SUBSCRIBE_FOLDER_KEY = "download.folder";
      try
      {
        var data = null;
        // pull data out of arguments, if present
        if ( window.arguments && window.arguments[0] )
          data = window.arguments[0];

        // get handles on the things we want to pre-populate (if we have data)
        var srcURLTextbox = document.getElementById( "subscribe_url" );
        var timeTextbox = document.getElementById( "subscribe_interval" );
        var unitMenulist = document.getElementById( "subscribe_interval_unit" );
        var destURLTextbox = document.getElementById( "subscribe_folder_path" );

        // pull the destination folder from the subscription url
        destURLTextbox.value = SBDataGetStringValue( SUBSCRIBE_FOLDER_KEY );

        // populate the entry fields
        if (data && data.edit) {
          srcURLTextbox.value = data.url;
          var time = parseInt(data.time);
          var units = "minutes";
          if (time > 59) {
            if ( time % 60 == 0) {
              time = time / 60;
              units = "hours";
              if (time % 24 == 0) {
                time = time / 24;
                units = "days";
              }
            }
          }
          timeTextbox.value = time;
          unitMenulist.value = units;
        }
        else {
          // set defaults, sometimes we get an url
          srcURLTextbox.value = (data && data.url) ? data.url : "http://";
          timeTextbox.value = "1";
          unitMenulist.value = "days";
        }

        // focus the ok button by default
        var ok = document.getElementById( "button_ok" );
        ok.focus();
      }
      catch(err)
      {
        alert( "subscribe.xul - doLoad - " + err );
      }
    }

    function doOK()
    {
      const SUBSCRIBE_FOLDER_KEY = "download.folder";
      try {
        // Make sure the folder is valid?
        var dstURLTextbox = document.getElementById( "subscribe_folder_path" );
        var folder = dstURLTextbox.value;
        var localFile = (Components.classes["@mozilla.org/file/local;1"]).createInstance(Components.interfaces.nsILocalFile);
        try {
          localFile.initWithPath( folder );
          
          // Thou shalt not.
          if ( ! localFile.isDirectory() ) {
            gPrompt.alert( window, 
                          SBString( "subscribe.selectvalidfolder.title", "Invalid folder" ),
                          SBString( "subscribe.selectvalidfolder.msg", "Please select a valid destination folder for download." ) );
            return false;
          }
        }
        catch ( err ) {
          gPrompt.alert( window, 
                        SBString( "subscribe.selectvalidfolder.title", "Invalid folder" ),
                        SBString( "subscribe.selectvalidfolder.msg", "Please select a valid destination folder for download." ) );
          return false;
        }

        // XXXredfive - in the near future change this to set the value on the
        //   dynamic playlist itself instead of forcing all dynamic playlists
        //   into a single directory. (need db schema changes)
        SBDataSetStringValue( SUBSCRIBE_FOLDER_KEY, folder );

        // pull the rest of the data from the dialog (and parse it)
        var url = document.getElementById( "subscribe_url" ).value;
        var time = parseInt( document.getElementById( "subscribe_interval" ).value );
        var unit = document.getElementById("subscribe_interval_unit").value;

        if ( time == 0 ) {
          gPrompt.alert( window, 
                        SBString( "subscribe.selectvalidtime.title", "Invalid Update Interval" ),
                        SBString( "subscribe.selectvalidtime.msg", "Please select a valid time for automatic update." ) );
          return false;
        }
        
        switch(unit) {
          case "days": time = time * 24 * 60; break;
          case "hours": time = time * 60; break;
        }

        //
        // We have collected the data from the dialog, now modify an existing
        // playlist or create a new one.
        //

        var playlistManager = new sbIPlaylistManager();
        var dbQuery = new sbIDatabaseQuery();
        dbQuery.setAsyncQuery(false);

        // pull data out of arguments, if present
        var data = null;
        if ( window.arguments && window.arguments[0] )
          data = window.arguments[0];

        if (data && data.edit && data.guid && data.table) {
          // we're only editing an existing DynamicPlaylist so get it from the manager

          // set the database guid
          dbQuery.setDatabaseGUID(data.guid);

          var playlist = playlistManager.getDynamicPlaylist(data.table, dbQuery);
          if (playlist) {
            playlist.setPeriodicity(time, false);
            playlist.setURL(url, false);
            playlist.setDescription(url);
            playlist.setType(url);
          }
        }
        else {
          // we don't have all the info we need to edit an existing playlist so create a new one.

          dbQuery.setDatabaseGUID( "songbird" );
          var readable_name = "";
          if ( data.readable_name )
            readable_name = data.readable_name + " ";
          else
            readable_name = getServer( url );

          var guid = Components.classes["@mozilla.org/uuid-generator;1"]
                     .createInstance(Components.interfaces.nsIUUIDGenerator)
                     .generateUUID();

          playlistManager.createDynamicPlaylist(guid, readable_name, url, url, url, time, dbQuery);
        }

        // Run the dynamic playlist updater to download the new playlist.
        SBDataFireEvent( "dynamic.playlist.update" );
      
        if ( data ) {
          data.value = dstURLTextbox.value;
          data.retval = "ok";
        }
      }
      catch ( err ) {
        alert( "subscribe.xul - doOK - " + err );
      }
      return true;
    }

    function doCancel() 
    {
      if ( window.arguments && window.arguments[0] )
      {
        var dstURLTextbox = document.getElementById( "subscribe_folder_path" );
        window.arguments[0].value = dstURLTextbox.value;
        window.arguments[0].retval = "cancel";
      }
      return true;
    }

    function getServer( url )
    {
      var retval = "";
      try
      {
        var aURL = Components.classes["@mozilla.org/network/standard-url;1"].createInstance(Components.interfaces.nsIURL);
        aURL.spec = url;
        var host = aURL.host;
        var left = host.indexOf(".");
        var right = host.lastIndexOf(".");
        if ( left != right )
        {
          host = host.substr( left + 1, host.length );
        }
        retval = host;
      }
      catch (e) {}
      return retval;
    }
    function doBrowse()
    {
      const CONTRACTID_FILE_PICKER = "@mozilla.org/filepicker;1";
      var nsIFilePicker = Components.interfaces.nsIFilePicker;
      var fp = Components.classes[CONTRACTID_FILE_PICKER].createInstance(nsIFilePicker);
      fp.init( window, "", nsIFilePicker.modeGetFolder);
      var res = fp.show();
      if ( res == nsIFilePicker.returnOK )
      {
        var dstURLTextbox = document.getElementById( "subscribe_folder_path" );
        dstURLTextbox.value = fp.file.path;
      }
    }
  ]]>
  </script>
</window>

