<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2006 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the “GPL”).
// 
// Software distributed under the License is distributed 
// on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css" type="text/css"?>
<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >
<window
 xmlns:html="http://www.w3.org/1999/xhtml"
 xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
 xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
 id="smart_playlist"
 title="&smart.window;"
 onload="doLoad();" 
 onkeypress="if ( event.keyCode == 13 ) { if ( doOK() ) onExit(); } else if ( event.keyCode == 27 ) { if ( doCancel() ) onExit(); }"
 flex="1"
 hidechrome="true"
>


<!--windowregion/-->
<stack flex="1">

  <vbox class="sb_faceplate, dialog" flex="1" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();">
    <hbox class="sb_faceplate">
        <image id="chrome_nw" class="sb_faceplate"/>
        <image id="chrome_n" class="sb_faceplate" flex="1"/>
        <image id="chrome_ne" class="sb_faceplate"/>
    </hbox>
    <hbox class="sb_faceplate" flex="1">
        <image id="chrome_w" class="sb_faceplate"/>
        <spacer onmousedown="onBkgDown( event );" onmouseup="onBkgUp();" flex="1"/>
        <image id="chrome_e" class="sb_faceplate"/>
    </hbox>
    <hbox class="sb_faceplate">
        <image id="chrome_sw" class="sb_faceplate"/>
        <image id="chrome_s" class="sb_faceplate" flex="1"/>
        <image id="chrome_se" class="sb_faceplate"/>
    </hbox>
  </vbox>
  
  <vbox class="sb_faceplate" flex="1">
    <hbox class="sb_faceplate" id="frame_top_resizers">
      <x_resizer id="frame_resize_to" dir="topleft" x_style="cursor: nw-resize;"/>
      <x_resizer id="frame_resize_t" dir="top" x_style="cursor: n-resize;" flex="1"/>
      <x_resizer id="frame_resize_to" dir="topright" x_style="cursor: ne-resize;"/>
    </hbox>
    <hbox class="sb_faceplate" flex="1">
    
    <hbox class="sb_faceplate" id="frame_middle_resizers" flex="1">
      
        <vbox class="sb_faceplate">
          <x_resizer id="frame_resize_mo" dir="topleft" x_style="cursor: nw-resize;"/>
          <x_resizer id="frame_resize_m" dir="left" x_style="cursor: w-resize;" flex="1"/>
          <x_resizer id="frame_resize_mo" dir="bottomleft" x_style="cursor: sw-resize;"/>
        </vbox>
        
        <vbox class="sb_faceplate" id="chrome_bkgd" flex="1">
        
          <hbox id="window_top" class="sb_faceplate" >
            <label id="app_title" value="&smart.window;" class="sb_faceplate" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>
            <spacer width="5" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>                    
            <spacer flex="1" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>           
            <spacer width="5" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>
            <button id="sysbtn_close" class="sb_faceplate" oncommand="onExit( );" tooltiptext="&tooltip.exit;"/>
          </hbox>
          
          <!-- Commented out until we have multi-library functionality. -->
          <!-- hbox class="sb_faceplate" id="smartpl_select_library" align="center">
            <label value="&smart.library;" control="smart_library" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>
            <menulist id="smart_library_drop" value="&songbird;">
              <menupopup id="smart_library_popup">
                <menuitem id="smart_library_songbird" label="&songbird;" value="songbird" />
              </menupopup>
            </menulist>
            <spacer flex="1" height="20" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>           
          </hbox -->
          
          
        <vbox flex="1" class="formgrouping"><!-- start of grouping -->
          <vbox flex="1">
            <hbox align="center">
              <checkbox class="dialog_checkbox" id="smart_match_check" label="&smart.match;" checked="false"/>
              <menulist id="smart_any_list" value="any">
                <menupopup id="smart_any_list_popup" >
                  <menuitem id="smart_any_list_any" label="&smart.any;" value="any" />
                  <menuitem id="smart_any_list_all" label="&smart.all;" value="all" />
                </menupopup>
              </menulist>       
              <label class="dialog_label" value="&smart.following;"/>
              <spacer flex="1" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>           
            </hbox>
            <spacer height="2" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>
            
            <!-- all the magic, baby -->  
            <!-- eventually we will have to declare different condition types for string, int, date, etc -->
            <smart_conditions id="smart_conditions" flex="1"
              num_conditions="6"
              condition1="&smart.contains;"
              condition2="&smart.not_contain;"
              condition3="&smart.is;"
              condition4="&smart.is_not;"
              condition5="&smart.starts;"
              condition6="&smart.ends;"
            />
              
          </vbox>
          
          <spacer height="5" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>  
         
          <hbox class="sb_faceplate" align="center">
            <checkbox class="dialog_checkbox" id="smart_songs_check" label="&smart.limit;" checked="false"/>
            <textbox class="dialog_textbox" id="smart_songs_count" value="20"/>
            <menulist id="smart_songs_list" value="&smart.songs;">
              <menupopup id="smart_songs_list_popup">
                <menuitem id="smart_selected_list_minutes" label="&smart.minutes;" value="minutes" />
                <menuitem id="smart_selected_list_hours" label="&smart.hours;" value="house" />
                <menuitem id="smart_selected_list_mb" label="&smart.mb;" value="MB"/>
                <menuitem id="smart_selected_list_gb" label="&smart.gb;" value="GB" />
                <menuitem id="smart_selected_list_songs" label="&smart.songs;" value="songs" />
              </menupopup>
            </menulist>
            <spacer width="8"/>
            <label value="Selected by" control="smart_selected_list" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>
            <menulist id="smart_selected_list" value="&smart.random;">
              <menupopup id="smart_selected_list_popup" >
                <menuitem id="smart_selected_list_random" label="&smart.random;" value="random" />
                <menuitem id="smart_selected_list_album" label="&smart.album;" value="album" />
                <menuitem id="smart_selected_list_artist" label="&smart.artist;" value="artist" />
                <menuitem id="smart_selected_list_genre" label="&smart.genre;" value="genre" />
                <menuitem id="smart_selected_list_title" label="&smart.title;" value="title" />
                <menuitem id="smart_selected_list_high_rating" label="&smart.high_rating;" value="high_rating" />
                <menuitem id="smart_selected_list_low_rating" label="&smart.low_rating;" value="low_rating" />
                <menuitem id="smart_selected_list_most_recent" label="&smart.most_recent;" value="most_recent" />
                <menuitem id="smart_selected_list_least_recent" label="&smart.least_recent;" value="least_recent" />
                <menuitem id="smart_selected_list_most_often" label="&smart.most_often;" value="most_often" />
                <menuitem id="smart_selected_list_least_often" label="&smart.least_often;" value="least_often" />
                <menuitem id="smart_selected_list_most_added" label="&smart.most_added;" value="most_added" />
                <menuitem id="smart_selected_list_least_added" label="&smart.least_added;" value="least_added" />
              </menupopup>
            </menulist>       
            <spacer flex="1" height="25" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>           
          </hbox>
          </vbox><!-- end of grouping -->
          <spacer height="5" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>
          <!--hbox>
            <label id="smart_playlist_name_label" value="Name your playlist smarty:"/>
            <textbox class="dialog_textbox" id="smart_playlist_name" flex="1"/>
          </hbox> 
          <spacer height="5" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/-->
          <hbox>
            <spacer flex="1" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>           
            <button id="button_ok" label="&window.ok;" class="dialog_button sb_faceplate" oncommand="if ( doOK() ) onExit( );"/>
            <spacer width="5" onmousedown="onBkgDown( event );" onmouseup="onBkgUp();"/>
            <button id="button_cancel" label="&window.cancel;" class="dialog_button sb_faceplate" oncommand="if ( doCancel() ) onExit( );"/> 
          </hbox>
          </vbox>      
        
      
        <vbox class="sb_faceplate">
          <x_resizer id="frame_resize_mo" dir="topright" x_style="cursor: ne-resize;"/>
          <x_resizer id="frame_resize_m" dir="right" x_style="cursor: e-resize;" flex="1"/>
          <x_resizer id="frame_resize_mo" dir="bottomright" x_style="cursor: se-resize;"/>
        </vbox>
        
      </hbox> <!-- frame_middle_resizers -->
    </hbox>
    <hbox class="sb_faceplate" id="frame_bottom_resizers">
      <x_resizer id="frame_resize_to" dir="bottomleft" x_style="cursor: sw-resize;"/>
      <x_resizer id="frame_resize_t" dir="bottom" x_style="cursor: s-resize;" flex="1"/>
      <x_resizer id="frame_resize_to" dir="bottomright" x_style="cursor: se-resize;"/>
    </hbox>
  </vbox>


   
</stack>
 
<!-- SCRIPTS -->
<script type="application/x-javascript" src="chrome://songbird/content/scripts/songbird.js" />
  <script>
  <![CDATA[
    function doLoad()
    {
      document.getElementById( "smart_match_check" ).checked = true;
      
      try
      {
        var smartConditions = document.getElementById( "smart_conditions" );
        var use_new = true;
        if ( window.arguments && 
            window.arguments[0] &&
            window.arguments[0].guid &&
            window.arguments[0].table)
        {
        
          const PlaylistManager = new Components.Constructor("@songbirdnest.com/Songbird/PlaylistManager;1", "sbIPlaylistManager");
          var aPlaylistManager = (new PlaylistManager()).QueryInterface(Components.interfaces.sbIPlaylistManager);
          
          var aDBQuery = Components.classes["@songbirdnest.com/Songbird/DatabaseQuery;1"].createInstance();
          aDBQuery = aDBQuery.QueryInterface(Components.interfaces.sbIDatabaseQuery);

          var strGUID = window.arguments[0].guid;
          var strTable = window.arguments[0].table;
          aDBQuery.setDatabaseGUID(strGUID);
                  
          var aPlaylist = aPlaylistManager.getSmartPlaylist(strTable, aDBQuery);
          if(aPlaylist)
          {
            document.playlist = aPlaylist;
            document.queryObj = aDBQuery;
            
            var strLibrary = aPlaylist.getLibrary();
            var strLimit = aPlaylist.getLimit();
            var strLimitType = aPlaylist.getLimitType();
            var strSelectedBy = aPlaylist.getSelectedBy();
            var strMatch = aPlaylist.getMatch();
            
            if(strLimit != "0")
              document.getElementById( "smart_songs_check" ).checked = true;
            
//            document.getElementById( "smart_library_drop" ).value = strLibrary;
            document.getElementById( "smart_songs_count" ).value = strLimit;
            document.getElementById( "smart_songs_list" ).value = strLimitType;
            document.getElementById( "smart_selected_list" ).value = strSelectedBy;
            document.getElementById( "smart_any_list" ).value = strMatch;
            
            if(smartConditions)
            {
              var conditionsArray = new Array();
              aPlaylist.getAllConstraints();
              
              var aResObj = aDBQuery.getResultObject();
              var rowCount = aResObj.getRowCount();
              var node = null, i = 0;
              
              for(; i < rowCount; ++i)
              {
                node = new Object;
                
                node.metadata = aResObj.getRowCellByColumn(i, "column_name");
                
                var conditionName = aResObj.getRowCellByColumn(i, "constraint_name");
                switch(conditionName)
                {
                  case "contains": conditionName = 0; break;
                  case "does not contain": conditionName = 1; break;
                  case "is": conditionName = 2; break;
                  case "is not": conditionName = 3; break;
                  case "starts with": conditionName = 4; break;
                  case "ends with": conditionName = 5; break;
                }
                
                node.condition = conditionName;
                node.value = aResObj.getRowCellByColumn(i, "constraint_value");
                
                conditionsArray.push(node);
              }
              
              smartConditions.setConditions(conditionsArray);
              use_new = false; // Don't make a new one, we set conditions.
            }
          }
        }
        if ( use_new )
        {
          smartConditions.animateNewCondition();
        }
      }
      catch(err) { alert(err); }
    }
    function doOK()
    {
      const PlaylistManager = new Components.Constructor("@songbirdnest.com/Songbird/PlaylistManager;1", "sbIPlaylistManager");
      var aPlaylistManager = (new PlaylistManager()).QueryInterface(Components.interfaces.sbIPlaylistManager);
      
      var queryObj = Components.classes["@songbirdnest.com/Songbird/DatabaseQuery;1"].createInstance();
      queryObj = queryObj.QueryInterface(Components.interfaces.sbIDatabaseQuery);
      
      var aUUIDGenerator = Components.classes["@mozilla.org/uuid-generator;1"].createInstance();
      aUUIDGenerator = aUUIDGenerator.QueryInterface(Components.interfaces.nsIUUIDGenerator);

      var library = "songbird"; // document.getElementById( "smart_library_drop" ).value; // koshi decided he didn't like this

      var use_limit = document.getElementById( "smart_songs_check" ).checked;
      var use_match = document.getElementById( "smart_match_check" ).checked;
     
      var limit = use_limit ? document.getElementById( "smart_songs_count" ).value : "0";
      var limit_type = use_limit ? document.getElementById( "smart_songs_list" ).value : "";
      var selected_by = use_limit ? document.getElementById( "smart_selected_list" ).value : "";
      var match = use_match ? document.getElementById( "smart_any_list" ).value : "";
      
      // Go ask the dumb conditions object what it has inside it.
      var conditions = document.getElementById( "smart_conditions" );
      var conditions_array = conditions.getConditions();

      queryObj.setAsyncQuery(false);
      queryObj.setDatabaseGUID(library);      
      aPlaylistManager.getSmartPlaylistList(queryObj);

      var resObj = queryObj.getResultObject();
      var playlistCount = resObj.getRowCount() + 1;

      var newPlaylist = true;
      var name = "";
      var readable_name = "";

      if(!document.playlist)
      {
        name = aUUIDGenerator.generateUUID();
        readable_name = "Smart Playlist " + playlistCount;
      }
      else
      {
        newPlaylist = false;
        name = document.playlist.getName();
        readable_name = document.playlist.getReadableName();
        document.playlist.removeAllConstraints(false);
      }

      var description = "Smart Playlist";
      var aSmartPlaylist = aPlaylistManager.createSmartPlaylist(name, readable_name, description, "User", library, limit, limit_type, selected_by, match, queryObj);
      
      // For now, just display a debug box
      /*
      var text = "Library GUID: " + library + "\n";
      text += "Limit: " + use_limit + " - " + limit + "\n";
      text += "Limit Type: " + limit_type + "\n";
      text += "Selected By: " + selected_by + "\n";
      text += "Match On: " + use_match + " - " + match + "\n";
      text += conditions_array.length + " condition" + ( (conditions_array.length == 1) ? "" : "s" ) + ":\r\n";
      */
      
      var conditionName = "";
      for ( var i in conditions_array )
      {
        var node = conditions_array[ i ];
        //text += " ---- " + node.metadata + " " + node.condition_name + "(" + node.condition + ") " + node.value + "\r\n";
        
        switch(node.condition)
        {
          case 0: conditionName = "contains"; break;
          case 1: conditionName = "does not contain"; break;
          case 2: conditionName = "is"; break;
          case 3: conditionName = "is not"; break;
          case 4: conditionName = "starts with"; break;
          case 5: conditionName = "ends with"; break;
        }
        
        aSmartPlaylist.addConstraint(node.metadata, conditionName, node.value, false);
      }
      //alert( text );
      
      aSmartPlaylist.rebuildPlaylist();
      
      if ( window.arguments && window.arguments[0] )
      {
        window.arguments[0].retval = "ok";
      }
      
      return true;
    }
    function doCancel()
    {
      if ( window.arguments && window.arguments[0] )
      {
        window.arguments[0].retval = "cancel";
      }
      
      return true;
    }
  ]]>
  </script>
  
  
</window>

