<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
 -->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css" type="text/css"?>
<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<window
  id="sb-library-page"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:rdf="http://www.w3.org/TR/WD-rdf-syntax#"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  onload="LocalLoad();"
  windowtype="Songbird:Library"
>
  <playlist id="sb-library-page-playlist" 
      flex="1"
      enableColumnDrag="true"
      persist="column-list column-widths"
      editable="true"
  />

  <!-- Extension Overlay Support -->
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/overlayLoader.js" />

  <!-- Load the sbPlaylistsource helper -->
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/songbirdInterfaces.js"/>
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/sbDataRemoteUtils.js"/>
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/metrics.js"/>
  <script type="application/x-javascript"  
   src="chrome://songbird/content/scripts/windowUtils.js"/> 
  <script type="application/x-javascript"  
   src="chrome://songbird/content/scripts/kPlaylistCommands.js"/> 
  <script type="application/x-javascript"  
   src="chrome://songbird/content/scripts/playerOpen.js"/> 

  <!-- Local hardcoded sample js -->
  <script type="application/x-javascript">
  <![CDATA[
if (typeof(Cc) == "undefined")
 const Cc = Components.classes;
if (typeof(Ci) == "undefined")
 const Ci = Components.interfaces;

if (typeof(SBProperties) == "undefined") {
  Components.utils.import("resource://app/components/sbProperties.jsm");
  if (!SBProperties)
    throw new Error("Import of sbProperties module failed!");
}

try
{
  // Helper function to extract and unescape a query string param
  // from the given url string
  function getQueryStringParam(param, url) {
            
    // Build a regular expression to extract param=string 
    var re = new RegExp("[&\\?]" + param + "=([\\w%]*)(&.*)?$");
    
    var results = re.exec(url);    
    if (results && results.length >= 2) {
      return unescape(results[1]);
    }
    return "";
  }
  
  function LocalLoad()
  {
    try
    { 
      // Default values, in case we get confused
      var libraryManager = Components.classes["@songbirdnest.com/Songbird/library/Manager;1"]
                                     .getService(Components.interfaces.sbILibraryManager);
      var libraryGUID = libraryManager.mainLibrary.guid;
      var mediaListGUID = "library";
      
      var url = window.location.href;

      // Cook the mediaListGUID from the magic browser uri?
      // Extract things like ?library,main@library.songbirdnest.com
      var libraryStrings = /\?(([\w\.-]+),)?([\w\.-]+)/.exec(url);
      if (libraryStrings && libraryStrings.length == 4) {
        // Match form ?library,main@library.songbirdnest.com
        if (libraryStrings[2]) {
          mediaListGUID = libraryStrings[2];
          libraryGUID = libraryStrings[3];
        // Match form ?main@library.songbirdnest.com
        } else {
          mediaListGUID = libraryStrings[3];      
        }
      }

      // Assuming we have any clue
      if ( ( mediaListGUID.length > 0 ) && ( libraryGUID.length > 0 ) )
      {
        // Get the correct sbILibrary
        var libraryManager = Components.classes["@songbirdnest.com/Songbird/library/Manager;1"].
                              getService(Components.interfaces.sbILibraryManager);
        var library = null;
        
    //
    // Bulletproof the code from things being deleted
    //        
        try {
          // Try to get the requested library
          library = libraryManager.getLibrary( libraryGUID );
        } catch(e) {
          // If something bad happens, freak out.
          if ( history.length > 1 ) {
            // If possible, hit the back button.
            history.back();
            return;
          }
          // Otherwise, just show the main library?  Ugly -- doesn't change the url.
          mediaListGUID = "library";
          library = libraryManager.mainLibrary;
        }

        // Then the sbIMediaList
        var mediaList = null;
        if ( mediaListGUID == "library" )
          mediaList = library;
        else try {
          mediaList = library.getMediaItem( mediaListGUID );
        } catch(e) {
          // If something bad happens, freak out.
          if ( history.length > 1 ) {
            // If possible, hit the back button.
            history.back();
            return;
          }
          // Otherwise, just show the mediaList's library?  Ugly -- doesn't change the url.
          mediaListGUID = "library";
          mediaList = library;
        }
          
        // Doublecheck that you actually have what you think you have.
        if ( mediaList )
        {
          mediaList = mediaList.QueryInterface(Components.interfaces.sbIMediaList);
        }
        
        // And if you do, use it.  
        if ( mediaList )
        {
          var view = mediaList.createView();

          // By default, we never want to show lists and hidden things in the
          // playlist
          view.setFilters(SBProperties.createArray([
            [SBProperties.isList, "0"],
            [SBProperties.hidden, "0"]
          ]));

          var filter = view.cascadeFilterSet;
          filter.appendSearch([
            SBProperties.artistName,
            SBProperties.albumName,
            SBProperties.trackName
          ], 3);
          
          // If we're a library, set our desired filterlists
          if ( mediaListGUID == "library" ) {
            // Restore the last library filterset or set our defaults
            var desiredFilterSet;
            var defaultFilterSet = [
              SBProperties.year,
              SBProperties.artistName,
              SBProperties.albumName
            ];
            var savedFilterSet = SBDataGetStringValue( "library.filterset" );
            if ( savedFilterSet.length > 0 ) {
              desiredFilterSet = savedFilterSet.split(";");
            } else {
              desiredFilterSet = defaultFilterSet;
            }
            
            for ( var i = 0, end = desiredFilterSet.length; i < end; i++ ) {
              filter.appendFilter(desiredFilterSet[i]);
            }
          }

          // If a search parameter was passed in, use it
          var searchTerm = getQueryStringParam("search", url);
          if (searchTerm == "") {
            filter.set(0, [], 0);
          }
          else {
            filter.set(0, [searchTerm], 1);
          }
          
          var playlist = document.getElementById("sb-library-page-playlist");
          var mgr = new sbIPlaylistCommandsManager();
          var cmds = mgr.request(kSONGBIRD_PLAYLIST_COMMANDS_MEDIAITEM_DEFAULT);
          playlist.bind(view, cmds);
        }
        else
        {
          // Bad bad bad.
        }
      }      
    }
    catch ( err )
    {
      alert( err );
    }
  }
}
catch ( err )
{
  alert( err );
}
  ]]>
  </script>

</window>



