<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
 -->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css" type="text/css"?>
<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<window
  id="sb-library-page"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:rdf="http://www.w3.org/TR/WD-rdf-syntax#"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  onload="window.mediaListPage.onLoad();"
  onunload="window.mediaListPage.onUnload();"
  windowtype="Songbird:Library"
>
<description id="legacy_warning" hidden="true" style="color:#0f100f !important; 
                    background-color:#ffffcc !important;  
                    padding:1px !important; margin:0px 0px 10px 0px !important;
                    vertical-align: middle !important;
                    font-size:xx-small !important;" >
  WARNING: This playlist was initialized using the legacy querystring method.
  Remove this message by 0.5RC1.
</description>

  <sb-playlist id="sb-library-page-playlist" 
      flex="1"
      enableColumnDrag="true"
      persist="column-list column-widths"
      editable="true"
  />


  <!-- TODO: Remove as many of these as possible? --> 
  
  <!-- Extension Overlay Support -->
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/overlayLoader.js" />

  <!-- Load the sbPlaylistsource helper -->
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/songbirdInterfaces.js"/>
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/sbDataRemoteUtils.js"/>
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/metrics.js"/>
  <script type="application/x-javascript"  
   src="chrome://songbird/content/scripts/windowUtils.js"/> 
  <script type="application/x-javascript"  
   src="chrome://songbird/content/scripts/playerOpen.js"/> 

  <!-- Local hardcoded sample js -->
  <script type="application/x-javascript">
  <![CDATA[
if (typeof(Cc) == "undefined")
 const Cc = Components.classes;
if (typeof(Ci) == "undefined")
 const Ci = Components.interfaces;

if (typeof(SBProperties) == "undefined") {
  Components.utils.import("resource://app/components/sbProperties.jsm");
  if (!SBProperties)
    throw new Error("Import of sbProperties module failed!");
}

if (typeof(LibraryUtils) == "undefined") {
  Components.utils.import("resource://app/components/sbLibraryUtils.jsm");
  if (!LibraryUtils)
    throw new Error("Import of sbLibraryUtils module failed!");
}

if (typeof(kPlaylistCommands) == "undefined") {
  Components.utils.import("resource://app/components/kPlaylistCommands.jsm");
  if (!kPlaylistCommands)
    throw new Error("Import of kPlaylistCommands module failed!");
}


// TODO Comment
// TODO Make the playlist widget implement sbIMediaListPage and then delegate
// everything to it.  window.mediaListPage = document.getElementById('playlist');
window.mediaListPage = {

  onLoad:  function(e) {
    dump("MATT: mediaListPage.onLoad()!\n");
    
    // The tab hasn't been updated yet, so for now
    // just run the original init functionality.
    if (!this._mediaListView) {
      performLegacyInitialization();
    } else {
    
      // TODO Move this rule out into the page manager
      // If we're a library, set our desired filterlists
      if ( this._mediaListView.mediaList instanceof Ci.sbILibrary ) {
        // Restore the last library filterset or set our defaults
        var desiredFilterSet;
        var defaultFilterSet = [
          SBProperties.year,
          SBProperties.artistName,
          SBProperties.albumName
        ];
        var savedFilterSet = SBDataGetStringValue( "library.filterset" );
        if ( savedFilterSet.length > 0 ) {
          desiredFilterSet = savedFilterSet.split(";");
        } else {
          desiredFilterSet = defaultFilterSet;
        }
        var filter = this._mediaListView.cascadeFilterSet;
        for ( var i = 0, end = desiredFilterSet.length; i < end; i++ ) {
          filter.appendFilter(desiredFilterSet[i]);
        }
      }
    }

    this._playlist = document.getElementById("sb-library-page-playlist");

    // TODO: Get cmds that are appropriate for the list    
    var mgr = new sbIPlaylistCommandsManager();
    var cmds = mgr.request(kPlaylistCommands.MEDIAITEM_DEFAULT);
    
    // Set up the playlist
    this._playlist.bind(this._mediaListView, cmds);
  },

  onUnload:  function(e) {
    dump("MATT: mediaListPage.onUnload()!\n");
    // TODO: This should be good, right?
    // this._playlist.destroy()
  },

  _mediaListView: null,
  
  _playlist: null, 

  get mediaListView()  {
    return this._mediaListView;
  },

  set mediaListView(value)  {
    dump("MATT: mediaListPage.set mediaListView!\n");
    this._mediaListView = value;
  },

  ensureListItemVisible: function(aIndex) {
    // TODO expose this on the playlist binding
    this._playlist.tree.treeBoxObject.ensureRowIsVisible(aIndex);
  }

  // TODO Drag and drop
}






















/**
 * Temporary compatibility functions.  These are only used when sbLibraryPage
 * is loaded using the old querystring method.
 * TODO: REMOVE ALL OF THIS
 */

// Helper function to extract and unescape a query string param
// from the given url string
function getQueryStringParam(param, url) {
          
  // Build a regular expression to extract param=string 
  var re = new RegExp("[&\\?]" + param + "=([\\w%]*)(&.*)?$");
  
  var results = re.exec(url);    
  if (results && results.length >= 2) {
    return unescape(results[1]);
  }
  return "";
}

function performLegacyInitialization()
{
  dump("MATT: libraryPage.performLegacyInitialization \n");

  // TODO remove
  var warning = document.getElementById("legacy_warning");
  warning.hidden = false;

  // Default values, in case we get confused
  var libraryManager = Components.classes["@songbirdnest.com/Songbird/library/Manager;1"]
                                 .getService(Components.interfaces.sbILibraryManager);
  var libraryGUID = libraryManager.mainLibrary.guid;
  var mediaListGUID = "library";
  
  var url = window.location.href;

  // Cook the mediaListGUID from the magic browser uri?
  // Extract things like ?library,main@library.songbirdnest.com
  var libraryStrings = /\?(([\w\.-]+),)?([\w\.-]+)/.exec(url);
  if (libraryStrings && libraryStrings.length == 4) {
    // Match form ?library,main@library.songbirdnest.com
    if (libraryStrings[2]) {
      mediaListGUID = libraryStrings[2];
      libraryGUID = libraryStrings[3];
    // Match form ?main@library.songbirdnest.com
    } else {
      mediaListGUID = libraryStrings[3];      
    }
  }

  // Assuming we have any clue
  if ( ( mediaListGUID.length > 0 ) && ( libraryGUID.length > 0 ) )
  {
    // Get the correct sbILibrary
    var libraryManager = Components.classes["@songbirdnest.com/Songbird/library/Manager;1"].
                          getService(Components.interfaces.sbILibraryManager);
    var library = null;
    
//
// Bulletproof the code from things being deleted
//        
    try {
      // Try to get the requested library
      library = libraryManager.getLibrary( libraryGUID );
    } catch(e) {
      // If something bad happens, freak out.
      try {
        // If possible, hit the back button if there's something to go back to.
        if ( history.previous ) {
          history.back();
          return;
        }
      } catch (e) {}
      // Otherwise, just show the main library?
      location.href =
                "chrome://songbird/content/xul/sbLibraryPage.xul?library," +
                libraryManager.mainLibrary.guid;
      return;
    }

    // Then the sbIMediaList
    var mediaList = null;
    if ( mediaListGUID == "library" )
      mediaList = library;
    else try {
      mediaList = library.getMediaItem( mediaListGUID );
    } catch(e) {
      // If something bad happens, freak out.
      try {
        // If possible, hit the back button if there's something to go back to.
        if ( history.previous ) {
          history.back();
          return;
        }
      } catch (e) {}
      // Otherwise, just show the mediaList's library?
      location.href =
                "chrome://songbird/content/xul/sbLibraryPage.xul?library," +
                library.guid;
      return;
    }
      
    // Doublecheck that you actually have what you think you have.
    if ( mediaList )
    {
      mediaList = mediaList.QueryInterface(Components.interfaces.sbIMediaList);
    }
    
    // And if you do, use it.  
    if ( mediaList )
    {
      var view = mediaList.createView();

      // By default, we never want to show lists and hidden things in the
      // playlist
      view.filterConstraint = LibraryUtils.standardFilterConstraint;

      var filter = view.cascadeFilterSet;
      filter.appendSearch([
        SBProperties.artistName,
        SBProperties.albumName,
        SBProperties.trackName
      ], 3);
      
      // If we're a library, set our desired filterlists
      if ( mediaListGUID == "library" ) {
        // Restore the last library filterset or set our defaults
        var desiredFilterSet;
        var defaultFilterSet = [
          SBProperties.year,
          SBProperties.artistName,
          SBProperties.albumName
        ];
        var savedFilterSet = SBDataGetStringValue( "library.filterset" );
        if ( savedFilterSet.length > 0 ) {
          desiredFilterSet = savedFilterSet.split(";");
        } else {
          desiredFilterSet = defaultFilterSet;
        }
        
        for ( var i = 0, end = desiredFilterSet.length; i < end; i++ ) {
          filter.appendFilter(desiredFilterSet[i]);
        }
      }

      // If a search parameter was passed in, use it
      var searchTerm = getQueryStringParam("search", url);
      if (searchTerm == "") {
        filter.set(0, [], 0);
      }
      else {
        var valArray = searchTerm.split(" ");
        filter.set(0, valArray, valArray.length);
      }
      
      // Handoff to the page!
      // This will be done by the tab.
      window.mediaListPage.mediaListView = view;

    }
    else
    {
      // Bad bad bad.
    }
  }
}

  ]]>
  </script>

</window>
