<?xml version="1.0" encoding="UTF-8"?>
<!-- vim: set sw=2 ts=2 et :miv -->
<!--
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */
-->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://global/content/commonDialog.css"
                 type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css"
                 type="text/css"?>

<!DOCTYPE overlay SYSTEM "chrome://songbird/locale/songbird.dtd">
<overlay id="songbird-device-transcode-error-report-overlay"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <script type="application/x-javascript;version=1.8"
          name="deviceTranscodeOverlayScript"><![CDATA[
  (function(){
    const Cc = Components.classes;
    const Ci = Components.interfaces;
    Components.utils.import("resource://app/jsmodules/StringUtils.jsm");
    Components.utils.import("resource://app/jsmodules/WindowUtils.jsm");

    // A set of devices with events. The key is the device id; only the
    // presence of the key matters.
    var devicesWithEvents = {};
    
    function deviceManagerListener(event) {

      var device = event.origin;
      if (!(device instanceof Ci.sbIDevice)) {
        return;
      }
      
      var msg = SBString("transcode.error.notification.label");

      switch (event.type) {
        case Ci.sbIDeviceEvent.EVENT_DEVICE_TRANSCODE_ERROR: {
          let bag = event.data;
          if (!bag || !(bag instanceof Ci.nsIPropertyBag2)) {
            // no event data, nothing we can do
            break;
          }
          if (bag.hasKey("transcode-error")) {
            let error = bag.get("transcode-error");
            if ((error instanceof Ci.nsIScriptError) &&
                (error instanceof Ci.sbITranscodeError))
            {
              devicesWithEvents[device.id] = true;
            }
          }
          break;
        }
        case Ci.sbIDeviceEvent.EVENT_DEVICE_NOT_ENOUGH_FREESPACE: {
          devicesWithEvents[device.id] = true;
          break;
        }
      }
      
      if (device.isBusy) {
        // The device is still busy; wait until it becomes idle before reporting
        return;
      }
      if (!(device.id in devicesWithEvents)) {
        // this device has no events we want to report
        return;
      }
      
      // If we get here, there is some unreported but interesting event,
      // but the device is now idle
      delete devicesWithEvents[device.id];
      var notificationBox = gBrowser.getNotificationBox();
      var buttons = [
        {
          label: SBString("transcode.error.notification.detail.label"),
          accessKey: SBString("transcode.error.notification.detail.accesskey"),
          callback: function(notification, button) {
            let deviceErrorMonitor =
              Cc["@songbirdnest.com/device/error-monitor-service;1"]
                .getService(Ci.sbIDeviceErrorMonitor);
            let errorItems = deviceErrorMonitor.getDeviceErrors(device);
            WindowUtils.openDialog
              (window,
               "chrome://songbird/content/xul/device/deviceErrorDialog.xul",
               "device_error_dialog",
               "chrome,centerscreen",
               false,
               [ "", device, errorItems, "syncing" ],
               null);
            deviceErrorMonitor.clearErrorsForDevice(device);
          },
          popup: null
        }
      ];
      var notification = notificationBox.appendNotification(
                           msg,
                           event,
                           "chrome://songbird/skin/device/error.png",
                           notificationBox.PRIORITY_CRITICAL_MEDIUM,
                           buttons);
      var onNotificationCommand = function(event) {
        let classes = event.originalTarget.className.split(/\s+/);
        if (classes.indexOf("messageCloseButton") > -1) {
          // the user clicked on the dismiss button; clear the device errors
          let deviceErrorMonitor =
            Cc["@songbirdnest.com/device/error-monitor-service;1"]
              .getService(Ci.sbIDeviceErrorMonitor);
          deviceErrorMonitor.clearErrorsForDevice(device);
        }
      };
      notification.addEventListener("command", onNotificationCommand, false);
    }

    // attach our device event listener
    var deviceManager = Cc["@songbirdnest.com/Songbird/DeviceManager;2"]
                          .getService(Ci.sbIDeviceEventTarget);
    deviceManager.addEventListener(deviceManagerListener);

    // attach our cleanup routine
    addEventListener("unload", function(event) {
      removeEventListener(event.type, arguments.callee, false);
      deviceManager.removeEventListener(deviceManagerListener);
      delete deviceManager;
    }, false);
  })();
  ]]></script>
</overlay>
