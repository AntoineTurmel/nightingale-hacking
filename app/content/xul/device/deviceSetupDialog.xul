<?xml version="1.0"?>
<!--
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */
-->

<!-- Import external definitions. -->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://global/content/commonDialog.css"
                 type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css"
                 type="text/css"?>
<?xml-stylesheet href="chrome://songbird-dialogs/skin/deviceSetup.css"
                 type="text/css"?>

<!DOCTYPE window [
<!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd">
<!ENTITY % songbirdDTD SYSTEM "chrome://songbird/locale/songbird.dtd">
%brandDTD;
%songbirdDTD;
]>

<!-- ***************************************************************************
 *
 * Device setup dialog box.
 *
 *   This dialog box presents a dialog for specifying the initial setup of a
 * device.
 *   A single dialog box argument of type sbIDevice is passed in.
 *
 *************************************************************************** -->

<!-- Device setup dialog box. -->
<dialog
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  id="device_setup_dialog"
  hidechrome="true"
  flex="1"
  type="songbird"
  title="&device.dialog.setup.title;"
  buttons="accept"
  minwidth="500"
  minheight="180"
  resizers="all"
  ondialogaccept="if (deviceSetupDialog.onAccept()) onExit();"
  onload="deviceSetupDialog.onLoad();">

  <!-- *************************************************************************
   *
   * Content.
   *
   ************************************************************************* -->

  <!-- Use Songbird window region. -->
  <windowregion/>

  <notificationbox id="device_setup_notification_box" flex="1">
    <vbox id="setupContainer" flex="1">
      <vbox id="syncContainer">
        <hbox id="nameContainer">
          <label id="setup_name_header"/>
          <textbox id="setup_name_textbox"/>
        </hbox>

        <vbox id="selectorContainer" hidden="true">
          <description id="setup_sync_volume_selector_description">
            &device.dialog.setup.sync.volume.selector.description;
          </description>

          <!-- Device volume selector. -->
          <sb-device-volume-selector id="device_setup_volume_selector"
                                     flex="1"
                                     class="indent"/>
        </vbox>

        <checkbox id="setup_sync_checkbox" checked="false"
                  label="&device.dialog.setup.sync.checkbox.label;"
                  oncommand="deviceSetupDialog.toggleSync();"/>
        <description id="setup_sync_description" class="indent">
          &device.dialog.setup.sync.checkbox.description;
        </description>
      </vbox>
      <spacer flex="1"/>
      <vbox id="ignoreContainer" hidden="true">
      <separator/>
      <checkbox id="setup_ignore_checkbox" checked="false"
                label="&device.dialog.setup.ignore.checkbox.label;"
                oncommand="deviceSetupDialog.toggleIgnore(event);"/>
      <description id="setup_ignore_description" class="indent">
        &device.dialog.setup.ignore.checkbox.description;
      </description>
      </vbox>
    </vbox>
  </notificationbox>


  <!-- *************************************************************************
   *
   * Implementation.
   *
   ************************************************************************* -->

  <!-- Import the Songbird services. -->
  <script type="application/x-javascript"
          src="chrome://global/content/globalOverlay.js"/>
  <script type="application/x-javascript"
          src="chrome://songbird/content/scripts/windowUtils.js" />
  <script type="application/x-javascript"
          src="chrome://songbird/content/scripts/sbDataRemoteUtils.js" />

  <!-- Device setup dialog services. -->
  <script><![CDATA[
    //
    // Defs.
    //

    if (typeof(Cc) == "undefined")
      var Cc = Components.classes;
    if (typeof(Ci) == "undefined")
      var Ci = Components.interfaces;
    if (typeof(Cr) == "undefined")
      var Cr = Components.results;
    if (typeof(Cu) == "undefined")
      var Cu = Components.utils;


    // Songbird imports.
    Cu.import("resource://app/jsmodules/StringUtils.jsm");


    //
    // Device setup dialog services object.
    //

    var deviceSetupDialog = {
      //
      // Object fields.
      //
      //   _device              sbIDevice object.
      //

      _device: null,


      //------------------------------------------------------------------------
      //
      // Public functions.
      //
      //------------------------------------------------------------------------

      /**
       * Handle load events.
       */

      onLoad: function deviceSetupDialog_onLoad() {
        // Get the dialog parameters.
        this._device = window.arguments[0].QueryInterface(Ci.sbIDevice);

        // Set the device name textbox header.
        var productName = SBString("device.default.product.name");
        var setupNameHeaderElem = document.getElementById("setup_name_header");
        setupNameHeaderElem.value =
          SBString("device.dialog.setup.name.label");

        // Set the default device name textbox value.
        var setupNameTextboxElem =
              document.getElementById("setup_name_textbox");
        var friendlyName = this._device.properties.friendlyName;
        if (friendlyName)
          setupNameTextboxElem.value = friendlyName;
        else {
          try { productName = this._device.productName; } catch (ex) {}
          setupNameTextboxElem.value = productName;
        }

        var isSelectorEnabled = false;

        // Unhide volume selector if the device has multiple volumes.
        var content = this._device.content;
        var libraries = content.libraries;
        if (libraries.length > 1) {
          var selectorContainerElem =
                document.getElementById("selectorContainer");
          var volumeSelectorElem =
                document.getElementById("device_setup_volume_selector");
          volumeSelectorElem.setAttribute("device-id", this._device.id);
          selectorContainerElem.removeAttribute("hidden");
          isSelectorEnabled = true;
        }

        // Unhide the ignore box for MSC device.
        var deviceType = this._device.parameters.getProperty("DeviceType");
        var dialogElem = document.getElementById("device_setup_dialog");
        dialogElem.setAttribute("dialogHeight", "normal");
        if ((deviceType != "WPD") && (deviceType != "MTP")) {
          var ignoreContainerElem = document.getElementById("ignoreContainer");
          ignoreContainerElem.removeAttribute("hidden");

          if (isSelectorEnabled) {
            dialogElem.setAttribute("dialogHeight", "max");
          }
        }
        else {
          if (!isSelectorEnabled) {
            dialogElem.setAttribute("dialogHeight", "min");
          }
        }
      },

      /**
       * Handle dialog accept events based on the status of the check boxes.
       *
       * \return true
       */

      onAccept: function deviceSetupDialog_onAccept() {
        var ignoreCheckboxElem =
              document.getElementById("setup_ignore_checkbox");
        var syncCheckboxElem =
              document.getElementById("setup_sync_checkbox");
        var ignoreContainerElem = document.getElementById("ignoreContainer");

        if (!ignoreContainerElem.hidden && ignoreCheckboxElem.checked) {
          var ignoreList = Application.prefs.getValue(
                                            "songbird.device.ignorelist", "");
          // Append a separator if necessary.
          if (ignoreList != "") {
            ignoreList += ";";
          }
          ignoreList += this._device.id;
          Application.prefs.setValue("songbird.device.ignorelist", ignoreList);

          // Remove the device.
          var manager = Cc["@songbirdnest.com/Songbird/DeviceManager;2"]
                          .getService(Ci.sbIDeviceManager2);
          var controller = manager.getController(this._device.controllerId);
          var marshall = manager.getMarshallByID(controller.marshallId);
          this._device.cancelRequests();
          marshall.removeDevice(this._device);
        }
        else {
          // Set the device name.
          var setupNameTextboxElem =
                document.getElementById("setup_name_textbox");
          this._device.properties.friendlyName = setupNameTextboxElem.value;

          if (syncCheckboxElem.checked) {
            // Store the preference for later use by the device summary page
            // initialization and depress the sync confirmation dialog.
            var key = "songbird.device." + this._device.id + ".syncmode.changed";
            Application.prefs.setValue(key, true);
          }

          // Set the sync preference.
          var deviceLibrary = this._device.content.libraries
                                  .queryElementAt(0, Ci.sbIDeviceLibrary);
          deviceLibrary.syncMode = syncCheckboxElem.checked ?
                                     Ci.sbIDeviceLibrary.SYNC_AUTO :
                                     Ci.sbIDeviceLibrary.SYNC_MANUAL;
        }

        return true;
      },

      /**
       * Handle sync checkbox click event.
       */

      toggleSync: function deviceSetupDialog_toggleSync() {
        var syncCheckboxElem = document.getElementById("setup_sync_checkbox");
        var dialogElem = document.getElementById("device_setup_dialog");
        var acceptButton = dialogElem.getButton("accept");

        // Add the notification hat and update the button label
        if (syncCheckboxElem.checked) {
          acceptButton.label =
            SBString("device.dialog.setup.button.sync.label");
          this.showErrorNotification(
                 SBString("device.dialog.setup.sync.message"),
                 "PRIORITY_WARNING_HIGH");
        }
        else {
          acceptButton.label =
            SBString("device.dialog.setup.button.default.label");
        }
      },

      /**
       * Handle ignore checkbox click event.
       */

      toggleIgnore: function deviceSetupDialog_toggleIgnore(event) {
        var ignoreCheckboxElem =
              document.getElementById("setup_ignore_checkbox");
        var nameTextboxElem = document.getElementById("setup_name_textbox");
        var syncCheckboxElem = document.getElementById("setup_sync_checkbox");
        var syncContainerElem = document.getElementById("syncContainer");
        var dialogElem = document.getElementById("device_setup_dialog");
        var acceptButton = dialogElem.getButton("accept");

        // Add the notification hat and update the button label
        // Also disable the sync boxes.
        if (ignoreCheckboxElem.checked) {
          acceptButton.label =
            SBString("device.dialog.setup.button.ignore.label");
          syncContainerElem.setAttribute("disabled", true);
          nameTextboxElem.setAttribute("disabled", true);
          syncCheckboxElem.setAttribute("disabled", true);
          syncCheckboxElem.checked = false;

          var key = "device.dialog.setup.ignoreDevice.message";
          if (getPlatformString() == "Darwin")
            key = key + ".macos";
          this.showErrorNotification(SBString(key), "PRIORITY_INFO_HIGH");
        }
        else {
          acceptButton.label =
            SBString("device.dialog.setup.button.default.label");
          syncContainerElem.removeAttribute("disabled");
          nameTextboxElem.removeAttribute("disabled");
          syncCheckboxElem.removeAttribute("disabled");
        }

      },

      /**
       * Remove the notification hat.
       */
      removeErrorNotifications: function()
      {
        var oldNotif;
        var notifBox = document.getElementById("device_setup_notification_box");
        while ((oldNotif = notifBox.getNotificationWithValue(
                                      "device_setup_notice"))) {
          notifBox.removeNotification(oldNotif);
        }
      },

      /**
       * Shows a notification message after removing any other ones of
       * the same class.
       */
      showErrorNotification: function(aMsg, aLevel) {
        var notifBox = document.getElementById("device_setup_notification_box");

        // show the notification, hiding any other ones of this class
        this.removeErrorNotifications();
        var level = aLevel || "PRIORITY_CRITICAL_LOW";
        notifBox.appendNotification(aMsg,
                                    "device_setup_notice",
                                    null,
                                    notifBox[level],
                                    []);
      }
    };
  ]]></script>

</dialog>
