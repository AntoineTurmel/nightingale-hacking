<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
 */
-->
<?xml-stylesheet href="chrome://songbird-dialogs/skin/smartPlaylist.css" type="text/css"?>
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css" type="text/css"?>


<!DOCTYPE window [
<!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd">
<!ENTITY % songbirdDTD SYSTEM "chrome://songbird/locale/songbird.dtd">
%brandDTD;
%songbirdDTD;
]>

<window
 xmlns:html="http://www.w3.org/1999/xhtml"
 xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
 xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
 id="smart_playlist"
 title="&smart.window;"
 onload="doLoad();"
 onunload="doUnLoad();"
 onkeypress="if ( event.keyCode == 13 ) { if ( doOK() ) onExit(); } else if ( event.keyCode == 27 ) { if ( doCancel() ) onExit(); }"
 flex="1"
 hidechrome="true"
>
  <windowregion/>

  <sb-sys-outer-frame resizers="none" overflow="true" flex="1">
    <sb-sys-dialog-titlebar/>
    <groupbox>
      <vbox flex="1">
        <hbox align="center">
          <checkbox id="smart_match_check" label="&smart.match;" checked="false"/>
          <menulist id="smart_any_list" value="any">
            <menupopup id="smart_any_list_popup" >
              <menuitem id="smart_any_list_any" label="&smart.any;" value="any" />
              <menuitem id="smart_any_list_all" label="&smart.all;" value="all" />
            </menupopup>
          </menulist>
          <label  value="&smart.following;"/>
          <spacer flex="1"/>
        </hbox>
        <spacer height="2"/>
        <sb-smart-conditions-drawer id="smart_conditions" flex="1" maxvisibleitems="5"/>
      </vbox>

      <spacer height="5"/>

      <hbox  align="center">
        <checkbox id="smart_songs_check" label="&smart.limit;" checked="false"/>
        <textbox  id="smart_songs_count" value="20"/>
        <menulist id="smart_songs_list" value="songs">
          <menupopup id="smart_songs_list_popup">
            <menuitem id="smart_selected_list_minutes" label="&smart.minutes;" value="minutes" />
            <menuitem id="smart_selected_list_hours" label="&smart.hours;" value="hours" />
            <menuitem id="smart_selected_list_mb" label="&smart.mb;" value="MB"/>
            <menuitem id="smart_selected_list_gb" label="&smart.gb;" value="GB" />
            <menuitem id="smart_selected_list_songs" label="&smart.songs;" value="songs" />
          </menupopup>
        </menulist>
        <spacer width="8"/>
        <label   value="&smart.selectedby;" control="smart_selected_list"/>
        <menulist id="smart_selected_list" value="random">
          <menupopup id="smart_selected_list_popup" >
            <menuitem id="smart_selected_list_random" label="&smart.random;" value="random" />
            <menuitem id="smart_selected_list_album" label="&smart.album;" value="album" />
            <menuitem id="smart_selected_list_artist" label="&smart.artist;" value="artist" />
            <menuitem id="smart_selected_list_genre" label="&smart.genre;" value="genre" />
            <menuitem id="smart_selected_list_title" label="&smart.title;" value="title" />
            <menuitem id="smart_selected_list_high_rating" label="&smart.high_rating;" value="high_rating" />
            <menuitem id="smart_selected_list_low_rating" label="&smart.low_rating;" value="low_rating" />
            <menuitem id="smart_selected_list_most_recent" label="&smart.most_recent;" value="most_recent" />
            <menuitem id="smart_selected_list_least_recent" label="&smart.least_recent;" value="least_recent" />
            <menuitem id="smart_selected_list_most_often" label="&smart.most_often;" value="most_often" />
            <menuitem id="smart_selected_list_least_often" label="&smart.least_often;" value="least_often" />
            <menuitem id="smart_selected_list_most_added" label="&smart.most_added;" value="most_added" />
            <menuitem id="smart_selected_list_least_added" label="&smart.least_added;" value="least_added" />
          </menupopup>
        </menulist>
        <spacer flex="1" height="25"/>
      </hbox>
    </groupbox>

    <spacer height="5"/>

    <hbox>
      <spacer flex="1"/>
      <button id="smart_ok" label="&window.ok;" oncommand="if ( doOK() ) onExit( );"/>
      <spacer width="5"/>
      <button label="&window.cancel;" oncommand="if ( doCancel() ) onExit( );"/>
    </hbox>
  </sb-sys-outer-frame>

  <!-- SCRIPTS -->
  <script type="application/x-javascript" src="chrome://songbird/content/scripts/sbDataRemoteUtils.js" />
  <script type="application/x-javascript" src="chrome://global/content/globalOverlay.js"/> 
  <script type="application/x-javascript" src="chrome://songbird/content/scripts/windowUtils.js" />
  <script>
  <![CDATA[
var sbILocalDatabaseSmartMediaList =
  Components.interfaces.sbILocalDatabaseSmartMediaList;

var SB_NS = "http://songbirdnest.com/data/1.0#";
var SB_PROPERTY_UILIMITTYPE = SB_NS + "uiLimitType";

var USECS_PER_MINUTE = 60 * 1000 * 1000;
var USECS_PER_HOUR   = USECS_PER_MINUTE * 60;
var BYTES_PER_MB     = 1000 * 1000;
var BYTES_PER_GB     = BYTES_PER_MB * 1000;

var selectByList = [
  {
    value: "album",
    property: SB_NS + "albumName",
    direction: true
  },
  {
    value: "artist",
    property: SB_NS + "artistName",
    direction: true
  },
  {
    value: "genre",
    property: SB_NS + "genre",
    direction: true
  },
  {
    value: "title",
    property: SB_NS + "trackName",
    direction: true
  },
  {
    value: "high_rating",
    property: SB_NS + "rating",
    direction: false
  },
  {
    value: "low_rating",
    property: SB_NS + "rating",
    direction: true
  },
  {
    value: "most_recent",
    property: SB_NS + "lastPlayTime",
    direction: false
  },
  {
    value: "least_recent",
    property: SB_NS + "lastPlayTime",
    direction: true
  },
  {
    value: "most_often",
    property: SB_NS + "playCount",
    direction: false
  },
  {
    value: "least_often",
    property: SB_NS + "playCount",
    direction: true
  },
  {
    value: "most_added",
    property: SB_NS + "created",
    direction: false
  },
  {
    value: "least_added",
    property: SB_NS + "created",
    direction: true
  }
];

function updateOkButton(event) {

  var smartConditions = document.getElementById("smart_conditions");
  var ok = document.getElementById("smart_ok");
  ok.disabled = !smartConditions.isValid;
}

function doLoad()
{
  setTimeout(loadConditions);

  var smartConditions = document.getElementById("smart_conditions");
  smartConditions.addEventListener("input",  updateOkButton, false);
  smartConditions.addEventListener("select", updateOkButton, false);
}

function doUnLoad()
{
  var smartConditions = document.getElementById("smart_conditions");
  smartConditions.removeEventListener("input",  updateOkButton, false);
  smartConditions.removeEventListener("select", updateOkButton, false);
}

function loadConditions()
{
  var list = window.arguments[0].QueryInterface(sbILocalDatabaseSmartMediaList);

  // Set up conditions
  var smartConditions = document.getElementById("smart_conditions");
  if (list.conditionCount > 0) {
    var conditions = [];
    for (var i = 0; i < list.conditionCount; i++) {
      var condition = list.getConditionAt(i);
      conditions.push({
        metadata: condition.propertyID,
        condition: condition.operator.operator,
        value: condition.leftValue
      });
    }
    smartConditions.conditions = conditions;
  }
  else {
    smartConditions.newCondition();
  }

  // Set match type
  var matchSomething = document.getElementById("smart_match_check");
  var matchAnyAll = document.getElementById("smart_any_list");
  switch(list.matchType) {
    case sbILocalDatabaseSmartMediaList.MATCH_TYPE_ANY:
      matchAnyAll.value = "any";
      matchSomething.checked = true;
    break;
    case sbILocalDatabaseSmartMediaList.MATCH_TYPE_ALL:
      matchAnyAll.value = "all";
      matchSomething.checked = true;
    break;
    case sbILocalDatabaseSmartMediaList.MATCH_TYPE_NONE:
      matchAnyAll.value = "any";
      matchSomething.checked = false;
    break;
  }

  // Set limit.  Get the "ui" limit from a list property
  var uiLimitType = list.getProperty(SB_PROPERTY_UILIMITTYPE) || "songs";

  // Set the limit based on the ui limit.  Convert the units from the smart
  // playlist to the units needed to display the ui limit

  var limit = document.getElementById("smart_songs_check");
  var count = document.getElementById("smart_songs_count");
  var limitType = document.getElementById("smart_songs_list");
  if (list.limitType == sbILocalDatabaseSmartMediaList.LIMIT_TYPE_NONE) {
    limit.checked = false;
    count.value = "0";
    limitType.value = "songs";
  }
  else {
    var mismatch = false;
    switch(uiLimitType) {
      case "songs":
        if (list.limitType != sbILocalDatabaseSmartMediaList.LIMIT_TYPE_ITEMS) {
          mismatch = true;
          break;
        }
        count.value = list.limit;
      break;
      case "minutes":
        if (list.limitType != sbILocalDatabaseSmartMediaList.LIMIT_TYPE_USECS) {
          mismatch = true;
          break;
        }
        count.value = list.limit / USECS_PER_MINUTE;
      break;
      case "hours":
        if (list.limitType != sbILocalDatabaseSmartMediaList.LIMIT_TYPE_USECS) {
          mismatch = true;
          break;
        }
        count.value = list.limit / USECS_PER_HOUR;
      break;
      case "MB":
        if (list.limitType != sbILocalDatabaseSmartMediaList.LIMIT_TYPE_BYTES) {
          mismatch = true;
          break;
        }
        count.value = list.limit / BYTES_PER_MB;
      break;
      case "GB":
        if (list.limitType != sbILocalDatabaseSmartMediaList.LIMIT_TYPE_BYTES) {
          mismatch = true;
          break;
        }
        count.value = list.limit / BYTES_PER_GB;
      break;
    }
    if (mismatch) {
      limit.checked = false;
      count.value = "0";
      limitType.value = "songs";
    }
    else {
      limit.checked = true;
      limitType.value = uiLimitType;
    }
  }

  // Set select by
  var selectBy = document.getElementById("smart_selected_list");
  if (list.randomSelection) {
    selectBy.value = "random";
  }
  else {
    selectBy.value = getValueForSelectBy(list);
  }
}

function doOK()
{
  var list = window.arguments[0].QueryInterface(sbILocalDatabaseSmartMediaList);
  var pm = Components.classes["@songbirdnest.com/Songbird/Properties/PropertyManager;1"]
                             .getService(Components.interfaces.sbIPropertyManager);

  // Save conditions
  list.clearConditions();
  var conditions = document.getElementById("smart_conditions").conditions;
  conditions.forEach(function(condition) {
    var info = pm.getPropertyInfo(condition.metadata);
    if (condition.value) {
      list.appendCondition(condition.metadata,
                           info.getOperator(condition.condition),
                           condition.value,
                           null,
                           sbILocalDatabaseSmartMediaList.LIMIT_TYPE_NONE);
    }
  });

  // Save match
  var matchSomething = document.getElementById("smart_match_check");
  var matchAnyAll = document.getElementById("smart_any_list");
  if (matchSomething.checked) {
    if (matchAnyAll.value == "all") {
      list.matchType = sbILocalDatabaseSmartMediaList.MATCH_TYPE_ALL;
    }
    else {
      list.matchType = sbILocalDatabaseSmartMediaList.MATCH_TYPE_ANY;
    }
  }
  else {
   list.matchType = sbILocalDatabaseSmartMediaList.MATCH_TYPE_NONE;
  }

  // Save limit
  var limit = document.getElementById("smart_songs_check");
  var count = document.getElementById("smart_songs_count");
  var limitType = document.getElementById("smart_songs_list");

  list.setProperty(SB_PROPERTY_UILIMITTYPE, limitType.value);

  if (limit.checked) {
    switch(limitType.value) {
      case "songs":
        list.limitType = sbILocalDatabaseSmartMediaList.LIMIT_TYPE_ITEMS;
        list.limit = count.value;
      break;
      case "minutes":
        list.limitType = sbILocalDatabaseSmartMediaList.LIMIT_TYPE_USECS;
        list.limit = count.value * USECS_PER_MINUTE;
      break;
      case "hours":
        list.limitType = sbILocalDatabaseSmartMediaList.LIMIT_TYPE_USECS;
        list.limit = count.value * USECS_PER_HOUR;
      break;
      case "MB":
        list.limitType = sbILocalDatabaseSmartMediaList.LIMIT_TYPE_BYTES;
        list.limit = count.value * BYTES_PER_MB;
      break;
      case "GB":
        list.limitType = sbILocalDatabaseSmartMediaList.LIMIT_TYPE_BYTES;
        list.limit = count.value * BYTES_PER_GB;
      break;
    }
  }
  else {
    list.limitType = sbILocalDatabaseSmartMediaList.LIMIT_TYPE_NONE;
    list.limit = 0;
  }

  // Save select by
  var selectBy = document.getElementById("smart_selected_list");
  if (selectBy.value == "random") {
    list.randomSelection = true;
    list.selectPropertyID = "";
  }
  else {
    list.randomSelection = false;
    setSelectBy(list, selectBy.value);
  }

  list.rebuild();

  return true;
}

function doCancel() {
  return true;
}

function getValueForSelectBy(list) {

  var value;
  selectByList.forEach(function(e) {
    if (e.property == list.selectPropertyID &&
        e.direction == list.selectDirection) {
      value = e.value;
    }
  });

  return value;
}

function setSelectBy(list, value) {

  selectByList.forEach(function(e) {
    if (e.value == value) {
      list.selectPropertyID = e.property;
      list.selectDirection = e.direction;
    }
  });

}
]]>
  </script>
</window>

