<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
 -->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css" type="text/css"?>
<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<window
  id="sb-library-page"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:rdf="http://www.w3.org/TR/WD-rdf-syntax#"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  onload="window.mediaPage.onLoad();"
  onunload="window.mediaPage.onUnload();"
  windowtype="Songbird:Library"
>

  <sb-playlist id="sb-library-page-playlist" 
      flex="1"
      enableColumnDrag="true"
      persist="column-list column-widths"
      editable="true"
      hidefilters="true"
  />


  <!-- TODO: Rename sb-library-page etc. to sb-playlist-page -->
  <!-- TODO: Remove as many of these as possible? --> 
  
  <!-- Extension Overlay Support -->
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/overlayLoader.js" />

  <!-- Load the sbPlaylistsource helper -->
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/songbirdInterfaces.js"/>
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/sbDataRemoteUtils.js"/>
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/metrics.js"/>
  <script type="application/x-javascript"  
   src="chrome://songbird/content/scripts/windowUtils.js"/> 
  <script type="application/x-javascript"  
   src="chrome://songbird/content/scripts/playerOpen.js"/> 

  <!-- Local hardcoded sample js -->
  <script type="application/x-javascript">
  <![CDATA[
if (typeof(Cc) == "undefined")
 const Cc = Components.classes;
if (typeof(Ci) == "undefined")
 const Ci = Components.interfaces;

if (typeof(SBProperties) == "undefined") {
  Components.utils.import("resource://app/components/sbProperties.jsm");
  if (!SBProperties)
    throw new Error("Import of sbProperties module failed!");
}

if (typeof(LibraryUtils) == "undefined") {
  Components.utils.import("resource://app/components/sbLibraryUtils.jsm");
  if (!LibraryUtils)
    throw new Error("Import of sbLibraryUtils module failed!");
}

if (typeof(kPlaylistCommands) == "undefined") {
  Components.utils.import("resource://app/components/kPlaylistCommands.jsm");
  if (!kPlaylistCommands)
    throw new Error("Import of kPlaylistCommands module failed!");
}


// TODO Comment
// TODO Make the playlist widget implement sbIMediaPage and then delegate
// everything to it.  window.mediaPage = document.getElementById('playlist');
window.mediaPage = {

  onLoad:  function(e) {
    dump("MATT: mediaPage.onLoad()!\n");
    
    if (!this._mediaListView) {
      Components.utils.reportError("Playlist.xul did not receive a medialist " + 
          " before the onload event!");
      return;
    } 
    
    this._playlist = document.getElementById("sb-library-page-playlist");
    
    this._updateFilterLists();

    // TODO: Get cmds that are appropriate for the list?
    var mgr = new sbIPlaylistCommandsManager();
    var cmds = mgr.request(kPlaylistCommands.MEDIAITEM_DEFAULT);
    
    // Set up the playlist
    this._playlist.bind(this._mediaListView, cmds);
  },

  onUnload:  function(e) {
    dump("MATT: mediaPage.onUnload()!\n");
    // TODO: This should be good, right?
    // this._playlist.destroy()
  },

  _mediaListView: null,
  
  _playlist: null, 


  /**
   * Configure the playlist filter lists.
   */
  _updateFilterLists: function() {
    // This URL is registered as two different media pages. 
    // One with filters, one without. 
    // Use the querystring to determine what to show.
    var queryString = parseQueryString();
    var useFilters = queryString["useFilters"] == "true";
    var filters = this._mediaListView.cascadeFilterSet;
    if (useFilters && filters) {
      this._playlist.setAttribute("hidefilters", false);
      
      // Set up standard filters if not already present.
      // Note that the first filter should be search.
      if (filters.length <= 1) {
        
        // Restore the last library filterset or set our default
        var filterSet = SBDataGetStringValue( "library.filterset" );
        if ( filterSet.length > 0 ) {
          filterSet = filterSet.split(";");
        } else {
          filterSet = [
            SBProperties.year,
            SBProperties.artistName,
            SBProperties.albumName
          ];
        }
        for each (var filter in filterSet) {
          filters.appendFilter(filter);
        }
      }
    }
  },

  get mediaListView()  {
    return this._mediaListView;
  },

  set mediaListView(value)  {
    dump("MATT: mediaListPage.set mediaListView!\n");
    this._mediaListView = value;
  },

  highlightItem: function(aIndex) {
    this._playlist.highlightItem(aIndex);
  }

  // TODO Drag and drop
}



// Helper function to parse and unescape query string. 
// Returns a object mapping key->value
function parseQueryString() {
  var queryString = (location.search || "?").substr(1).split("&");
  var queryObject = {};
  var key, value;
  for each (var pair in queryString) {
    [key, value] = pair.split("=");
    queryObject[key] = unescape(value);
  }
  return queryObject;
}



  ]]>
  </script>

</window>
