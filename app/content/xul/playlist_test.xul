<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2006 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the “GPL”).
// 
// Software distributed under the License is distributed 
// on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
 -->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css" type="text/css"?>
<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<window
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:rdf="http://www.w3.org/TR/WD-rdf-syntax#"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  onload="LocalLoad();"
>

  <playlist id="playlist_test" 
      flex="1"
      enableColumnDrag="true"
  />

  <!-- Load the sbPlaylistsource helper -->
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/songbird_interfaces.js"/>
  <script type="application/x-javascript" 
   src="chrome://songbird/content/scripts/sbIDataRemote.js"/>

  <!-- Local hardcoded sample js -->
  <script type="application/x-javascript">
  <![CDATA[
try
{  
  var SBLibraryCommands = 
  {
    m_Playlist: null,

    m_Ids: new Array
    (
      "library_cmd_play",
      "library_cmd_remove",
      "library_cmd_edit",
      "library_cmd_addtoplaylist",
      "library_cmd_burntocd",
      "library_cmd_device"
    ),
    
    m_Names: new Array
    (
      "&command.play",
      "&command.remove",
      "&command.edit",
      "&command.addtoplaylist",
      "&command.burntocd",
      "&command.device"
    ),
    
    m_Tooltips: new Array
    (
      "&command.tooltip.play",
      "&command.tooltip.remove",
      "&command.tooltip.edit",
      "&command.tooltip.addtoplaylist",
      "&command.tooltip.burntocd",
      "&command.tooltip.device"
    ),
  
    GetNumCommands: function()
    {
      if ( 
          ( this.m_Tooltips.length != this.m_Ids.length ) ||
          ( this.m_Names.length != this.m_Ids.length ) ||
          ( this.m_Tooltips.length != this.m_Names.length )
         )
      {
        alert( "PlaylistCommands - Array lengths do not match!" );
        return 0;
      }
      return this.m_Ids.length;
    },
  
    GetCommandId: function( index )
    {
      if ( index >= this.m_Ids.length )
      {
        return "";
      }
      return this.m_Ids[ index ];
    },
  
    GetCommandText: function( index )
    {
      if ( index >= this.m_Names.length )
      {
        return "";
      }
      return this.m_Names[ index ];
    },
  
    GetCommandFlex: function( index )
    {
      if ( this.m_Ids[ index ] == "*separator*" ) return 1;
      return 0;
    },

    GetCommandToolTipText: function( index )
    {
      if ( index >= this.m_Tooltips.length )
      {
        return "";
      }
      return this.m_Tooltips[ index ];
    },
  
    GetCommandEnabled: function( index )
    {
      var retval = false;
      if ( this.m_Playlist )
      {
        if ((this.m_Playlist.table != "library") && 
            (this.m_Playlist.tree.view.rowCount > 0 && 
             (this.m_Ids[index] == "library_cmd_addtoplaylist" || this.m_Ids[index] == "library_cmd_addtolibrary")
            )
           ) retval = true;
        else 
        {
          switch ( this.m_Ids[index] )
          {
            case "library_cmd_device":
              retval = false;
            break;
            default:
              retval = this.m_Playlist.tree.view.selection.getRangeCount() > 0;
            break;
          }
        }
      }
      return retval;
    },
  
    OnCommand: function( event )
    {
      if ( event.target && event.target.id )
      {
        // Was it from the toolbarbutton?
        var tbb = ( event.target.tagName == "button" || event.target.tagName == "xul:button" );
        switch( event.target.id )
        {
          case "library_cmd_play":
            if ( this.m_Playlist.tree.currentIndex != -1 )
            {
              // Repurpose the command to act as if a doubleclick
              this.m_Playlist.sendPlayEvent();
            }
          break;
          case "library_cmd_edit":
            if ( this.m_Playlist.tree.currentIndex != -1 )
            {
              if ( tbb )
              {
                // Edit the entire track
                this.m_Playlist.sendEditorEvent();
              }
              else
              {
                // Edit the context cell
                this.m_Playlist.sendEditEvent();
              }
            }
          break;
          case "library_cmd_addtoplaylist":
            if ( this.m_Playlist.tree.currentIndex != -1 )
            {
              // add the currently selected track to a (possibly new) playlist
              this.m_Playlist.addToPlaylist();
            }
          break;
          case "library_cmd_remove":
            if ( this.m_Playlist.tree.currentIndex != -1 )
            {
              // remove the currently select tracks
              this.m_Playlist.removeTracks();
            }
          break;
          case "library_cmd_burntocd":
            if ( this.m_Playlist.tree.currentIndex != -1 )
            {
              // Repurpose the command to act as if a doubleclick
              this.m_Playlist.sendBurnToCDEvent();
            }
          break;
        }
      }
    },
    
    // The object registered with the sbIPlaylistSource interface acts 
    // as a template for instances bound to specific playlist elements
    Duplicate: function()
    {
      var obj = {};
      for ( var i in this )
      {
        obj[ i ] = this[ i ];
      }
      return obj;
    },
    
    SetPlaylist: function( playlist )
    {
      this.m_Playlist = playlist;
    },
    
    QueryInterface : function(aIID)
    {
      if (!aIID.equals(Components.interfaces.sbIPlaylistCommands) &&
          !aIID.equals(Components.interfaces.nsISupportsWeakReference) &&
          !aIID.equals(Components.interfaces.nsISupports)) 
      {
        throw Components.results.NS_ERROR_NO_INTERFACE;
      }
      
      return this;
    }
    
  } // end of sbPlaylistCommands
  
  function LocalLoad()
  {
    try
    { 
      // Default values, in case we get confused
      var table = "library";
      var guid = "songbird";
      var data = SBDataGetValue( "browser.uri" );

      // Cook the table from the magic browser uri?
      var qm = data.lastIndexOf( '?' );
      if ( qm > -1 )
      {
        var str = data.substr( qm + 1, data.length );
        var divider = str.lastIndexOf( ',' );
        if ( divider > -1 )
        {
          table = str.substr( 0, divider );
          guid = str.substr( divider + 1, str.length );
        }
        else
        {
          table = str;
        }
      }
      
      if ( ( table.length > 0 ) && ( guid.length > 0 ) )
      {
        // If we're a library, we want metadata filters
        var filters = null;
        if ( table == "library" )
        {
          filters = new Array(
                                "artist",
                                "album" 
                             );
        }
        
        // Tell the playlist to bind to the database table with filterlists and commands
        var playlist = document.getElementById("playlist_test");
        SBLibraryCommands.m_Playlist = playlist;
        playlist.bind( guid, table, filters, SBLibraryCommands );
      }      
    }
    catch ( err )
    {
      alert( err );
    }
  }
}
catch ( err )
{
  alert( err );
}
  ]]>
  </script>

</window>

