<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
 */
-->

<!-- Import external definitions. -->
<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd">

<bindings
      xmlns="http://www.mozilla.org/xbl"
      xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
      xmlns:xbl="http://www.mozilla.org/xbl">

  <!-- *************************************************************************
   *****************************************************************************
   *
   * First run EULA widget.
   *
   *   This widget provides first run end user license agreement UI.
   *
   *****************************************************************************
   ************************************************************************* -->

  <binding id="sb-first-run-eula">

    <!-- ***********************************************************************
     *
     * Content.
     *
     *********************************************************************** -->

    <content>

      <xul:vbox anonid="container_box" class="sb-first-run-eula-box">

        <xul:browser anonid="eula_browser"
                     class="sb-first-run-eula-browser"
                     src="chrome://songbird/content/html/eula.html"/>
        <xul:checkbox anonid="accept_checkbox"
                      label="&first_run.eula.accept_checkbox.label;"
                      oncommand="_doAcceptChanged();"/>

      </xul:vbox>

    </content>


    <!-- ***********************************************************************
     *
     * Implementation.
     *
     *********************************************************************** -->

    <implementation>

      <!--
       * Widget properties.
       -->

      <property name="accepted">
        <getter><![CDATA[
          return (this.getAttribute("accepted") == "true");
        ]]></getter>
        <setter><![CDATA[
          // Check if the accepted setting changed.
          var acceptChanged = (this.getAttribute("accepted") != val);

          // Set the accepted setting.
          this.setAttribute("accepted", val);
          if (this._acceptCheckbox.checked != this.accepted)
            this._acceptCheckbox.checked = this.accepted;

          // Dispatch an event if the accepted setting changed.
          if (acceptChanged)
            this._dispatchEvent(this, "acceptchanged");
        ]]></setter>
      </property>


      <!--
        * Private fields.
        *
        *   _acceptCheckbox     Accept checkbox element.
        -->

      <field name="_acceptCheckbox">null</field>


      <!--
       * constructor
       *
       *   This method constructs the widget.
       -->

      <constructor> <![CDATA[
        // Get the accept checkbox element.
        this._acceptCheckbox =
          document.getAnonymousElementByAttribute(this,
                                                  "anonid",
                                                  "accept_checkbox");

        // Default to not accepted.
        this.accepted = false;
      ]]></constructor>


      <!--
       * Handle an accept changed event.
       -->

      <method name="_doAcceptChanged"><body><![CDATA[
        // Update the accepted property.
        if (this.accepted != this._acceptCheckbox.checked)
          this.accepted = this._acceptCheckbox.checked;
      ]]></body></method>


      <!--
       * Dispatch the event of type specified by aType with the target specified
       * by aTarget.
       *
       * \param aTarget         Target of the event.
       * \param aType           Type of event.
       -->

      <method name="_dispatchEvent">
        <parameter name="aTarget"/>
        <parameter name="aType"/>
        <body>
        <![CDATA[
          // Create the event.
          var event = document.createEvent("Events");
          event.initEvent(aType, true, true);

          // Dispatch to DOM event handlers.
          var noCancel = aTarget.dispatchEvent(event);

          // Dispatch to XML attribute event handlers.
          var handler = aTarget.getAttribute("on" + aType);
          if (handler != "") {
            var func = new Function("event", handler);
            var returned = func.apply(aTarget, [event]);
            if (returned == false)
              noCancel = false;
          }

          return noCancel;
        ]]>
        </body>
      </method>

    </implementation>

  </binding>

</bindings>

