<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2006 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the “GPL”).
// 
// Software distributed under the License is distributed 
// on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">


  
  
  <!-- HOTKEY CONTROL -->


  
  <binding id="hotkey">

  <content>
    <xul:textbox flex="1" sid="hotkey.textbox" xbl:inherits="class=class" />
  </content>

  <implementation>

    <constructor>
      <![CDATA[
        var user_agent = navigator.userAgent;
        var PLATFORM_WIN32 = user_agent.indexOf("Windows") != -1;
        var PLATFORM_MACOSX = user_agent.indexOf("Mac OS X") != -1;
        var PLATFORM_LINUX = user_agent.indexOf("Linux") != -1;

        this.meta_key_str = "meta";
        if (PLATFORM_WIN32) this.meta_key_str = "win";
        if (PLATFORM_MACOSX) this.meta_key_str = "command";
        if (PLATFORM_LINUX) this.meta_key_str = "meta";

        var sbs = Components.classes["@mozilla.org/intl/stringbundle;1"].getService(Components.interfaces.nsIStringBundleService);
        this.songbirdStrings = sbs.createBundle("chrome://songbird/locale/songbird.properties");

        this.shift_down = false;
        this.ctrl_down = false;
        this.alt_down = false;
        this.meta_down = false;
        this.hotkeyShift = false;
        this.hotkeyCtrl = false;
        this.hotkeyAlt = false;
        this.hotkeyMeta = false;
        this.hotkeyCode = 0;
      ]]>
    </constructor>
    <destructor>
    </destructor>

    <field name="textbox">document.getAnonymousElementByAttribute(this, 'sid', 'hotkey.textbox');</field>
    
    <method name="keyCodeToString">
      <parameter name="code"/>
      <body>
        <![CDATA[
          const DOM_VK_CANCEL         = 0x03;
          const DOM_VK_HELP           = 0x06;
          const DOM_VK_BACK_SPACE     = 0x08;
          const DOM_VK_TAB            = 0x09;
          const DOM_VK_CLEAR          = 0x0C;
          const DOM_VK_RETURN         = 0x0D;
          const DOM_VK_ENTER          = 0x0E;
          const DOM_VK_SHIFT          = 0x10;
          const DOM_VK_CONTROL        = 0x11;
          const DOM_VK_ALT            = 0x12;
          const DOM_VK_PAUSE          = 0x13;
          const DOM_VK_CAPS_LOCK      = 0x14;
          const DOM_VK_ESCAPE         = 0x1B;
          const DOM_VK_SPACE          = 0x20;
          const DOM_VK_PAGE_UP        = 0x21;
          const DOM_VK_PAGE_DOWN      = 0x22;
          const DOM_VK_END            = 0x23;
          const DOM_VK_HOME           = 0x24;
          const DOM_VK_LEFT           = 0x25;
          const DOM_VK_UP             = 0x26;
          const DOM_VK_RIGHT          = 0x27;
          const DOM_VK_DOWN           = 0x28;
          const DOM_VK_PRINTSCREEN    = 0x2C;
          const DOM_VK_INSERT         = 0x2D;
          const DOM_VK_DELETE         = 0x2E;

          const DOM_VK_SEMICOLON      = 0x3B;
          const DOM_VK_EQUALS         = 0x3D;

          const DOM_VK_META1          = 0x5B;
          const DOM_VK_META2          = 0x5C;
          const DOM_VK_CONTEXT_MENU   = 0x5D;

          const DOM_VK_NUMPAD0        = 0x60;
          const DOM_VK_NUMPAD1        = 0x61;
          const DOM_VK_NUMPAD2        = 0x62;
          const DOM_VK_NUMPAD3        = 0x63;
          const DOM_VK_NUMPAD4        = 0x64;
          const DOM_VK_NUMPAD5        = 0x65;
          const DOM_VK_NUMPAD6        = 0x66;
          const DOM_VK_NUMPAD7        = 0x67;
          const DOM_VK_NUMPAD8        = 0x68;
          const DOM_VK_NUMPAD9        = 0x69;
          const DOM_VK_MULTIPLY       = 0x6A;
          const DOM_VK_ADD            = 0x6B;
          const DOM_VK_SEPARATOR      = 0x6C;
          const DOM_VK_SUBTRACT       = 0x6D;
          const DOM_VK_DECIMAL        = 0x6E;
          const DOM_VK_DIVIDE         = 0x6F;
          const DOM_VK_F1             = 0x70;
          const DOM_VK_F2             = 0x71;
          const DOM_VK_F3             = 0x72;
          const DOM_VK_F4             = 0x73;
          const DOM_VK_F5             = 0x74;
          const DOM_VK_F6             = 0x75;
          const DOM_VK_F7             = 0x76;
          const DOM_VK_F8             = 0x77;
          const DOM_VK_F9             = 0x78;
          const DOM_VK_F10            = 0x79;
          const DOM_VK_F11            = 0x7A;
          const DOM_VK_F12            = 0x7B;
          const DOM_VK_F13            = 0x7C;
          const DOM_VK_F14            = 0x7D;
          const DOM_VK_F15            = 0x7E;
          const DOM_VK_F16            = 0x7F;
          const DOM_VK_F17            = 0x80;
          const DOM_VK_F18            = 0x81;
          const DOM_VK_F19            = 0x82;
          const DOM_VK_F20            = 0x83;
          const DOM_VK_F21            = 0x84;
          const DOM_VK_F22            = 0x85;
          const DOM_VK_F23            = 0x86;
          const DOM_VK_F24            = 0x87;

          const DOM_VK_NUM_LOCK       = 0x90;
          const DOM_VK_SCROLL_LOCK    = 0x91;

          const DOM_VK_META           = 0xE0;

          const DOM_VK_MEDIA_MUTE       = 0xAD;
          const DOM_VK_MEDIA_VOLUME_DOWN = 0xAE;
          const DOM_VK_MEDIA_VOLUME_UP   = 0xAF;
          const DOM_VK_MEDIA_NEXT_TRACK = 0xB0;
          const DOM_VK_MEDIA_PREV_TRACK = 0xB1;
          const DOM_VK_MEDIA_STOP       = 0xB2;
          const DOM_VK_MEDIA_PLAY_PAUSE = 0xB3;

          // this.log(code);
          switch (code) {

            // NO DASH ALLOWED !
            //
            // these serve as both defaults for the localization, and part of the root string for finding the locale from the stringbundle

            case DOM_VK_CANCEL: return "cancel";
            case DOM_VK_HELP: return "help";
            case DOM_VK_BACK_SPACE: return "backspace";
            case DOM_VK_TAB: return "tab";
            case DOM_VK_CLEAR: return "clear";
            case DOM_VK_RETURN: return "return";
            case DOM_VK_ENTER: return "enter";
            case DOM_VK_SHIFT: return "shift";
            case DOM_VK_CONTROL: return "ctrl";
            case DOM_VK_ALT: return "alt";
            case DOM_VK_PAUSE: return "pause";
            case DOM_VK_CAPS_LOCK: return "capslock";
            case DOM_VK_ESCAPE: return "escape";
            case DOM_VK_SPACE: return "space";
            case DOM_VK_PAGE_UP: return "pageup";
            case DOM_VK_PAGE_DOWN: return "pagedown";
            case DOM_VK_END: return "end";
            case DOM_VK_HOME: return "home";
            case DOM_VK_LEFT: return "left";
            case DOM_VK_UP: return "up";
            case DOM_VK_RIGHT: return "right";
            case DOM_VK_DOWN: return "down";
            case DOM_VK_PRINTSCREEN: return "printscreen";
            case DOM_VK_INSERT: return "insert";
            case DOM_VK_DELETE: return "delete";
            case DOM_VK_SEMICOLON: return "semicolon";
            case DOM_VK_EQUALS: return "equals";
            case DOM_VK_CONTEXT_MENU: return "contextmenu";
            case DOM_VK_NUMPAD0: return "numpad0";
            case DOM_VK_NUMPAD1: return "numpad1";
            case DOM_VK_NUMPAD2: return "numpad2";
            case DOM_VK_NUMPAD3: return "numpad3";
            case DOM_VK_NUMPAD4: return "numpad4";
            case DOM_VK_NUMPAD5: return "numpad5";
            case DOM_VK_NUMPAD6: return "numpad6";
            case DOM_VK_NUMPAD7: return "numpad7";
            case DOM_VK_NUMPAD8: return "numpad8";
            case DOM_VK_NUMPAD9: return "numpad9";
            case DOM_VK_MULTIPLY: return "multiply";
            case DOM_VK_ADD: return "add";
            case DOM_VK_SEPARATOR: return "separator";
            case DOM_VK_SUBTRACT: return "subtract";
            case DOM_VK_DECIMAL: return "decimal";
            case DOM_VK_DIVIDE: return "divide";
            case DOM_VK_F1: return "f1";
            case DOM_VK_F2: return "f2";
            case DOM_VK_F3: return "f3";
            case DOM_VK_F4: return "f4";
            case DOM_VK_F5: return "f5";
            case DOM_VK_F6: return "f6";
            case DOM_VK_F7: return "f7";
            case DOM_VK_F8: return "f8";
            case DOM_VK_F9: return "f9";
            case DOM_VK_F10: return "f10";
            case DOM_VK_F11: return "f11";
            case DOM_VK_F12: return "f12";
            case DOM_VK_F13: return "f13";
            case DOM_VK_F14: return "f14";
            case DOM_VK_F15: return "f15";
            case DOM_VK_F16: return "f16";
            case DOM_VK_F17: return "f17";
            case DOM_VK_F18: return "f18";
            case DOM_VK_F19: return "f19";
            case DOM_VK_F20: return "f20";
            case DOM_VK_F21: return "f21";
            case DOM_VK_F22: return "f22";
            case DOM_VK_F23: return "f23";
            case DOM_VK_F24: return "f24";
            case DOM_VK_NUM_LOCK: return "numlock";
            case DOM_VK_SCROLL_LOCK: return "scrolllock";
            case DOM_VK_META: return this.meta_key_str;
            case DOM_VK_META1: return this.meta_key_str;
            case DOM_VK_META2: return this.meta_key_str;
            case DOM_VK_MEDIA_MUTE: return "mute";
            case DOM_VK_MEDIA_VOLUME_DOWN: return "volumedown";
            case DOM_VK_MEDIA_VOLUME_UP: return "volumeup";
            case DOM_VK_MEDIA_NEXT_TRACK: return "nexttrack";
            case DOM_VK_MEDIA_PREV_TRACK: return "prevtrack";
            case DOM_VK_MEDIA_STOP: return "stop";
            case DOM_VK_MEDIA_PLAY_PAUSE: return "playpause";
          }
          if (this.hotkeyChar && this.hotkeyChar != 0) return String.fromCharCode(this.hotkeyChar);
          // because for some reason, some keys may not be recognized, print them as literal keycodes 
          // (this is in part, but not entirely, due to mozilla bug #67233, https://bugzilla.mozilla.org/show_bug.cgi?id=67233)
          // note: this is only a display problem (charcode), the keycode is always fine
          return "$" + code;
        ]]>
      </body>
    </method>

    <method name="log">
      <parameter name="msg"/>
      <body>
        <![CDATA[
          var consoleService = Components.classes['@mozilla.org/consoleservice;1']
                                  .getService(Components.interfaces.nsIConsoleService);
          consoleService.logStringMessage(msg);
        ]]>
      </body>
    </method>

    <method name="addKeyStr">
      <parameter name="str"/>
      <parameter name="key"/>
      <body>
        <![CDATA[
          if (!str) str = "";
          if (str != "") str += "-";
          str += key;
          return str;
        ]]>
      </body>
    </method>
    
    <method name="updateDisplay">
      <body>
        <![CDATA[
          this.textbox.value = this.getHotkey(true);
        ]]>
      </body>
    </method>

    <method name="isModKey">
      <parameter name="keyCode"/>
      <body>
        <![CDATA[
          const DOM_VK_SHIFT          = 0x10;
          const DOM_VK_META           = 0xE0;
          const DOM_VK_META1          = 0x5B;
          const DOM_VK_META2          = 0x5C;
          const DOM_VK_ALT            = 0x12;
          const DOM_VK_CONTROL        = 0x11;
          var ismodkey = (keyCode == DOM_VK_META || keyCode == DOM_VK_META1 || keyCode == DOM_VK_META2 || keyCode == DOM_VK_SHIFT || keyCode == DOM_VK_ALT || keyCode == DOM_VK_CONTROL);
          //this.log("ismodkey = " + ismodkey);
          return ismodkey;
        ]]>
      </body>
    </method>

    <method name="newKey">
      <parameter name="keyCode"/>
      <body>
        <![CDATA[
          this.hotkeyShift = this.shift_down;
          this.hotkeyCtrl = this.ctrl_down;
          this.hotkeyAlt = this.alt_down;
          this.hotkeyMeta = this.meta_down;
          //this.log("hS " + this.hotkeyShift + " hC " + this.hotkeyCtrl + " hA " + this.hotkeyAlt + " hM " + this.hotkeyMeta);
          if (!this.isModKey(keyCode)) { 
            this.hotkeyCode = keyCode; 
          } else {
            this.hotkeyCode = 0;
          }
          this.updateDisplay();
        ]]>
      </body>
    </method>

    <method name="handleModState">
      <parameter name="mod"/>
      <parameter name="down"/>
      <body>
        <![CDATA[
          const DOM_VK_SHIFT          = 0x10;
          const DOM_VK_META           = 0xE0;
          const DOM_VK_LWIN           = 0x5B;
          const DOM_VK_RWIN           = 0x5C;
          const DOM_VK_ALT            = 0x12;
          const DOM_VK_CONTROL        = 0x11;
          switch (mod) {
            case DOM_VK_SHIFT: this.shift_down = down; break;
            case DOM_VK_CONTROL: this.ctrl_down = down; break;
            case DOM_VK_ALT: this.alt_down = down; break;
            case DOM_VK_META: // fallthru
            case DOM_VK_LWIN: // fallthru
            case DOM_VK_RWIN: this.meta_down = down; break;
          }
          //this.log("hS " + this.hotkeyShift + " hC " + this.hotkeyCtrl + " hA " + this.hotkeyAlt + " hM " + this.hotkeyMeta);
        ]]>
      </body>
    </method>

    <method name="getHotkey">
      <parameter name="for_display_purposes"/>
      <body>
        <![CDATA[
          var str = "";
          if (this.hotkeyCtrl) str = this.addKeyStr(str, "ctrl");
          if (this.hotkeyAlt) str = this.addKeyStr(str, "alt");
          if (this.hotkeyShift) str = this.addKeyStr(str, "shift");
          if (this.hotkeyMeta) str = this.addKeyStr(str, for_display_purposes ? this.meta_key_str : "meta");
          if (for_display_purposes) {
            if (this.hotkeyCode != 0) str = this.addKeyStr(str, this.keyCodeToString(this.hotkeyCode));
          } else {
            if (this.hotkeyCode != 0) str = this.addKeyStr(str, "$" + this.hotkeyCode);
          }
          if (for_display_purposes) str = this.localizeKeys(str);
          if (for_display_purposes) str = str.toUpperCase();
          return str;
        ]]>
      </body>
    </method>

    <method name="localizeKey">
      <parameter name="str"/>
      <body>
        <![CDATA[
          var r = str;
          try {
            r = this.songbirdStrings.GetStringFromName("keyboard."+str);
          } catch (err) {  /* we have a default */ }
          r = r.replace(/-/g, " ");
          return r;
        ]]>
      </body>
    </method>

    <method name="localizeKeys">
      <parameter name="str"/>
      <body>
        <![CDATA[
          var res;
          var keys = str.split("-");
          for (var i=0;i<keys.length;i++) {
            var k = keys[i];
            k = k.toLowerCase();
            res = this.addKeyStr(res, this.localizeKey(k));
          }
          return res;
        ]]>
      </body>
    </method>

    <method name="setHotkey">
      <parameter name="keycombo"/>
      <parameter name="keydisplay"/>
      <body>
        <![CDATA[
          this.hotkeyAlt = this.hotkeyShift = this.hotkeyCtrl = this.hotkeyMeta = false; 
          this.alt_down = this.shift_down = this.ctrl_down = this.meta_down = false; 
          this.hotkeyCode = this.hotkeyChar = 0;
          // Split key combination string
          var keys = keycombo.split("-");
          var dkeys = keydisplay.split("-");
          // Parse its components
          for (var j=0;j<keys.length;j++) {
            keys[j] = keys[j].toLowerCase();
            if (keys[j] == "alt") this.hotkeyAlt = true;
            else if (keys[j] == "shift") this.hotkeyShift = true;
            else if (keys[j] == "ctrl") this.hotkeyCtrl = true;
            else if (keys[j] == "meta") this.hotkeyMeta = true;
            else {
              this.hotkeyCode = this.stringToKeyCode(keys[j]);
              if (dkeys[j].length == 1) this.hotkeyChar = dkeys[j].charCodeAt(0);
              else this.hotkeyChar = 0;
            }
          }
          this.updateDisplay();
        ]]>
      </body>
    </method>

    <method name="stringToKeyCode">
      <parameter name="str"/>
      <body>
        <![CDATA[
          if (str.slice(0, 1) == '$') return parseInt(str.slice(1));
          return 0;
        ]]>
      </body>
    </method>

   </implementation>

   <handlers>
     <handler event="keypress">
       <![CDATA[
        //this.log("keypress -> " + event.keyCode + " - " + event.charCode);
        this.hotkeyChar = event.charCode;
        this.updateDisplay();
       ]]>
     </handler>

     <handler event="keydown">
       <![CDATA[
         // special case for alt, which does not give an up event after an Alt-Letter was pressed
         if (!event.altKey && this.alt_down) this.alt_down = false;
         if (this.isModKey(event.keyCode)) this.handleModState(event.keyCode, true);
         //this.log("keydown -> " + event.keyCode + " - " + event.charCode);
         this.newKey(event.keyCode);
         event.preventDefault();
         event.stopPropagation();
       ]]>
       </handler>

       <handler event="keyup">
         <![CDATA[
         //this.log("keyup");
         if (this.isModKey(event.keyCode)) this.handleModState(event.keyCode, false);
         if (this.hotkeyCode == 0 && this.isModKey(event.keyCode)) { this.hotkeyAlt = this.hotkeyShift = this.hotkeyCtrl = this.hotkeyMeta = false; this.updateDisplay(); }
         event.preventDefault();
         event.stopPropagation();
       ]]>
     </handler>

   </handlers>
 
  </binding>

</bindings>

