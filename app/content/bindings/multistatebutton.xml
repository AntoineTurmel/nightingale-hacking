<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2006 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the “GPL”).
// 
// Software distributed under the License is distributed 
// on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="multistatebutton">
    <content>
	    <xul:hbox id="mainbox">
        <children id="bleh"/>
	    </xul:hbox>
    </content>

   <implementation>

    <field name="m_DOMEval">null</field>
    <field name="m_MouseDown">false</field>
    <field name="m_State">0</field>
    <field name="m_nStates">3</field>

    <constructor>
      <![CDATA[
      try
      {
        var jsLoader = Components.classes["@mozilla.org/moz/jssubscript-loader;1"].getService(Components.interfaces.mozIJSSubScriptLoader);

        jsLoader.loadSubScript( "chrome://songbird/content/scripts/sbIDOMEval.js", this );

        var element = this;
        document.__multistatebutton__ = this;
        
        element.addEventListener("mousedown", this.onMouseDown, true); 
        element.addEventListener("mouseover", this.onMouseOver, true); 
        element.addEventListener("mouseout", this.onMouseOut, true); 
        document.addEventListener("mouseup", this.onGlobalMouseUp, true); 
               
        this.m_DOMEval = new this.sbIDOMEval( element );

        this.m_DOMEval.SetValue("multistatebutton_state", "0");
        this.m_DOMEval.SetValue("multistatebutton_mouseover", "0");
        this.m_DOMEval.SetValue("multistatebutton_mousedown", "0");
        this.m_DOMEval.EnableUpdate(1);
      }
      catch ( err )
      {
        alert( err );
      }
      ]]>
    </constructor>
    
    <method name="onGlobalMouseUp">
      <parameter name="event"/>
      <body>
        <![CDATA[
          try
          {
            if (document.__multistatebutton__ != null) {
              document.__multistatebutton__.m_DOMEval.SetValue("multistatebutton_mousedown", "0");
              if (document.__multistatebutton__.m_DOMEval.GetValue("multistatebutton_mouseover") == "1") {
                document.__multistatebutton__.m_State++;
                if (document.__multistatebutton__.m_State == document.__multistatebutton__.m_nStates) document.__multistatebutton__.m_State = 0;
                document.__multistatebutton__.m_DOMEval.SetValue("multistatebutton_state", document.__multistatebutton__.m_State);
                var e = document.createEvent("Events");
                e.initEvent("multistatebutton-click", false, true);
                document.__multistatebutton__.dispatchEvent(e);
              }
            }
          }
          catch ( err )
          {
            alert( err );
          }
        ]]>
      </body>
    </method>

    <method name="onMouseDown">
      <parameter name="event"/>
      <body>
        <![CDATA[
          try
          {
            document.__multistatebutton__ = this;
            this.m_DOMEval.SetValue("multistatebutton_mousedown", "1");
          }
          catch ( err )
          {
            alert( err );
          }
        ]]>
      </body>
    </method>

    <method name="onMouseOver">
      <parameter name="event"/>
      <body>
        <![CDATA[
          try
          {
            this.m_DOMEval.SetValue("multistatebutton_mouseover", "1");
          }
          catch ( err )
          {
            alert( err );
          }
        ]]>
      </body>
    </method>

    <method name="onMouseOut">
      <parameter name="event"/>
      <body>
        <![CDATA[
          try
          {
            this.m_DOMEval.SetValue("multistatebutton_mouseover", "0");
          }
          catch ( err )
          {
            alert( err );
          }
        ]]>
      </body>
    </method>

   </implementation>
 
  </binding>

</bindings>
