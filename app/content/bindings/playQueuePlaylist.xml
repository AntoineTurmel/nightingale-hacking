<?xml version="1.0"?>
<!--
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2011 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <!--
    Songbird play queue playlist widget

    This binding extends the playlist binding to provide methods and event
    handlers that are unique to the play queue playlist.
  -->
  <binding id="playqueue-playlist"
           extends="chrome://songbird/content/bindings/playlist.xml#playlist">

    <implementation>

      <constructor>
        <![CDATA[
          this._destroyed = false;
          var self = this;
          this._playQueueService = Cc["@songbirdnest.com/Songbird/playqueue/service;1"]
                                     .getService(Ci.sbIPlayQueueService);

          this._playQueueServiceListener = {
            onIndexUpdated: function(aToIndex) {},

            onQueueOperationStarted: function() {
              self.disableDrop = true;
            },

            onQueueOperationCompleted: function(aCount) {
              self.disableDrop = false;
            }
          };
          this._playQueueService.addListener(this._playQueueServiceListener);
        ]]>
      </constructor>

      <destructor>
        if (this._destroyed) return;
        this._playQueueService.removeListener(this._playQueueServiceListener);
        this._destroyed = true;
      </destructor>


      <!--
        Invalidate the row that contains the play queue's current track. This
        causes the row to be repainted.
      -->
      <method name="_invalidateCurrentRow">
        <body>
          <![CDATA[
            this.tree.treeBoxObject.invalidateRow(this._playQueueService.index);
          ]]>
        </body>
      </method>

      <method name="_addItemsAsync">
        <parameter name="mediaList"/>
        <parameter name="enumerator"/>
        <parameter name="doInsert"/>
        <parameter name="row"/>
        <body>
          <![CDATA[
            if (doInsert) {
              this._playQueueService.queueSomeBefore(row, enumerator);
            } else {
              this._playQueueService.queueSomeLast(enumerator);
            }
          ]]>
        </body>
      </method>
    </implementation>

    <handlers>

      <!--
        Handle focus and blur events so that the row containing the current
        track can be invalidated and redrawn. This is required because the
        styling of this row is dependent on focus state.
      -->
      <handler event="focus">
        <![CDATA[
          this._invalidateCurrentRow();
        ]]>
      </handler>
      <handler event="blur">
        <![CDATA[
          this._invalidateCurrentRow();
        ]]>
      </handler>
    </handlers>
  </binding>
</bindings>

