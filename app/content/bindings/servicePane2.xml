<?xml version="1.0" encoding="UTF-8"?>
<!--
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */
-->

<!--
  -TODO:
  - Bug 18545
  -  1. Create 3 bindings (done)
  -   i.   Service Pane (done)
  -   ii.  Service Pane Group (done)
  -   iii. Service Pane Node (done)
  -  2. Migrate functionality of old service pane to new service pane
  -  3. Context menus for nodes.
  -  4. Edit names for nodes.
  -  5. Ability to highlight nodes.
  - Bug 18548
  -  1. Toggle node visibility when clicking on toggle image in header of group.
  - Bug 18551
  -  1. Make sure we can change the badge on nodes easily.
  - Bug 18552
  -  1. Make sure we can change the image on nodes easily.
  -->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">

  <!--
    - \brief ServicePaneNodeBadge is a single badge attached to a 
    - ServicePaneNode.  It contains a text label, image, and an associated
    - action.  If the image is null, then the text label will be used.
    - When the badge is clicked, the action will be taken if one is defined.
    -->
  <binding id="servicepane-node-badge">
    <content mousethrough="never">
      <xul:hbox class="servicepane-node-badge">
        <xul:label class="servicepane-node-badge-label" />
        <xul:image class="servicepane-node-badge-image" />
      </xul:hbox>
    </content>
    
    <implementation>
      <constructor>
      <![CDATA[
      ]]>
      </constructor>
    </implementation>
  </binding>

   <!--
    - \brief ServicePaneNode is a single entry attached to a ServicePaneGroup.
    - it contains an icon, label and an arbitrary # of ServicePaneNodeBadges.
    - When the user clicks the node the url attached to this node will launch
    - in the browser if any.  If the node is already selected and the user
    - clicks it, the node should be renamed.
    -->
  <binding id="servicepane-node">
    <content mousethrough="never">
      <xul:vbox class="servicepane-node" flex="1" onclick="loadNodeURL(event);">
        
        <xul:hbox class="servicepane-node-info">
          <xul:image class="servicepane-node-container-arrow" />
          <xul:image class="servicepane-node-image" xbl:inherits="src=image"/>
          <xul:label class="servicepane-node-label" xbl:inherits="value=label"/>
          <xul:spacer flex="1" />
          <xul:hbox class="servicepane-node-badges"
                    sbid="servicepane-node-badges" flex="1" />
        </xul:hbox>
        
        <xul:vbox class="servicepane-node-children">
          <children />
        </xul:vbox>

      </xul:vbox>
    </content>

    <implementation>
      <constructor>
        <![CDATA[
          // TODO: Check for a better way to load. (stevo)
          // This is here because we can not call nodeData until the binding has
          // been applied.
          
          // If this element has a node id then load up the data from the node
          // we are always expected to be in the service pane under a group at
          // this point so we call up the DOM of nodes.
          if (this.hasAttribute("nodeid")) {
            var nodeID = this.getAttribute("nodeid");
            dump("nodeid: " + nodeID + " -- parentNode? " + this.parentNode.tagName + "\n");
            if (this.parentNode)
              this.nodeData = this.parentNode.getNode(nodeID);
          } else {
            // If we have no node data, then hide by default.
            this.setAttribute("hidden", true);
          }
        ]]>
      </constructor>
      
      <!--
        - \brief Hold the actual node data for this node so we can reference it
        -   whenever we need
        -->
      <field name="_nodeData">null</field>
      
       <!--
        - \brief Hold the badges associated with this node
        -->
      <field name="_badges">null</field>
      
      <!--
        - \brief sbIServicePaneNode data associated with this node
        --> 
      <property name="nodeData">
        <getter><![CDATA[
          return this._nodeData;
        ]]></getter>
        <setter><![CDATA[
          // val should be a sbIServicePaneNode object
          this._nodeData = val;
          if (this._nodeData) {
            // Set up the elements
            this.setAttribute("image", this._nodeData.image);
            this.setAttribute("label", this._nodeData.displayName);
            this.setAttribute("collapsed", !this._nodeData.isOpen);
            
            // Hide the node if it should be hidden
            if (this._nodeData.hidden) {
              this.setAttribute("hidden", true);
            } else if (this.hasAttribute("hidden")) {
              this.removeAttribute("hidden");
            }
          }
          else {
            this.setAttribute("image", "");
            this.setAttribute("label", "");
            this.setAttribute("hidden");
            this.setAttribute("collapsed", false);
          }
          return this._nodeData;
        ]]></setter>
      </property>
      
      <!--
        - \brief The browser we are linked to if any.
        -->
      <field name="_browser">null</field>
      <property name="browser">
        <getter><![CDATA[
          if (!this._browser) {
            this._browser = document.getElementById(this.getAttribute('browser'));
          }
          return this._browser;
        ]]></getter>
      </property>

      <!--
        - \brief Load the URL associated with this node in the browser if
        - available.
        -->
      <method name="loadNodeURL">
        <parameter name="event"/>
        <body><![CDATA[
          if (!this.browser)
            return; // Nothing to do if we don't have a browser.
        
          // If this node has a URL, just load it in the browser
          if (this._nodeData.url) {
            var target = null;
            if (this.isMediaTabURL(this._nodeData.url)) {
              target = "_media";
              this.browser.selectedTab = this.browser.mediaTab;
            } else if (event.button == 1) {
              // Middle click.
              target = "_blank";
            }
            this.browser.loadURI(this._nodeData.url, null, null, event, target);
          
          // If no URL, apply special handling
          } else {
            // If there is a media list for this node, hand it off to the 
            // browser to display somehow.
            // I'm told that this hack is fine, as it will one day be replaced
            // with the playlist commands system.
            var libraryServicePane = 
              Components.classes['@songbirdnest.com/servicepane/library;1']
              .getService(Components.interfaces.sbILibraryServicePaneService);
            var mediaList = libraryServicePane.getLibraryResourceForNode(this._nodeData);
            if (mediaList) {
              const NS_SP = "http://songbirdnest.com/rdf/servicepane#";
              var view = LibraryUtils.createStandardMediaListView(mediaList);
              if (this._nodeData.hasAttributeNS(NS_SP,
                                                "mediaListViewConstraints")) {
                // set up the constraints
                var builder = Cc["@songbirdnest.com/Songbird/Library/ConstraintBuilder;1"]
                                .createInstance(Ci.sbILibraryConstraintBuilder);
                try {
                  builder.parseFromString(
                    this._nodeData.getAttributeNS(NS_SP,
                                                  "mediaListViewConstraints"));
                  view.filterConstraint = builder.get();
                } catch (e) {
                  // boo, the constraints are bad, use standard instead
                  view.filterConstraint = LibraryUtils.standardFilterConstraint;
                }
              }
              var tab = this.browser.loadMediaList(mediaList,
                                                   event,
                                                   "_media",
                                                   view);
              this.browser.selectedTab = tab;

              // Record list type metrics for some reason.
              // See http://bugzilla.songbirdnest.com/show_bug.cgi?id=4021
              // changed to loadNode from click as there are ways other than clicking
              // to get here.
              try {
                var listType = mediaList.getProperty(SBProperties.customType);
                var libType = mediaList.library.getProperty(SBProperties.customType);
                metrics_inc("app.servicepane.loadnode.medialist", libType + "." + listType, null);
              } catch(e) { Components.utils.reportError(e); }

            } else {
              // we have no handler for this service pane node load
              // dispatch an event people can listen for and don't report
              let event = document.createEvent("XULCommandEvent");
              event.QueryInterface(Components.interfaces.nsIDOMXULCommandEvent);
              event.initCommandEvent("servicepane-loadnode",
                                     event.bubble,
                                     false,
                                     event.view,
                                     event.detail,
                                     event.ctrlKey,
                                     event.altKey,
                                     event.shiftKey,
                                     event.metaKey,
                                     event);
              this.dispatchEvent(event);
              
              var SP_NS = "http://songbirdnest.com/rdf/servicepane#";
              var eventType = this._nodeData.getAttributeNS(SP_NS, "eventType");
              if (eventType) {
                let event = document.createEvent("UIEvent");
                event.initUIEvent(eventType, true, true, window, 0);
                window.dispatchEvent(event);
              }
            }
          }
        ]]></body>
      </method>

      <!--
        - \brief Determine if a url is a media tab url.
        - \param aURL url to check.
        - \return true if aURL is a media tab url, false if not.
        -->
      <method name="isMediaTabURL">
        <parameter name="aURL"/>
        <body><![CDATA[
          if (!aURL) {
            return Components.results.NS_ERROR_INVALID_ARG;
          }
          if (!this.browser.mediaTab) {
            // no media tab, can't be a media tab url
            return false;
          }
          var url = aURL;
          if (aURL instanceof Components.interfaces.nsIURI) {
            url = aURL.spec;
          }
          if (!(/chrome:\/\//.test(url))) {
            // not chrome
            return false;
          }
          const PREF_FIRSTRUN_URL = "songbird.url.firstrunpage";
          if (url == Application.prefs.getValue(PREF_FIRSTRUN_URL, null)) {
            // first run url, sure this can be a media tab
            return true;
          }
          return true;
        ]]></body>
      </method>

      <method name="appendBadge">
      </method>

      <method name="removeBadge">
      </method>

      <method name="insertBadgeBefore">
      </method>

    </implementation>
  </binding>
  
  <binding id="servicepane-group">
    <content mousethrough="never">
      <xul:vbox class="servicepane-group" flex="1">
        <xul:hbox class="servicepane-group-header">
          <xul:label class="servicepane-group-label"
                     xbl:inherits="value=label"/>
          <xul:spacer flex="1" />
          <xul:image class="servicepane-group-toggle"/>
        </xul:hbox>
        <xul:vbox sbid="groupNodes" xbl:inherits="open">
          <children /> <!-- servicepane-nodes -->
        </xul:vbox>
      </xul:vbox>
    </content>

    <implementation>
      <method name="getNode">
        <parameter name="nodeID"/>
        <body><![CDATA[
          dump("sb-servicepane-group.getNode() called\n");
          return this.parentNode.getNode(nodeID);
        ]]></body>
      </method>
    </implementation>
  </binding>
  
  <binding id="servicepane">
    <content mousethrough="never">
      <xul:vbox id="sb_servicepane" class="servicepane-outer-box" flex="1">
        <xul:vbox id="sb_servicepane_box"
                  class="servicepane-inner-box"
                  flex="1">
          <children /> <!-- servicepane-group elements -->
        </xul:vbox>
        <xul:sb-displaypane-splitter
                collapse="after"
                orient="vertical"
                resizeafter="closest"
                id="displaypane_servicepane_bottom_splitter"
                menuid="displaypane_servicepane_bottom_menu" />
        <xul:sb-displaypane id="displaypane_servicepane_bottom"
                            label="&displaypane.name.servicepane;"
                            splitter="displaypane_servicepane_bottom_splitter"
                            contentgroup="servicepane"/>
      </xul:vbox>
      <!-- menupopup needs to be outside the vbox otherwise it
           gets height adjusted to 0 when the splitter is 
           adjusted -->
      <xul:menupopup id="displaypane_servicepane_bottom_menu"
                     class="menulist-menupopup">
        <xul:sb-displaypane-content-menuitems
                     paneid="displaypane_servicepane_bottom" />
      </xul:menupopup>
    </content>
    
    <implementation>
      <constructor>
      <![CDATA[
        window.gServicePane = this;

        this.mService =
          Components.classes['@songbirdnest.com/servicepane/service;1']
          .getService(Components.interfaces.sbIServicePaneService);
        this.mService.init();
        
        this.loadServicePane();
      ]]>
      </constructor>
  
      <!-- The ID of the currently selected node, or null if none -->
      <field name="_selectedNodeID">null</field>

      <!--
        TODO: Change the use of these functions so we can remove the
        mTreePane dependency (not to be confused with the T-PAIN dependency).
        mTreePane is used for the following:
        isMediaTabURL(url) - SBSessionStore.js#298
        loadNode(node, null) - mainPlayerWindow.js#445, deviceSupport.js#477
      -->
      <field name="mTreePane">null</field>

      <!-- Splitter between the service pane and the content on the main view
           in the Purple Rain/Gonzo feathers. -->
      <field name="mSplitter">
        document.getElementById('servicepane_splitter');
      </field>

      <!--
        - \brief Create a group that may hold nodes
        -->
      <method name="createGroup">
        <parameter name="nodeData"/>
        <body><![CDATA[
          var XULNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
          var newGroup = document.createElementNS(XULNS, "sb-servicepane-group");
          newGroup.setAttribute("label", nodeData.displayName);
          newGroup.setAttribute("id", nodeData.id);
          if (!nodeData.isOpen) {
            newGroup.setAttribute("open", false);
          }
          if (nodeData.hidden) {
            newGroup.setAttribute("hidden", true);
          }
          return newGroup;
        ]]></body>
      </method>

      <!--
        - \brief Create a node that belongs in a group
        -->
      <method name="createNode">
        <parameter name="nodeData"/>
        <parameter name="group"/>
        <body><![CDATA[
          var XULNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
          var newNode = document.createElementNS(XULNS,"sb-servicepane-node");
          newNode.setAttribute("nodeid", nodeData.id);
          if (this.hasAttribute("browser")) {
            newNode.setAttribute("browser", this.getAttribute("browser"));
          }
          group.appendChild(newNode);
        ]]></body>
      </method>

      <!--
        - \brief Inital load of the service pane, this will create the groups
        - and fill them with nodes as defined.
        -->
      <method name="loadServicePane">
        <body><![CDATA[
          if (!this.mService) {
            this.mService =
              Components.classes['@songbirdnest.com/servicepane/service;1']
              .getService(Components.interfaces.sbIServicePaneService);
            this.mService.init();
          }

          var XULNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
          var groupEntry = this.mService.root.firstChild;
          while (groupEntry && groupEntry != this.mService.root.lastChild) {
            // Create the group and set the state
            var newgroup = this.createGroup(groupEntry);
            
            // Create the nodes in this group
            var nodeEntry = groupEntry.firstChild;
            while (nodeEntry && nodeEntry != groupEntry.lastChild) {
              this.createNode(nodeEntry, newgroup);
              nodeEntry = nodeEntry.nextSibling;
            }
            
            this.appendChild(newgroup);
            groupEntry = groupEntry.nextSibling;
          }
        ]]></body>
      </method>

      <!--
        - \brief Get the node from an id.
        - \param nodeID is the id of the node.
        - \return the sbIServicePaneNode from the id.
        -->
      <method name="getNode">
        <parameter name="nodeID"/>
        <body><![CDATA[
          return this.mService.getNode(nodeID);
        ]]></body>
      </method>

      <!--
        - \brief Get the selected node if any.
        - \return sbIServicePaneNode of the selected node, or null if none is
        -         selected.
        -->
      <method name="getSelectedNode">
        <body><![CDATA[
          if (this._selectedNodeID) {
            return this.mService.getNode(this._selectedNodeID);
          }
          else {
            return null;
          }
        ]]></body>
      </method>

      <!--
        - \brief Start editing a nodes name, this may not be enabled if the
        -        node is read only.
        - \return true if editing started, false if not able to edit.
        -->
      <method name="startEditingNode">
        <parameter name="aNode"/>
        <body><![CDATA[
          return false;
        ]]></body>
      </method>
 
      <!--
        - \brief Get the name of a node that has a particular URL.
        - \param aURL URL to search for in the nodes.
        - \return name of the node, or aURL if no node found.
        -->
      <method name="getURLName">
        <parameter name="aURL"/>
        <body><![CDATA[
          var node = this.mService.getNodeForURL(aURL);
          return (node) ? node.name : aURL;
        ]]></body>
      </method>

      <!--
        - \brief Get the image of a node that has a particular URL.
        - \param aURL URL to search for in the nodes.
        - \return image of the node, or null if no node found.
        -->
      <method name="getURLImage">
        <parameter name="aURL"/>
        <body><![CDATA[
          var node = this.mService.getNodeForURL(aURL);
          return (node) ? node.image : null;
        ]]></body>
      </method>

      <!--
        - \brief Get the properties of a node that has a particular URL.
        - \param aURL URL to search for in the nodes.
        - \return properties of the node, or "" if no node found.
        -->
      <method name="getURLProperties">
        <parameter name="aURL"/>
        <body><![CDATA[
          var node = this.mService.getNodeForURL(aURL);
          return (node) ? node.properties : "";
        ]]></body>
      </method>

      <!--
        - \brief State of the service pane, open or closed.
        -->
      <property name="open">
        <getter>
        <![CDATA[
          var elId = this.mSplitter.getAttribute("collapseelement");
          return !document.getElementById(elId).collapsed;
        ]]>
        </getter>
        <setter>
        <![CDATA[
          var elId = this.mSplitter.getAttribute("collapseelement");
          var el = document.getElementById(elId);
          el.collapsed = !val;

          SBDataSetBoolValue('splitter.servicepane_splitter.collapsed',
                             el.collapsed);
          // If we are opening the service pane, make sure we highlight the
          // appropriate node.
          if(val) {
            // Is there a servicepane node for the current tab?
            //var node = this.mTreePane.browser.selectedTab.servicePaneNode;
            //if (node) {
            //  this.mTreePane.highlightNode(node);
            //}
          }
          ]]>
        </setter>
      </property>


    </implementation>
  </binding>

</bindings>
