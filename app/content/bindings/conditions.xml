<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE bindings SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="conditions">

    <content>
      <xul:sb-multi-drawer sbid="drawer" header="false" flex="1" xbl:inherits="maxvisibleitems">
        <xul:hbox class="smart-condition-item-box" align="center" flex="1">
          <xul:menulist class="smart-condition-list" flex="1" value="artist" drawer-prop-map="value=metadata">
            <xul:menupopup class="smart-condition-popup" sbid="metadatapopup">
            </xul:menupopup>
          </xul:menulist>
          <xul:menulist class="smart-condition-list" flex="1" value="0" drawer-prop-map="value=condition">
            <xul:menupopup class="smart-condition-popup">
              <xul:menuitem class="smart-condition-item" label="&smart.contains;" value="0"/>
              <xul:menuitem class="smart-condition-item" label="&smart.not_contain;" value="1"/>
              <xul:menuitem class="smart-condition-item" label="&smart.is;" value="2"/>
              <xul:menuitem class="smart-condition-item" label="&smart.is_not;" value="3"/>
              <xul:menuitem class="smart-condition-item" label="&smart.starts;" value="4"/>
              <xul:menuitem class="smart-condition-item" label="&smart.ends;" value="5"/>
            </xul:menupopup>
          </xul:menulist>
          <xul:textbox class="smart-condition-value dialog_textbox" flex="1" drawer-prop-map="value=value"/>
          <xul:button label="-" class="smart_condition_minus sb_faceplate backless_button" sbtype="remove-drawer-item"/>
          <xul:button label="+" class="smart_condition_plus sb_faceplate backless_button" sbtype="add-drawer-item"/>
        </xul:hbox>
      </xul:sb-multi-drawer>
    </content>

    <implementation>

      <constructor>
      <![CDATA[
      try {
        // Scan the metadata and fill the metadata popup with appropriate items
        this.fillMetadata();
      }
      catch ( err ) {
        alert( "conditions constructor - " + err );
      }
      ]]>
      </constructor>
      <destructor>
      </destructor>

      <field name="drawer">document.getAnonymousElementByAttribute(this, 'sbid', 'drawer');</field>

      <method name="setConditions">
        <parameter name="conditions"/>
        <body>
          this.drawer.setState(conditions);
        </body>
      </method>
      
      <method name="getConditions">
        <body>
          return this.drawer.getState();
        </body>
      </method>
      
      <method name="newCondition">
        <body>
          this.drawer.addItem();
        </body>
      </method>
      
      <method name="fillMetadata">
        <body>
          <![CDATA[
          try {
            // Erase?
            var metadata = new Array();
            var popup = document.getAnonymousElementByAttribute(this, 'sbid', 'metadatapopup');

            // Load up the string bundle
            var src = "chrome://songbird/locale/songbird.properties";
            var stringBundleService =
                Components.classes["@mozilla.org/intl/stringbundle;1"]
                .getService(Components.interfaces.nsIStringBundleService);
            var stringbundle = stringBundleService.createBundle( src );
                
            // Go fill the metadata array with the current library columns
            // XXXredfive
            //const DBQuery = new Components.Constructor("@songbirdnest.com/Songbird/DatabaseQuery;1", "sbIDatabaseQuery");        
            //var metadataDBQuery = new DBQuery();
            //metadataDBQuery = metadataDBQuery.QueryInterface( Components.interfaces.sbIDatabaseQuery );

            var metadataDBQuery =
                Components.classes["@songbirdnest.com/Songbird/DatabaseQuery;1"]
                .createInstance( Components.interfaces.sbIDatabaseQuery );

            //const MediaLibrary = new Components.Constructor("@songbirdnest.com/Songbird/MediaLibrary;1", "sbIMediaLibrary");        
            //var mediaLibrary = new MediaLibrary();
            //mediaLibrary = mediaLibrary.QueryInterface( Components.interfaces.sbIMediaLibrary );

            var mediaLibrary =
                Components.classes["@songbirdnest.com/Songbird/MediaLibrary;1"]
                .createInstance( Components.interfaces.sbIMediaLibrary );
            metadataDBQuery.setAsyncQuery( false );
            metadataDBQuery.setDatabaseGUID( "songbird" );
            mediaLibrary.setQueryObject( metadataDBQuery );
            mediaLibrary.getColumnInfo();

            // And, here, hopefully we have some column info.
            var resultset = metadataDBQuery.getResultObject();
            var rowcount = resultset.getRowCount();
            const kName = "readable_name";
            const kColumn = "column_name";
            const kVisible = "is_visible";
            for ( var index = 0; index < rowcount; index++ ) {
              var visible = resultset.getRowCellByColumn( index, kVisible );
              if ( visible == "1" ) {
                var obj = {};
                obj.name = resultset.getRowCellByColumn( index, kName );
                obj.column = resultset.getRowCellByColumn( index, kColumn );
                
                if ( obj.name && obj.name[ 0 ] == "&" ) {
                  try {
                    obj.name = stringbundle.GetStringFromName( obj.name.substr( 1, obj.name.length ) );
                  }
                  catch( err ) {
                    alert( "fillMetadata - " + err );
                  }
                }
                
                if ( ( obj.column != "row_id" ) && ( obj.column != "id" ) ) {
                  metadata.push( obj );
                }
              }
            }

            for ( var index = 0; index < metadata.length; index++ ) {
              // Make the metadata item
              var meta_menuitem = document.createElement( "menuitem" );
              meta_menuitem.setAttribute( "class", "smart-condition-item" );
              meta_menuitem.setAttribute( "label", metadata[ index ].name );
              meta_menuitem.setAttribute( "column", metadata[ index ].column );
              meta_menuitem.setAttribute( "value", metadata[ index ].column );
              
              popup.appendChild( meta_menuitem );
            }
          }
          catch ( err ) {
            alert( "fillMetadata - " + err );
          }
          ]]>
        </body>
      </method>

    </implementation>
 
  </binding>

</bindings>

