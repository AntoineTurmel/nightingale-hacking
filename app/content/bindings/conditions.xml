<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2006 Pioneers of the Inevitable LLC
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the “GPL”).
// 
// Software distributed under the License is distributed 
// on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="conditions">
    <content>
      <xul:vbox class="smart_condition_box" sbid="parent" flex="1" oncommand="onCommand( event );">
        <xul:spacer sbid="first" height="3"/>
        
        <!-- stuff gets stuffed here -->
        
        <xul:spacer sbid="before" height="3"/>
      </xul:vbox>

    </content>

    <implementation>

      <constructor>
      <![CDATA[
      try
      {
        // Load the conditions from the xml?
        this.conditions = new Array();
        var num_conditions = parseInt( this.getAttribute( "num_conditions" ) );
        for ( var i = 0; i < num_conditions; i++ )
        {
          var condition = this.getAttribute( "condition" + ( i + 1 ) );
          this.conditions.push( condition );
        }
        
        // Scan the metadata
        this.fillMetadata();
      }
      catch ( err )
      {
        alert( "conditions constructor - " + err );
      }
      ]]>
      </constructor>
      <destructor>
      </destructor>

      <field name="tracking">false</field>
      <field name="before">document.getAnonymousElementByAttribute(this, 'sbid', 'before');</field>
      <field name="first">document.getAnonymousElementByAttribute(this, 'sbid', 'first');</field>
      <field name="parent">document.getAnonymousElementByAttribute(this, 'sbid', 'parent');</field>
      <field name="size">29</field>
      <field name="distance">0</field>
      <field name="current">0</field>
      <field name="anim_start">0</field>
      <field name="anim_time">0.2</field>
      <field name="anim_complete">null</field>
      <field name="anim_growsize">null</field>
      <field name="interval">null</field>
      <field name="metadata">new Array()</field>
      <field name="conditions">null</field>
      <field name="in_conditions">null</field>
      <field name="in_count">0</field>
      <field name="first_windowsize">false</field>

      <method name="animateNewCondition">
        <parameter name="before"/>
        <body>
          <![CDATA[
          try
          {
            // No animations until we finish
            if ( ! this.tracking )
            {
              // If null, put it at the "end"
              if ( ! before )
              {
                before = this.before;
              }
              
              // Make the growbox
              var growbox = document.createElement( "box" );
              growbox.setAttribute( "flex", "1" );
              growbox.setAttribute( "sbtype", "growbox" );
              this.parent.insertBefore( growbox, before );
              
              // Set our animation values
              this.tracking = true;
              this.distance = this.size;
              this.current = 0;
              this.anim_start = new Date().getTime();
              this.anim_time = 0.2;
              this.anim_complete = this.onGrowComplete;
              this.anim_growsize = null;
              document.__SB_CONDITIONS__ = this;
              
              // Start our animation loop
              this.interval = setInterval( this.animationCallback, 0 );
            }
          }
          catch ( err )
          {
            alert( "animateNewCondition - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="removeCondition">
        <parameter name="cond"/>
        <body>
          <![CDATA[
          try
          {
            // No animations until we finish
            if ( ! this.tracking )
            {
              // Make the growbox
              var growbox = document.createElement( "box" );
              growbox.setAttribute( "flex", "1" );
              growbox.setAttribute( "sbtype", "growbox" );
              this.parent.insertBefore( growbox, cond );
              
              // Remove the condition
              this.parent.removeChild( cond );
              
              // Set our animation values
              this.tracking = true;
              this.distance = - this.size; // removing!
              this.current = 0;
              this.anim_start = new Date().getTime();
              this.anim_time = 0.2;
              this.anim_complete = this.onShrinkComplete;
              this.anim_growsize = null;
              document.__SB_CONDITIONS__ = this;
              
              // Start our animation loop
              this.interval = setInterval( this.animationCallback, 0 ); // as fast as possible for a quarter second
            }
          }
          catch ( err )
          {
            alert( "animateNewCondition - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="animationCallback">
        <body>
          <![CDATA[
          try
          {
            var that = document.__SB_CONDITIONS__;
            
            if ( that.tracking )
            {
              // Calculate size to resize window based on timer interpolation
              var elapsed = ( new Date().getTime() - that.anim_start ) / 1000;
              var interpolate = elapsed / that.anim_time;
              var size = parseInt( ( that.distance * interpolate ) - that.current + 0.5 );
              
              // We have to track a "current" because we do not resize the window via absolute values
              if ( Math.abs( that.current + size ) > Math.abs( that.distance ) )
                size = that.distance - that.current;
              window.resizeBy( 0, size );
              that.current += size;
              
              // The first time we change the window size, 
              // ensure that the box fits the conditions.
              if ( ! that.first_windowsize )
              {
                if ( that.current < that.parent.boxObject.height )
                {
                  window.resizeBy( 0, that.current - that.parent.boxObject.height + 8 ); // +8 ? wtf?
                }
                that.first_windowsize = true;
              }
  
              // Are we done?
              if ( that.current == that.distance )
              {
                if ( that.anim_complete )
                {
                  that.anim_complete( that );
                }
                
                // Set our values back
                that.tracking = false;
                that.distance = 0;
                that.current = 0;
                clearInterval( that.interval );
              }
              else if ( that.anim_growsize )
              {
                // Find the grow box
                var grow_nodes = that.parent.getElementsByAttribute( 'sbtype', 'growbox' );
                if ( grow_nodes.length != 1 )
                {
                  // ??? really bad?
                }
                var growbox = grow_nodes.item( 0 );
                if ( growbox.boxObject.height > that.size )
                {
                  var count = parseInt( growbox.boxObject.height / that.size );
                  for ( var i = 0; i < count; i++ )
                  {
                    that.anim_growsize( that );
                  }
                }
              }
            }
            else
            {
              clearInterval( that.interval );
            }
          }
          catch ( err )
          {
            alert( "animateNewCondition - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="onGrowComplete">
        <parameter name="that"/>
        <body>
          <![CDATA[
          try
          {
            // Find the grow box
            var grow_nodes = that.parent.getElementsByAttribute( 'sbtype', 'growbox' );
            if ( grow_nodes.length != 1 )
            {
              // ??? really bad?
            }
            var growbox = grow_nodes.item( 0 );
            
            // Replace the grow box with the condition item
            if ( growbox )
            {
              that.insertCondition( growbox );
              that.parent.removeChild( growbox );
            }
          }
          catch ( err )
          {
            alert( "onGrowComplete - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="onShrinkComplete">
        <parameter name="that"/>
        <body>
          <![CDATA[
          try
          {
            // Find the grow box
            var grow_nodes = that.parent.getElementsByAttribute( 'sbtype', 'growbox' );
            if ( grow_nodes.length != 1 )
            {
              // ??? really bad?
            }
            var growbox = grow_nodes.item( 0 );
            
            // Replace the grow box with the condition item
            if ( growbox )
            {
              that.parent.removeChild( growbox );
            }
          }
          catch ( err )
          {
            alert( "onShrinkComplete - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="insertCondition">
        <parameter name="before"/>
        <parameter name="cond"/>
        <body>
          <![CDATA[
          try
          {
            // If null, put it at the "end"
            if ( ! before )
            {
              before = this.before;
            }
            
            // Make the parent hbox
            var hbox = document.createElement( "hbox" );
            hbox.setAttribute( "sbtype", "condition_box" );
            hbox.setAttribute( "align", "center" );
            
            // Make the metadata droplist
            var meta_menulist = document.createElement( "menulist" );
            meta_menulist.setAttribute( "sbtype", "metadata" );
            meta_menulist.setAttribute( "class", "smart_condition" );
            meta_menulist.setAttribute( "value", "artist" );

            // Make the metadata popup
            var meta_menupopup = document.createElement( "menupopup" );
            meta_menupopup.setAttribute( "class", "smart_condition_popup" );
            this.addMetadataItems( meta_menupopup );
  
            // Make the condition droplist
            var cond_menulist = document.createElement( "menulist" );
            cond_menulist.setAttribute( "class", "smart_condition" );
            cond_menulist.setAttribute( "sbtype", "condition" );
            cond_menulist.setAttribute( "value", "0" );

            // Make the condition popup
            var cond_menupopup = document.createElement( "menupopup" );
            cond_menupopup.setAttribute( "class", "smart_condition_popup" );
            this.addConditionItems( cond_menupopup );

            // Make the text box
            var textbox = document.createElement( "textbox" );
            textbox.setAttribute( "sbtype", "value" );
            textbox.setAttribute( "class", "smart_condition_value" );
            textbox.setAttribute( "flex", "1" );
            
            // Make the buttons
            var minus = document.createElement( "button" );
            minus.setAttribute( "class", "smart_condition_minus sb_faceplate backless_button" );
            minus.setAttribute( "sbtype", "minus" );
            minus.setAttribute( "width", "10" );
            minus.setAttribute( "label", "-" );
            var plus = document.createElement( "button" );
            plus.setAttribute( "class", "smart_condition_plus sb_faceplate backless_button" );
            plus.setAttribute( "sbtype", "plus" );
            plus.setAttribute( "width", "10" );
            plus.setAttribute( "label", "+" );
            
            // Hook them up.
            meta_menulist.appendChild( meta_menupopup );
            cond_menulist.appendChild( cond_menupopup );
            hbox.appendChild( meta_menulist );
            hbox.appendChild( cond_menulist );
            hbox.appendChild( textbox );
            hbox.appendChild( minus );
            hbox.appendChild( plus );
            this.parent.insertBefore( hbox, before );
            this.size = hbox.boxObject.height;
            
            // Set the values based on the incoming condition data
            if ( cond )
            {
              // Select the meta_menulist
              var meta_selection = null;
              for ( var i = 0; i < meta_menupopup.childNodes.length; i++ )
              {
                var node = meta_menupopup.childNodes.item( i );
                var column = node.getAttribute( "column" );
                // If this is the column in the metadata
                if ( column == cond.metadata )
                {
                  meta_selection = node;
                }
              }
              if ( meta_selection )
              {
                meta_menulist.value = meta_selection.value;
              
                // Select the cond_menulist
                cond_menulist.value = cond.condition;
                
                // Set the textbox
                textbox.value = cond.value;
              }
            }
            else
            {
              // If there is no incoming condition, focus the textbox
              textbox.focus();
            }
          }
          catch ( err )
          {
            alert( "insertCondition - " + err );
          }
          ]]>
        </body>
      </method>
      
      <method name="addMetadataItems">
        <parameter name="popup"/>
        <body>
          <![CDATA[
          try
          {
            for ( var i = 0; i < this.metadata.length; i++ )
            {
              // Make the metadata item
              var meta_menuitem = document.createElement( "menuitem" );
              meta_menuitem.setAttribute( "class", "smart_condition_item" );
              meta_menuitem.setAttribute( "label", this.metadata[ i ].name );
              meta_menuitem.setAttribute( "column", this.metadata[ i ].column );
              meta_menuitem.setAttribute( "value", this.metadata[ i ].column );
              
              popup.appendChild( meta_menuitem );
            }
          }
          catch ( err )
          {
            alert( "addMetadataItems - " + err );
          }
          ]]>
        </body>
      </method>
      
      <method name="addConditionItems">
        <parameter name="popup"/>
        <body>
          <![CDATA[
          try
          {
            for ( var i = 0; i < this.conditions.length; i++ )
            {
              // Make the conditions item
              var cond_menuitem = document.createElement( "menuitem" );
              cond_menuitem.setAttribute( "class", "smart_condition_item" );
              cond_menuitem.setAttribute( "label", this.conditions[ i ] );
              cond_menuitem.setAttribute( "value", i );
              
              popup.appendChild( cond_menuitem );
            }
          }
          catch ( err )
          {
            alert( "addConditionItems - " + err );
          }
          ]]>
        </body>
      </method>
      
      <method name="fillMetadata">
        <body>
          <![CDATA[
          try
          {
            // Erase?
            this.metadata.length = 0;

            // Load up the string bundle
            var src = "chrome://rmp_demo/locale/songbird.properties";
            var stringBundleService =
                Components.classes["@mozilla.org/intl/stringbundle;1"]
                .getService(Components.interfaces.nsIStringBundleService);
            var stringbundle = stringBundleService.createBundle( src );
                
            // Go fill the metadata array with the current library columns
            const DBQuery = new Components.Constructor("@songbird.org/Songbird/DatabaseQuery;1", "sbIDatabaseQuery");        
            var aDBQuery = new DBQuery();
            aDBQuery = aDBQuery.QueryInterface( Components.interfaces.sbIDatabaseQuery );
            const MediaLibrary = new Components.Constructor("@songbird.org/Songbird/MediaLibrary;1", "sbIMediaLibrary");        
            var aMediaLibrary = new MediaLibrary();
            aMediaLibrary = aMediaLibrary.QueryInterface( Components.interfaces.sbIMediaLibrary );
            aDBQuery.SetAsyncQuery( false );
            aDBQuery.SetDatabaseGUID( "songbird" );
            aMediaLibrary.SetQueryObject( aDBQuery );
            aMediaLibrary.GetColumnInfo();

            // And, here, hopefully we have some column info.
            var resultset = aDBQuery.GetResultObject();
            var rowcount = resultset.GetRowCount();
            const kName = "readable_name";
            const kColumn = "column_name";
            const kVisible = "is_visible";
            for ( var i = 0; i < rowcount; i++ )
            {
              var visible = resultset.GetRowCellByColumn( i, kVisible );
              if ( visible == "1" )
              {
                var obj = {};
                obj.name = resultset.GetRowCellByColumn( i, kName );
                obj.column = resultset.GetRowCellByColumn( i, kColumn );
                
                if ( obj.name && obj.name[ 0 ] == "&" )
                {
                  try
                  {
                    obj.name = stringbundle.GetStringFromName( obj.name.substr( 1, obj.name.length ) );
                  }
                  catch( err )
                  {
                  }
                }
                
                if ( ( obj.column != "row_id" ) && ( obj.column != "id" ) )
                {
                  this.metadata.push( obj );
                }
              }
            }
          }
          catch ( err )
          {
            alert( "fillMetadata - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="setConditions">
        <parameter name="array"/>
        <body>
          <![CDATA[
          try
          {
            // No animations until we finish
            if ( ( ! this.tracking ) && ( array.length > 0 ) )
            {
              var before = this.before;
              
              this.in_conditions = array;
              this.in_count = 0;
              
              // Make the growbox
              var growbox = document.createElement( "box" );
              growbox.setAttribute( "flex", "1" );
              growbox.setAttribute( "sbtype", "growbox" );
              this.parent.insertBefore( growbox, before );
              
              const USE_ANIMATION = true;
              
              if ( USE_ANIMATION )
              {              
                // Set our animation values
                this.tracking = true;
                this.distance = this.size * array.length;
                this.current = 0;
                this.anim_start = new Date().getTime();
                this.anim_time = 0.2 * array.length; // Math.sqrt( 0.2 * array.length ); // Tends towards 1 second.
                this.anim_complete = this.onGrowSizeComplete;
                this.anim_growsize = this.onGrowSize;
                document.__SB_CONDITIONS__ = this;
                
                // Start our animation loop
                this.interval = setInterval( this.animationCallback, 0 );
              }
              else
              {
                // Just slap the gullies in there.
                for ( var i = 0; i < array.length; i++ )
                {
                  this.onGrowSize( this );
                }
                this.parent.removeChild( growbox );
              }
            }
          }
          catch ( err )
          {
            alert( "setConditions - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="onGrowSize">
        <parameter name="that"/>
        <body>
          <![CDATA[
          try
          {
            // Find the grow box
            var grow_nodes = that.parent.getElementsByAttribute( 'sbtype', 'growbox' );
            if ( grow_nodes.length != 1 )
            {
              // ??? really bad?
            }
            var growbox = grow_nodes.item( 0 );
            
            // Insert a condition
            if ( growbox )
            {
              if ( this.in_count < this.in_conditions.length )
              {
                that.insertCondition( growbox, that.in_conditions[ that.in_count ]  );
                that.in_count++;
              }
            }
          }
          catch ( err )
          {
            alert( "onGrowSize - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="onGrowSizeComplete">
        <parameter name="that"/>
        <body>
          <![CDATA[
          try
          {
            // Find the grow box
            var grow_nodes = that.parent.getElementsByAttribute( 'sbtype', 'growbox' );
            if ( grow_nodes.length != 1 )
            {
              // ??? really bad?
            }
            var growbox = grow_nodes.item( 0 );
            if ( growbox )
            {
              // This crazy math says to do divided height + 1 
              var count = parseInt( ( growbox.boxObject.height + ( that.size - 1 ) ) / that.size );
              for ( var i = 0; i < count; i++ )
              {
                that.onGrowSize( that );
              }
              that.parent.removeChild( growbox );
            }
          }
          catch ( err )
          {
            alert( "onGrowSizeComplete - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="getConditions">
        <body>
          <![CDATA[
          var retval = new Array();
          try
          {
            for ( var nextElement = this.first.nextSibling; nextElement != this.before; nextElement = nextElement.nextSibling )
            {
              if ( ( nextElement.getAttribute ) && ( nextElement.getAttribute( "sbtype" ) == "condition_box" ) )
              {
                var condition = this.getCondition( nextElement );
                if ( condition )
                {
                  retval.push( condition );
                }
              }
            }
          }
          catch ( err )
          {
            alert( "getConditions - " + err );
          }
          return retval;
          ]]>
        </body>
      </method>

      <method name="getCondition">
        <parameter name="hbox"/>
        <body>
          <![CDATA[
          var retval = null;
          try
          {
            var metadata = null;
            var condition = null;
            var value = null;
            for ( var i = 0; i < hbox.childNodes.length; i++ )
            {
              var node = hbox.childNodes.item( i );
              var sbtype = node.getAttribute( "sbtype" );
              switch ( sbtype )
              {
                case "metadata":
                  metadata = node;
                  break;
                case "condition":
                  condition = node;
                  break;
                case "value":
                  value = node;
                  break;
              }
            }
            
            if ( metadata && condition && value && ( value.value.length > 0 ) )
            {
              var obj = {};
              obj.metadata = metadata.selectedItem.getAttribute( "column" );
              obj.condition = condition.selectedIndex;
              obj.condition_name = condition.selectedItem.label;
              obj.value = value.value;
              retval = obj;
            }
          }
          catch ( err )
          {
            alert( "getCondition - " + err );
          }
          return retval;
          ]]>
        </body>
      </method>

      <method name="onCommand">
        <parameter name="evt"/>
        <body>
          <![CDATA[
          try
          {
            if ( evt.target )
            { 
              var sbtype = evt.target.getAttribute( "sbtype" );
              switch ( sbtype )
              {
                case "plus":
                  this.animateNewCondition( evt.target.parentNode.nextSibling );
                  break;
                case "minus":
                  var condition_nodes = this.parent.getElementsByAttribute( 'sbtype', 'condition' );
                  if ( condition_nodes.length > 1 )
                  {
                    this.removeCondition( evt.target.parentNode );
                  }
                  break;
              }
            }
          }
          catch ( err )
          {
            alert( "onCommand - " + err );
          }
          ]]>
        </body>
      </method>

    </implementation>
 
  </binding>

</bindings>
