<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE bindings SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="conditions">

    <content>
      <xul:sb-multi-drawer sbid="drawer" header="false" flex="1" xbl:inherits="maxvisibleitems">
        <xul:hbox
          class="smart-condition-item-box"
          align="center"
          flex="1"
          oninput="document.getBindingParent(document.getBindingParent(this))._valueChanged(this);"
        >
          <xul:menulist sbid="metadatapopup" class="smart-condition-list" flex="1" value="artist" drawer-prop-map="value=metadata">
            <xul:menupopup class="smart-condition-popup">
            </xul:menupopup>
          </xul:menulist>
          <xul:menulist sbid="conditionpopup" class="smart-condition-list" flex="1" value="0" drawer-prop-map="value=condition,label=condition_name">
            <xul:menupopup class="smart-condition-popup">
            </xul:menupopup>
          </xul:menulist>
          <xul:textbox
            sbid="conditionvalue"
            class="smart-condition-value dialog_textbox"
            flex="1"
            drawer-prop-map="value=value"
            drawer-attr-map="invalid=invalid"
          />
          <xul:button label="-" class="smart_condition_minus" sbtype="remove-drawer-item"/>
          <xul:button label="+" class="smart_condition_plus" sbtype="add-drawer-item"/>
        </xul:hbox>
      </xul:sb-multi-drawer>
    </content>

    <handlers>
      <handler event="select" action="onSelect(event);"/>
    </handlers>

    <implementation>

      <constructor>
<![CDATA[
  this._pm = this._Cc["@songbirdnest.com/Songbird/Properties/PropertyManager;1"]
                     .getService(this._Ci.sbIPropertyManager);

  // Scan the metadata and fill the metadata popup with appropriate items
  this.fillMetadata();
]]>
      </constructor>
      <destructor>
      </destructor>

      <field name="drawer">document.getAnonymousElementByAttribute(this, "sbid", "drawer");</field>
      <field name="_pm">null</field>
      <field name="_Cc" readonly="true">Components.classes</field>
      <field name="_Ci" readonly="true">Components.interfaces</field>
      <field name="_Cr" readonly="true">Components.results</field>

      <property name="conditions">
        <getter>
          return this.drawer.getState();
        </getter>
        <setter>
          this.drawer.setState(val);
        </setter>
      </property>
      <property name="isValid">
        <getter>
<![CDATA[
  var valid = true;
  this.conditions.forEach(function(condition) {
    if (condition.invalid == "true")
      valid = false;
  });
  return valid;
]]>
        </getter>
      </property>

      <method name="newCondition">
        <body>
          this.drawer.addItem();
        </body>
      </method>
      
      <method name="generateMenuPopup">
        <parameter name="aParent"/>
        <parameter name="aMenuitemArray"/>
        <body>
          <![CDATA[
            // Clear the current set of menuitems
            aParent.removeAllItems();
          
            // And generate a new set of menuitem children
            for ( var index = 0; index < aMenuitemArray.length; index++ ) {
              var obj = aMenuitemArray[ index ];
              var name;
              
              // We accept either {name, value} array or string array
              if ( obj.name ) {
                name = obj.name;
              } else {
                name = "" + obj;
                obj = {};
              }
              
              // Cook out the translated value if requested
              if ( name[0] == "&" ) {
                name = SBString( name.substr( 1, name.length ), name );
              }
              
              // And append the menutitem to the list (and make it pretty)
              aParent.appendItem( name, ( obj.value ) ? obj.value : index ).setAttribute( "class", "smart-condition-item" );              
            }
            
            // Select the first item in the list?
            aParent.value = 0;
          ]]>
        </body>
      </method>
      
      <method name="fillMetadata">
        <body>
<![CDATA[
  var metadata = [];

  var names = this._pm.propertyNames;
  while (names.hasMore()) {
    var info = this._pm.getPropertyInfo(names.getNext());
    metadata.push({ name: info.displayName, value: info.name });
  }

  var popup = document.getAnonymousElementByAttribute(this,
                                                      "sbid",
                                                      "metadatapopup");
  this.generateMenuPopup(popup, metadata);
]]>
        </body>
      </method>

      <method name="onSelect">
        <parameter name="event"/>
        <body>
<![CDATA[
  if (event.originalTarget.getAttribute("sbid") == "metadatapopup") {
    var metadatapopup = event.originalTarget;
    var conditionspopup = metadatapopup.nextSibling;

    var info = this._pm.getPropertyInfo(metadatapopup.value);
    var ops = info.operators;
    var list = [];
    while (ops.hasMoreElements()) {
      var op = ops.getNext().QueryInterface(this._Ci.sbIPropertyOperator);
      list.push({ name: op.operatorReadable, value: op.operator });
    }
    this.generateMenuPopup(conditionspopup, list);

    this._valueChanged(metadatapopup.parentNode);
  }
]]>
        </body>
      </method>

      <method name="_valueChanged">
        <parameter name="condition"/>
        <body>
<![CDATA[
  var property;
  var value;
  var nodes = condition.childNodes;

  // Search the child nodes for the property dropdown and value text box
  for (var i = 0; i < nodes.length; i++) {
    var node = nodes[i];
    if (node.nodeType == Node.ELEMENT_NODE) {
      if (node.getAttribute("sbid") == "metadatapopup")
        property = node;
      if (node.getAttribute("sbid") == "conditionvalue")
        value = node;
    }
  }

  var info = this._pm.getPropertyInfo(property.value);
  if (info.validate(value.value)) {
    value.setAttribute("invalid", "false");
  }
  else {
    value.setAttribute("invalid", "true");
  }
]]>
        </body>
      </method>

      </implementation>

  </binding>

</bindings>

