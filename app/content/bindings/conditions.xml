<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE bindings SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="conditions">

    <content>
      <xul:sb-multi-drawer sbid="drawer" header="false" flex="1" xbl:inherits="maxvisibleitems">
        <xul:hbox class="smart-condition-item-box" align="center" flex="1">
          <xul:menulist sbid="metadatapopup" class="smart-condition-list" flex="1" value="artist" drawer-prop-map="value=metadata">
            <xul:menupopup class="smart-condition-popup">
            </xul:menupopup>
          </xul:menulist>
          <xul:menulist sbid="conditionpopup" class="smart-condition-list" flex="1" value="0" drawer-prop-map="value=condition,label=condition_name">
            <xul:menupopup class="smart-condition-popup">
            </xul:menupopup>
          </xul:menulist>
          <xul:textbox class="smart-condition-value dialog_textbox" flex="1" drawer-prop-map="value=value"/>
          <xul:button label="-" class="smart_condition_minus sb_faceplate backless_button" sbtype="remove-drawer-item"/>
          <xul:button label="+" class="smart_condition_plus sb_faceplate backless_button" sbtype="add-drawer-item"/>
        </xul:hbox>
      </xul:sb-multi-drawer>
    </content>
    
    <handlers>
      <handler event="select" action="onSelect(event);"/>
    </handlers>

    <implementation>

      <constructor>
      <![CDATA[
      try {
        // Scan the metadata and fill the metadata popup with appropriate items
        this.fillMetadata();
        // This should pop the select event and cause us to fill the conditions popup
      }
      catch ( err ) {
        alert( "conditions constructor - " + err );
      }
      ]]>
      </constructor>
      <destructor>
      </destructor>

      <field name="drawer">document.getAnonymousElementByAttribute(this, 'sbid', 'drawer');</field>
      <field name="conditionsText">
      <![CDATA[
      new Array(
        "&smart.text.contains",
        "&smart.text.not_contain",
        "&smart.text.is",
        "&smart.text.is_not",
        "&smart.text.starts",
        "&smart.text.ends"
      );
      ]]>
      </field>
      <field name="conditionsInt">
      <![CDATA[
      new Array(
        "&smart.int.equal",
        "&smart.int.less",
        "&smart.int.greater"
      );
      ]]>
      </field>
      <field name="conditionsDate">
      <![CDATA[
      new Array(
        "&smart.date.on",
        "&smart.date.before",
        "&smart.date.after"
      );
      ]]>
      </field>

      <property name="conditions">
        <getter>
          return this.drawer.getState();
        </getter>
        <setter>
          this.drawer.setState(val);
        </setter>
      </property>

      <method name="newCondition">
        <body>
          this.drawer.addItem();
        </body>
      </method>
      
      <method name="generateMenuPopup">
        <parameter name="aParent"/>
        <parameter name="aMenuitemArray"/>
        <body>
          <![CDATA[
            // Clear the current set of menuitems
            aParent.removeAllItems();
          
            // And generate a new set of menuitem children
            for ( var index = 0; index < aMenuitemArray.length; index++ ) {
              var obj = aMenuitemArray[ index ];
              var name;
              
              // We accept either {name, value} array or string array
              if ( obj.name ) {
                name = obj.name;
              } else {
                name = "" + obj;
                obj = {};
              }
              
              // Cook out the translated value if requested
              if ( name[0] == "&" ) {
                name = SBString( name.substr( 1, name.length ), name );
              }
              
              // And append the menutitem to the list (and make it pretty)
              aParent.appendItem( name, ( obj.value ) ? obj.value : index ).setAttribute( "class", "smart-condition-item" );              
            }
            
            // Select the first item in the list?
            aParent.value = 0;
          ]]>
        </body>
      </method>
      
      <method name="fillMetadata">
        <body>
          <![CDATA[
            // Erase?
            var metadata = new Array();

            // Figure out what metadata properties are available for creating a smart playlist
            var metadataDBQuery =
                Components.classes["@songbirdnest.com/Songbird/DatabaseQuery;1"]
                .createInstance( Components.interfaces.sbIDatabaseQuery );
            var mediaLibrary =
                Components.classes["@songbirdnest.com/Songbird/MediaLibrary;1"]
                .createInstance( Components.interfaces.sbIMediaLibrary );
            metadataDBQuery.setAsyncQuery( false );
            metadataDBQuery.setDatabaseGUID( "songbird" );
            mediaLibrary.setQueryObject( metadataDBQuery );
            mediaLibrary.getColumnInfo();

            // And, here, hopefully we have some column info.
            var resultset = metadataDBQuery.getResultObject();
            var rowcount = resultset.getRowCount();
            const kName = "readable_name";
            const kColumn = "column_name";
            const kVisible = "is_visible";
            for ( var index = 0; index < rowcount; index++ ) {
              var visible = resultset.getRowCellByColumn( index, kVisible );
              if ( visible == "1" ) {
                var obj = {};
                obj.name = resultset.getRowCellByColumn( index, kName );
                obj.value = resultset.getRowCellByColumn( index, kColumn );
                
                if ( ( obj.value != "row_id" ) && ( obj.value != "id" ) ) {
                  metadata.push( obj );
                }
              }
            }
            var popup = document.getAnonymousElementByAttribute(this, 'sbid', 'metadatapopup');
            this.generateMenuPopup( popup, metadata );
          ]]>
        </body>
      </method>

      <method name="onSelect">
        <parameter name="event"/>
        <body>
        <![CDATA[
          if ( event.originalTarget.getAttribute( "sbid" ) == "metadatapopup" )
          {
            var metadatapopup = event.originalTarget;
            var conditionspopup = metadatapopup.nextSibling;
            var metadata = metadatapopup.value;
            
            var conditionsArray = this.conditionsText;
            switch( metadata )
            {
              case "length":
              case "disc_no":
              case "disc_total":
              case "track_no":
              case "track_total":
              case "rating":
                conditionsArray = this.conditionsInt;
                break;
              case "year":
                conditionsArray = this.conditionsDate;
                break;
            }
            this.generateMenuPopup( conditionspopup, conditionsArray );
          }
        ]]>
        </body>
      </method>
        
    </implementation>
 
  </binding>

</bindings>

