<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="servicetree">
    <content>

      <!-- SERVICE PANE -->
      <xul:tree style="min-width:60px;"
        id="frame_service_tree" 
        xxx_flags="dont-build-content"
        seltype="single"
        hidecolumnpicker="true"
        flex="1"
        
        onselect="onServiceTreeSelect( event );"
        onclick="onServiceTreeClick( event );"
        oncontextmenu="onServiceTreeContext( event );" 
                  
        datasources="rdf:Servicesource"
        ref="NC:Servicesource"

        ondragenter="onServiceTreeDragEnter(event);"
        ondragover="onServiceTreeDragOver(event);"
        ondragexit="onServiceTreeDragExit(event);"
        ondragdrop="onServiceTreeDragDrop(event);"
      >
        <xul:treecols>
          <xul:treecol 
            id="frame_service_tree_label" 
            primary="true" 
            flex="1"
            sortDirection="natural"
            sortActive="true"
            hideheader="true"
            open="true"
          />
          <xul:treecol 
            id="url" 
            label="" 
            primary="true" 
            flex="1"
            hidden="true"
            ignoreincolumnpicker="true"
            hideheader="true"
          />
        </xul:treecols>

        <xul:template>

          <xul:rule>
            <xul:treechildren flex="1">
            <xul:treeitem open="true" uri="rdf:*"
              x_open="rdf:http://home.netscape.com/NC-rdf#Open" 
              properties="rdf:http://home.netscape.com/NC-rdf#Properties"
              url="rdf:http://home.netscape.com/NC-rdf#URL"
            >
              <xul:treerow>
                <xul:treecell 
                  label="rdf:http://home.netscape.com/NC-rdf#Label"
                  src="rdf:http://home.netscape.com/NC-rdf#Icon"
                  properties="rdf:http://home.netscape.com/NC-rdf#Properties"
                />
                <xul:treecell 
                  label="rdf:http://home.netscape.com/NC-rdf#URL"
                />
              </xul:treerow>
            </xul:treeitem>
            </xul:treechildren>
          </xul:rule>

        </xul:template>
      </xul:tree>

      <xul:popupset>
        <!-- PLAYLIST POPUP FOR THE SERVICE PANE PLAYLISTS -->
        <xul:popup id="service_popup_playlist" class="sb_faceplate" oncommand="onServiceTreeDefaultCommand( event );">
          <xul:menuitem id="playlist_context_remove" label="&playlist.context.remove;"/>
          <xul:menuitem id="playlist_context_rename" label="&playlist.context.rename;"/>
        </xul:popup>
        <xul:popup id="service_popup_smart" class="sb_faceplate" oncommand="onServiceTreeDefaultCommand( event );">
          <xul:menuitem id="playlist_context_smartedit" label="&menu.edit;"/>
          <xul:menuitem id="playlist_context_remove" label="&playlist.context.remove;"/>
          <xul:menuitem id="playlist_context_rename" label="&playlist.context.rename;"/>
        </xul:popup>
        <xul:popup id="service_popup_none" class="sb_faceplate" oncommand="onServiceTreeDefaultCommand( event );">
          <xul:menuitem id="service_popup_new" label="&menu.file.new;"/>
          <xul:menuitem id="service_popup_new_smart" label="&menu.file.smart;"/>
          <xul:menuitem id="service_popup_new_remote" label="&menu.file.remote;"/>
        </xul:popup>
        <xul:popup id="service_popup_commands" sid="service_popup_commands" oncommand="onServiceTreeCommand( event );">
          <xul:menuitem id="dummy" label="----------------------"/>
        </xul:popup>
      </xul:popupset>

    </content>

  <implementation type="application/x-javascript" implements="nsIXULBuilderListener" name="service_tree_binding">

    <field name="tree">document.getAnonymousElementByAttribute(this, 'id', 'frame_service_tree');</field>
    <field name="current_url">null</field>
    <field name="browser">null</field>
    <field name="urlFromServicePane">false</field>
    <field name="ignoreOnSelect">false</field>
    <field name="onPlaylistHide">null</field>
    <field name="onPlaylistDefaultCommand">null</field>

    <!-- CONSTRUCTOR/DESTRUCTOR -->
    
    <constructor>
      
      <![CDATA[
        try {
          this.strid = this.tree.parentNode.id;
          this.currentSelection = "";
          this.popup_playlist = document.getAnonymousElementByAttribute(this, "id", "service_popup_playlist");
          this.popup_smartplaylist = document.getAnonymousElementByAttribute(this, "id", "service_popup_smart");
          this.popup_default = null;
          this.popup_none = document.getAnonymousElementByAttribute(this, "id", "service_popup_none");
          this.popup_commands = document.getAnonymousElementByAttribute(this, "sid", "service_popup_commands");

          // Load the javascript we want to use
          var jsLoader = Components.classes["@mozilla.org/moz/jssubscript-loader;1"].getService(Components.interfaces.mozIJSSubScriptLoader);
          jsLoader.loadSubScript("chrome://global/content/nsDragAndDrop.js", this);
          jsLoader.loadSubScript("chrome://global/content/nsTransferable.js", this);
          jsLoader.loadSubScript("chrome://songbird/content/scripts/dragAndDrop.js", this);
          this.tree.builder.addListener( this );

          // Load up the string bundle
          var src = "chrome://songbird/locale/songbird.properties";
          var stringBundleService =
              Components.classes["@mozilla.org/intl/stringbundle;1"]
              .getService(Components.interfaces.nsIStringBundleService);
          this.stringbundle = stringBundleService.createBundle( src );

        }
        catch (err) {
          alert( "servicetree.xml - constructor - " + err );
        }
      ]]>
    </constructor>
    
    <destructor>
      <![CDATA[
        try {
          this.tree.builder.removeListener(this);
        }
        catch (err) {
          alert( "servicetree.xml - destructor - " + err );
        }
      ]]>
    </destructor>

    <field name="menuitems">new Array();</field>
    <field name="stringbundle">null</field>
    
    <!-- Init -->
    
    <method name="init">
      <parameter name="aBrowserObject"/>
      <body>
      <![CDATA[
        try {
          var lastSelectedURI = SBDataGetStringValue("servicetree.selected_url");
          
          this.browser = aBrowserObject;
          this.restoreCollapsedStates();

          if (lastSelectedURI)
            this.launchServiceURL(lastSelectedURI);
          else
            this.launchServiceURL("http://www.songbirdnest.com/birdhouse/");

          // needed so willRebuild doesn't clobber collapsed state.
          this.doneInit = true;
        }
        catch (err) {
          alert( "servicetree.xml - init - " + err );
        }
      ]]>
      </body>
    </method>

    <!-- launch URL in browser object (this.browser) -->
    
    <method name="launchURL">
      <parameter name="aURL"/>
      <body>
        <![CDATA[
          var rv = 0;
          try {
            // And if it's a good string, launch it.
            if ((aURL) &&
                (aURL.indexOf) &&
                (aURL.length > 0) &&
                (this.current_url != aURL)) {

              // No more for loop.
              CancelAsyncWebDocument();

              // see songbird_hack.js for onPlaylistHide()
              if (this.onPlaylistHide)
                this.onPlaylistHide();

              var mainPane = this.browser;
              if (mainPane) {
                this.current_url = aURL;
                SBDataSetStringValue( "servicetree.selected_url", aURL );
                try {
                  mainPane.stop();
                  mainPane.loadURI( this.current_url, null, null );
                  rv = 1;
                }
                catch (err) {
                  if ( aURL != "chrome://songbird/content/html/cannot_load.html" )
                    this.launchURL( "chrome://songbird/content/html/cannot_load.html" );
                }
              }
            }
          }
          catch (err) {
            alert( "servicetree.xml - launchURL " + err );
          }
          return rv;
        ]]>
      </body>
    </method>

    <!-- launch an url that also exists in the service tree. So that calls
           from the commands that load the web playlist and download playlist
           highlight in the service tree.
      -->

    <method name="launchServiceURL">
      <parameter name="aURL"/>
      <body>
        <![CDATA[
          try {
            // get the tree, "hidden" columns object, row count
            var serviceTree = this.tree;
            var urlColumn = serviceTree.columns ?
                            serviceTree.columns["url"] : "url";
            var rowCount = serviceTree.view.rowCount; 

            var index = 0;
            for ( ; index < rowCount; index++ ) {
              if ( serviceTree.view.getCellText(index, urlColumn) == aURL )
                break; 
            }

            // if we matched something in the serviceTree
            if (index != rowCount) {
              // set the selection and save the state
              serviceTree.view.selection.currentIndex = index;
              serviceTree.view.selection.select(index);
              serviceTree.currentIndex = index;
            }

            // launch the URL regardless.
            return this.launchURL(aURL);
          }
          catch (err) {
            alert( "servicetree.xml - launchServiceURL " + err );
            return null;
          }
        ]]>
      </body>
    </method>
    
    <!-- When an item is selected, switch to the corresponding page -->

    <method name="onServiceTreeSelect">
      <parameter name="evt"/>
      <body>
        <![CDATA[
          try {
            if (this.ignoreOnSelect) return; // Don't do this.
            var theServiceTree = this.tree;
            
            // multiple selection on service tree only happens during
            //   the highlighting of an item in drag over, don't switch
            //   to the service
            if (theServiceTree.getAttribute("seltype") == "multiple") 
              return;
              
            // HACK: If a new playlist was just created, 
            // then ignore this select.
            if (theServiceTree.newPlaylistCreated) return;
          
            if ( theServiceTree.currentIndex >= 0 ) {
           
              // Find the column. 
              var urlcolumn = theServiceTree.columns ?
                              theServiceTree.columns["url"] : "url";
              
              // Get the text of the hidden tree cell, this contains the url.
              var tree_url = theServiceTree.view
                                 .getCellText( theServiceTree.currentIndex,
                                               urlcolumn );
              
              if ( tree_url.length > 0 ) {
                this.urlFromServicePane = true;
                //var rv = this.launchURL( tree_url );
                var rv = this.launchServiceURL( tree_url );
                if (rv) {
                  // need a better test than this ! (goal is to discard
                  //    bookmarks since they are embargoed metrics)
                  // if user has opted out, this doesn't do anything
                  if (tree_url.slice(0, 9) == "chrome://") 
                    metrics_inc( "servicetree", this.strid, tree_url );
                }
              }
            }
          }
          catch (err)
          {
            alert( "servicetree.xml - onServiceTreeSelect - " + err);
          }
        ]]>
      </body>
    </method>
    
    <!-- After the tree was clicked, save collapsed states in case they changed -->

    <method name="onServiceTreeClick">
      <parameter name="theEvent"/>
      <body>
        this.saveCollapsedStates();
      </body>
    </method>
    
    <!-- Save/Restore collapsed/open states -->
    
    <method name="saveCollapsedStates">
      <body>
        <![CDATA[
          try {
            var tree = this.tree;
            var col = tree.columns ? tree.columns["frame_service_tree_label"] :
                                     "frame_service_tree_label";
            var rowCount = tree.view.rowCount;
            for ( var index = 0; index < rowCount; index++ ) {
              if (tree.view.isContainer(index)) {
                var item_url = tree.view.getCellText( index, col );
                SBDataSetBoolValue( "servicetree_opened_" + this.strid + "_" + item_url,
                                    tree.view.isContainerOpen(index) );
              }
            }
          }
          catch (err) {
            alert('servicetree.xml - saveCollapsedStates - ' + err);
          }
        ]]>
      </body>
    </method>

    <method name="restoreCollapsedStates">
      <body>
        <![CDATA[
          try {
            var tree = this.tree;
            var col = tree.columns ? tree.columns["frame_service_tree_label"] :
                                     "frame_service_tree_label";

            // Go bottom up because the rowCount changes as we close folders
            var index = tree.view.rowCount;
            for ( index-- ; index >= 0 ; index-- ) {
              if (tree.view.isContainer(index)) {
                var itemUrl = tree.view.getCellText(index, col);
                if (tree.view.isContainerOpen(index) 
                      != SBDataGetBoolValue( "servicetree_opened_" + this.strid + "_" + itemUrl )) {
                  tree.view.toggleOpenState(index);
                }
              }
            }
          }
          catch (err) {
            alert('servicetree.xml - restoreCollapsedStates - ' + err);
          }
        ]]>
      </body>
    </method>
    
    <!-- Save/Restore Selection -->
    
    <method name="saveSelection">
      <body>
        <![CDATA[
          try {
            var tree = this.tree;
            if ( tree && ( tree.currentIndex != -1 ) ) {
              var column_label = tree.columns ?
                                 tree.columns["frame_service_tree_label"] :
                                 "frame_service_tree_label";
              var column_url   = tree.columns ?
                                 tree.columns["url"] :
                                 "url";
              var label = tree.view.getCellText( tree.currentIndex, column_label );
              var url = tree.view.getCellText( tree.currentIndex, column_url );
              if (url && url != "") this.currentSelection = "url=" + url;
              else this.currentSelection = "label=" + label;
            }
          }
          catch (err)  {
            alert( "servicetree.xml - saveSelection - " + err );
          }
        ]]>
      </body>
    </method>
    
    <method name="restoreSelection">
      <body>
        <![CDATA[
          try {
            var tree = this.tree;
            // Restore selection
            if ( tree &&
                 (tree.currentIndex == -1) &&
                 (this.currentSelection.length > 0)) {
              var column;
              var sel_value;
              var eqpos = this.currentSelection.indexOf('=');
              var key = this.currentSelection.slice(0, eqpos);
              sel_value = this.currentSelection.slice(eqpos+1); 
              switch (key) {
                case "url":
                  column = tree.columns ? tree.columns["url"] : "url";
                  break;
                case "label":
                  column = tree.columns ? tree.columns["frame_service_tree_label"] : "frame_service_tree_label";
                  break;
                default:
                  break;
              }
              if (column) {
                var rowCount = tree.view.rowCount;
                for ( var index = 0; index < rowCount; index++ ) {
                  if (sel_value == tree.view.getCellText(index, column)) {
                    tree.view.selection.currentIndex = index;
                    tree.view.selection.select(index);
                    tree.currentIndex = index;
                    this.currentSelection = "";
                    break;
                  }
                }
              }
            }
            this.currentSelection = "";
          }
          catch (err) {
            alert( "servicetree.xml - restoreSelection - " + err );
          }
        ]]>
      </body>
    </method>
    
    <!-- Context menu -->
    
    <method name="onServiceTreeContext">
      <parameter name="theEvent"/>
      <body>
        <![CDATA[
          try {
            // First, get the row clicked.
            var obj = {}; 
            var row = {};
            var col = {};
            this.tree.treeBoxObject.getCellAt( theEvent.clientX, theEvent.clientY, row, col, obj );

            row = row.value;    
            
            if ( row >= 0 ) {
              // Find the selected element
              var element = this.tree.contentView.getItemAtIndex( row );
              var properties = element.getAttribute( "properties" ).split(" ");
              if ( properties.length > 0 ) {
                // The first property is the type.  Later strings are specific to the type.
                switch ( properties[ 0 ] ) {
                  case "playlist":
                    this.onServiceTreeContextPlaylist( theEvent, properties );
                    break;
                  default:
                    this.onServiceTreeContextDefault( theEvent, properties );
                    break;
                }
              }
            }
            else {
              this.onServiceTreeContextNone( theEvent );
            }
          }
          catch (err) {
            alert( "servicetree.xml - onServiceTreeContext - " + err);
          }
        ]]>
      </body>
    </method>

    <method name="onServiceTreeContextPlaylist">
      <parameter name="theEvent"/>
      <parameter name="properties"/>
      <body>
        <![CDATA[
          try {
            if ( properties.length >= 5 ) {
              var table = properties[ 1 ];
              var guid = properties[ 2 ];
              var type = properties[ 3 ];
              var base_type = properties[ 4 ];
              
              // From these 4 pieces of data, we're going to have to do
              //   some idiotically complex stuff. Eventually, we'll
              //   register a sbIPlaylistCommands with the Servicesource
              
              // For now, make a set of short-circuits to protect
              //   our special playlists
              //if ( table == WEB_PLAYLIST_TABLE && guid == WEB_PLAYLIST_CONTEXT )
              //  return;
              
              if ( type == "transfer" && base_type == "simple" )
                return;

              // No context menu for the download service
              if ( guid == "downloadDB" )
                return;
                
              var theServiceTreePlaylistPopup = this.popup_playlist;
              if ( base_type == "smart" )
                theServiceTreePlaylistPopup = this.popup_smartplaylist;

              if ( base_type == "dynamic" )
                theServiceTreePlaylistPopup = this.popup_smartplaylist;

              var servicesource = new sbIServicesource();
              if (servicesource) {
                var popup = servicesource.getPlaylistCommands(guid, table, type);
                if (popup) {
                  this.refreshCommands(popup);
                  theServiceTreePlaylistPopup = this.popup_commands;
                }
              }

              theServiceTreePlaylistPopup.setAttribute( "sb_table", table );
              theServiceTreePlaylistPopup.setAttribute( "sb_guid", guid );
              theServiceTreePlaylistPopup.setAttribute( "sb_type", type );
              theServiceTreePlaylistPopup.setAttribute( "sb_base_type", base_type );
              if ( theServiceTreePlaylistPopup ) {
                theServiceTreePlaylistPopup.showPopup( document.documentElement, theEvent.screenX + 5, theEvent.screenY, "context", null, null, null );
              }
            }
          }
          catch (err) {
            alert( "servicetree.xml - onServiceTreeContextPlaylist - " + err);
          }
        ]]>
      </body>
    </method>

    <method name="onServiceTreeContextDefault">
      <parameter name="theEvent"/>
      <parameter name="properties"/>
      <body>
        <![CDATA[
          try {
            dump("XXX - Not implemented: onServiceTreeContextDefault\n");
          }
          catch (err) {
            alert( "servicetree.xml - onServiceTreeContextDefault - " + err);
          }
        ]]>
      </body>
    </method>

    <method name="onServiceTreeContextNone">
      <parameter name="theEvent"/>
      <parameter name="properties"/>
      <body>
        <![CDATA[
          try {
            var theServiceTreePlaylistPopup = this.popup_none;
            if (theServiceTreePlaylistPopup) {
              theServiceTreePlaylistPopup.showPopup( document.documentElement, theEvent.screenX + 5, theEvent.screenY, "context", null, null, null );
            }
          }
          catch (err) {
            alert( "servicetree.xml - onServiceTreeContextNone - " + err);
          }
        ]]>
      </body>
    </method>


    <!-- nsIXULBuilderListener implementation -->

    <method name="willRebuild">
      <parameter name="builder"/>
      <body>
        try {
          if (this.doneInit) {
            this.saveSelection();
            this.saveCollapsedStates();
          }
        }
        catch (err) {
          alert( "servicetree.xml - willRebuild - " + err );
        }
      </body>
    </method>

    <method name="didRebuild">
      <parameter name="builder"/>
      <body>
        try {
          this.ignoreOnSelect = true;
          this.restoreSelection();
          this.restoreCollapsedStates();
          this.ignoreOnSelect = false;
        }
        catch (err) {
          alert( "servicetree.xml - didRebuild - " + err );
        }
      </body>
    </method>
    
    <method name="refreshCommands">
      <parameter name="commands"/>
      <body>
       <![CDATA[

        this.menuitems.length = 0; // clear the array??
        this.commands = commands;
        var popup = this.popup_commands;
        // stooopid
        while (popup.firstChild && popup.firstChild.nextSibling) popup.removeChild(popup.firstChild.nextSibling);
        if ( this.commands )
        {
          // Once we get here, tell the commands who we are.
          this.commands.setPlaylist( this );
          
          // And make all the new stuff
          var num = this.commands.getNumCommands();
          for ( var i = 0; i < num; i++ )
          {
            var menuitem;

            // What id?
            var obj_id = this.commands.getCommandId( i );
            
            var menuitem_type = "menuitem";
            
            if ( obj_id == "*separator*" )
            {
              menuitem_type = "menuseparator";
            }
          
            // Create a menuitem
            menuitem = document.createElement( menuitem_type );
            menuitem.setAttribute( "id", obj_id );
            menuitem.setAttribute( "sbtype", "command" );
            menuitem.setAttribute( "class", "menuitem-iconic" ); // Icons are set in the css using the id
            
            // No label unless you have a label
            var cmd_text = this.commands.getCommandText( i );
            if ( cmd_text.length > 0 )
            {
              if ( cmd_text[ 0 ] == "&" )
              {
                try
                {
                  cmd_text = this.stringbundle.GetStringFromName( cmd_text.substr( 1, cmd_text.length ) );
                }
                catch( err )
                {
                  dump("error playlist.xml refreshCommands() - getStringFromName: " + err + "\n");
                }
              }
              menuitem.setAttribute( "label", cmd_text );
            }

            if ( this.commands.getCommandEnabled( i ) )
            {
              menuitem.setAttribute( "disabled", "false" );
            }
            else
            {
              menuitem.setAttribute( "disabled", "true" );
            }
            
            // Add them to the parents
            this.menuitems.push( menuitem );
            popup.appendChild( menuitem );
          }
        }
       ]]>
      </body>
    </method>

    <method name="onServiceTreeDefaultCommand">
      <parameter name="evt"/>
      <body>
        // see songbird_hack.js for onPlaylistDefaultCommand()
        if (this.onPlaylistDefaultCommand)
          this.onPlaylistDefaultCommand(evt);
      </body>
    </method>

    <method name="onServiceTreeCommand">
      <parameter name="evt"/>
      <body>
       <![CDATA[
          try
          {
            if ( ! evt.target )
            {
              return;
            }
            if ( evt.target.getAttribute( "sbtype" ) == "command" )
            {
              if ( this.commands ) // I hope so!
              {
                this.commands.onCommand( evt );
              }
            }
          }
          catch( err )
          {
            dump( "servicetree.xml - onServiceTreeCommand - " + err + "\n");
          }
          evt.stopPropagation();
          evt.preventDefault();
       ]]>
      </body>
    </method>

   </implementation>
 
  </binding>

</bindings>


<!--

/*

// Don't do this.  Causes bigger bugs than it solves.

onblur="onServiceTreeBlur( event );"
onfocus="onServiceTreeFocus( event );"

function onServiceTreeBlur( theEvent )
{
  try {
    var theServiceTree = document.getElementById( "frame_service_tree" );
    SBServiceTreeListener.willRebuild();
    theServiceTree.view.selection.currentIndex = -1;
    theServiceTree.view.selection.select( -1 );
  }
  catch (err) {
    alert( "onServiceTreeBlur\n\n" + err );
  }
}
function onServiceTreeFocus( theEvent )
{
  SBServiceTreeListener.didRebuild();
}
*/

-->
