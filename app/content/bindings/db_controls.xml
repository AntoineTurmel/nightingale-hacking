<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">


  
  
  <!-- DB CONTROLS -->

  
  
  
  <binding id="base">

  <implementation>

    <constructor>
      <![CDATA[
        if (this.checkbox) {
          var oncommand = { 
            _that: null, 
            handleEvent: function( event ) { this._that.onToggleMultiEdition(); } 
          } oncommand._that = this; 
          this.checkbox.addEventListener("command", oncommand, true);
        }
      ]]>
    </constructor>
    <destructor>
    </destructor>
    
    <field name="ml">null</field>
    <field name="query">null</field>
    <field name="guids">null</field>
    <field name="ismultiedit">false</field>
    <field name="multieditdisabled">false</field>
    <field name="dirtyobject">null</field>
    <field name="originalvalue">""</field>

    <property name="readonly">
      <getter>
        return this.getAttribute("readonly");
      </getter>
      <setter>
        this.setAttribute("readonly", val);
        return val;
      </setter>
    </property>

    <property name="column">
      <getter>
        return this.getAttribute("column");
      </getter>
      <setter>
        this.setAttribute("column", val);
        this.undo();
        return val;
      </setter>
    </property>
    
    <method name="onToggleMultiEdition">
      <body>
        <![CDATA[
          if (this.checkbox && !this.isSingleEdition())
          {
            if (this.checkbox.getAttribute("checked")) {
              this.enableMultiEdition();
            } else {
             this.disableMultiEdition();
             var value = this.getValueFromDatabase(false);
             this.originalvalue = value;
             this.setValueToControl(value);
            }
          }
        ]]>
      </body>
    </method>

    <method name="setSingleEdition">
      <body>
        <![CDATA[
          this.ismultiedit = false;
          try {
            if (this.checkbox) this.checkbox.setAttribute("hidden", "true");
            if (this.spacer) this.spacer.setAttribute("hidden", "true");
            if (this.editcontrol) this.editcontrol.removeAttribute("disabled");
            this.onSetSingleEdition();
          } catch (e) {}
        ]]>
      </body>
    </method>

    <method name="isSingleEdition">
      <body>
        <![CDATA[
          return !this.ismultiedit;
        ]]>
      </body>
    </method>

    <method name="setMultiEdition">
      <body>
        <![CDATA[
          this.ismultiedit = true;
          try {
            if (this.checkbox) this.checkbox.setAttribute("hidden", "false");
            if (this.spacer) this.spacer.setAttribute("hidden", "false");
            this.onSetMultiEdition();
          } catch (e) {}
        ]]>
      </body>
    </method>

    <method name="enableMultiEdition">
      <body>
        <![CDATA[
          this.multieditdisabled = false;
          try {
            if (this.checkbox) this.checkbox.setAttribute("checked", "true");
            if (this.editcontrol) this.editcontrol.removeAttribute("disabled");
            this.onEnableMultiEdition();
          } catch (e) {}
        ]]>
      </body>
    </method>

    <method name="disableMultiEdition">
      <body>
        <![CDATA[
          this.multieditdisabled = true;
          try {
            if (this.checkbox) this.checkbox.setAttribute("checked", "false");
            if (this.editcontrol) this.editcontrol.setAttribute("disabled", "true");
            this.onDisableMultiEdition();
          } catch (e) {}
        ]]>
      </body>
    </method>

    <method name="isMultiEditionEnabled">
      <body>
        <![CDATA[
          return !this.multieditdisabled;
        ]]>
      </body>
    </method>

    <method name="getValueFromDatabase">
      <parameter name="setmultistate"/>
      <body>
        <![CDATA[
          this.initMl();
          var value;
          if (setmultistate)
          {
            if (this.guids.length == 1) 
            {
              this.setSingleEdition(); 
            }
            else 
            {
              this.setMultiEdition();
              this.enableMultiEdition();
            }
          }
          for (var i=0;i<this.guids.length;i++)
          {
            var thisval = this.ml.getValueByGUID(this.guids[i], this.column);
            if (i==0) 
            {
              value = thisval;
            }
            else 
            {
              if (thisval != value)
              {
                if (setmultistate) this.disableMultiEdition();
                value = ""; // could return the first found too
                break;
              }
            }
          }
          return value;
        ]]>
      </body>
    </method>
    
    <method name="setValueToDatabase">
      <parameter name="value"/>
      <body>
        <![CDATA[
          var ro = this.getAttribute("readonly");
          if (ro == "1" || ro == "true") return;
          this.initMl();
          if (this.isSingleEdition() || this.isMultiEditionEnabled())
          {
            for (var i=0;i<this.guids.length;i++)
            {
              this.ml.setValueByGUID(this.guids[i], this.column, value, true);
            }
            this.query.execute();
          }
        ]]>
      </body>
    </method>
    
    <method name="apply">
      <body>
        <![CDATA[
          var ro = this.getAttribute("readonly");
          if (ro == "1" || ro == "true") return;
          this.setValueToDatabase(this.getValueFromControl());
        ]]>
      </body>
    </method>
    
    <method name="undo">
      <body>
        var value = this.getValueFromDatabase(true);
        this.originalvalue = value;
        this.setValueToControl(value);
      </body>
    </method>

    <method name="initMl">
      <body>
        <![CDATA[
        if (!this.ml) 
        {
          this.ml = Components.classes["@songbirdnest.com/Songbird/MediaLibrary;1"].createInstance(Components.interfaces.sbIMediaLibrary);
          this.query = Components.classes["@songbirdnest.com/Songbird/DatabaseQuery;1"].createInstance(Components.interfaces.sbIDatabaseQuery);
          this.query.setDatabaseGUID("songbird"); // todo: make it watch the db as well as the guid !
          this.ml.setQueryObject(this.query);
        }
        ]]>
      </body>
    </method>
    
    <method name="setDirty">
      <body>
        <![CDATA[
          if (this.dirtyobject) this.dirtyobject.setDirty(true);
        ]]>
      </body>
    </method>

    <method name="checkForChange">
      <body>
        <![CDATA[
         var value = this.getValueFromControl();
         if (value != this.originalvalue) this.setDirty();
        ]]>
      </body>
    </method>


  </implementation>
 
  </binding>




  <!-- DB LABEL CONTROL -->




  <binding id="label" extends="chrome://songbird/content/bindings/db_controls.xml#base">

  <content>
    <xul:label flex="1" sid="dbedit.label" class="dialog_label" />
  </content>

  <implementation>

    <constructor>
      this.setAttribute("readonly", "1");
    </constructor>
    <destructor>
    </destructor>

    <field name="label">document.getAnonymousElementByAttribute(this, 'sid', 'dbedit.label');</field>

    <method name="setValueToControl">
      <parameter name="value"/>
      <body>
        this.label.setAttribute("value", value);
      </body>
    </method>
    
    <method name="getValueFromControl">
      <body>
        return this.label.getAttribute("value");
      </body>
    </method>
    
    
    
   </implementation>
 
  </binding>




  <!-- DB TEXTBOX CONTROL -->




  <binding id="textbox" extends="chrome://songbird/content/bindings/db_controls.xml#base">

  <content>
    <xul:checkbox sid="dbedit.checkbox" hidden="true"/>
    <xul:spacer sid="dbedit.spacer" width="2" hidden="true"/>
    <xul:textbox flex="1" sid="dbedit.textbox" class="dialog_textbox" xbl:inherits="readonly=readonly" />
  </content>

  <implementation>

    <constructor>
    </constructor>
    <destructor>
    </destructor>

    <field name="editcontrol">document.getAnonymousElementByAttribute(this, 'sid', 'dbedit.textbox');</field>
    <field name="checkbox">document.getAnonymousElementByAttribute(this, 'sid', 'dbedit.checkbox');</field>
    <field name="spacer">document.getAnonymousElementByAttribute(this, 'sid', 'dbedit.spacer');</field>

    <method name="setValueToControl">
      <parameter name="value"/>
      <body>
        this.editcontrol.value = value;
      </body>
    </method>
    
    <method name="getValueFromControl">
      <body>
        return this.editcontrol.value;
      </body>
    </method>
    
   </implementation>

    <handlers>
      <handler event="keypress">
        <![CDATA[
          var controller = this;
          var callback = function() { controller.checkForChange(); };
          setTimeout(callback, 0); 
        ]]>
      </handler>
    </handlers>
  </binding>




  <!-- DB COMBOBOX CONTROL -->




  <binding id="menulist" extends="chrome://songbird/content/bindings/db_controls.xml#base">

  <content>
    <xul:checkbox sid="dbedit.checkbox" hidden="true"/>
    <xul:spacer sid="dbedit.spacer" width="2" hidden="true"/>
    <xul:menulist 
      sid="dbedit.list"
      flex="1"
      xbl:inherits="editable=editable,id=listid"
      class="dialog_textbox"
      onpopupshowing="onPopup();"
    >
      <children/>
    </xul:menulist>
  </content>

  <implementation>

    <constructor>
    </constructor>
    <destructor>
    </destructor>
    
    <property name="populateuniques">
      <setter>
         return this.setAttribute("populateuniques", val);
      </setter>
      <getter>
         return this.getAttribute("populateuniques");
      </getter>
    </property>

    <field name="editcontrol">document.getAnonymousElementByAttribute(this, 'sid', 'dbedit.list');</field>
    <field name="checkbox">document.getAnonymousElementByAttribute(this, 'sid', 'dbedit.checkbox');</field>
    <field name="spacer">document.getAnonymousElementByAttribute(this, 'sid', 'dbedit.spacer');</field>

    <method name="setValueToControl">
      <parameter name="value"/>
      <body>
        this.editcontrol.selectedIndex = -1;
        this.editcontrol.value = value;
      </body>
    </method>
    
    <method name="getValueFromControl">
      <body>
        return this.editcontrol.value;
      </body>
    </method>
    
    <method name="onPopup">
      <body>
         this.fillList();
      </body>
    </method>
    
    <method name="fillList">
      <body>
        <![CDATA[
          if (this.populateuniques) {
            this.editcontrol.removeAllItems();
            var nout = {};
            var array = this.ml.getUniqueValuesByColumn(this.column, nout);
            for (var i=0;i<array.length;i++) {
              if (array[i] != "")
                this.editcontrol.appendItem(array[i], null, null);
            }
          }
      ]]>
      </body>
    </method>
    
   </implementation>

    <handlers>
      <handler event="keypress">
        <![CDATA[
          var controller = this;
          var callback = function() { controller.checkForChange(); };
          setTimeout(callback, 0); 
        ]]>
      </handler>
      <handler event="popuphidden">
        <![CDATA[
          var controller = this;
          var callback = function() { controller.checkForChange(); };
          setTimeout(callback, 0); 
        ]]>
      </handler>
    </handlers>

  </binding>

</bindings>

