<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2006 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="playlist">
    <content>
      <xul:stack flex="1">
        <xul:vbox sbid="loading_box" pack="end" align="right" flex="1" class="sb_faceplate">
          <xul:vbox id="loading_box" class="sb_faceplate" flex="1">
            <xul:label id="loading_text" flex="1" value=""/>
          </xul:vbox>
        </xul:vbox>
        <xul:vbox flex="1" class="sb_faceplate" style="margin: 0px;padding: 0px;">
          <!-- Playlist Filters -->
          <xul:hbox sbid="filter_parent" style="min-height: 60px;" flex="1" hidden="false">
          </xul:hbox>

          <xul:smartsplitter
            id="horz_splitter"
            sbid="filter_splitter"
            orientation="vertical" 
            state="open"
            collapse="before"
            resizebefore="closest"
            resizeafter="closest"
            hidden="true"
            metricscategory="player" 
            metricsid="collapse.library" 
          >
            <xul:grippy/>
          </xul:smartsplitter>

          <!-- Playlist Tree -->
          <xul:tree 
            xbl:inherits="enableColumnDrag=enableColumnDrag,hidecolumnpicker=hidecolumnpicker" 
            id="playlist_tree" 
            sbid="playlist_tree" 
            ref="" 
            datasources="" 
            flags="dont-build-content"
            flex="3" 
            onmouseup="saveColumnsProperties();"
            onkeypress="onPlaylistKeypress( event );"
            oncontextmenu="onPlaylistContextClick( event );"
            onselect="onPlaylistSelectClick( event );"
            onclick="onPlaylistClick( event );"
            onscroll="onPlaylistScroll( event );"
          >
          </xul:tree>

          <!-- Playlist Toolbar -->
          <xul:hbox id="playlist_toolbar_bkg" sbid="playlist_toolbar">
            <xul:hbox id="playlist_toolbar" sbid="toolbar_parent" flex="1" oncommand="onToolbarCommand( event )">
            </xul:hbox>
          </xul:hbox>

          <!-- Popupset -->
          <xul:popupset>
            <!-- Context Popup -->
            <xul:popup 
              id="playlist_context_popup" 
              sbid="playlist_context_popup" 
              onpopupshown="onPopupShown( event );"
              onpopuphidden="onPopupHidden( event );"
              oncommand="onPlaylistContextMenu( event );"
            >
              <xul:menuseparator id="playlist_context_before" sbid="playlist_context_before"/>
              <xul:menu id="playlist.context.search" label="&playlist.context.search;">
                <xul:menupopup id="playlist.popup.search">
                  <xul:menuitem id="search_popup_term" sbid="search_popup_term" label="" disabled="true"/>
                  <xul:menuseparator/>
                  <xul:menuitem id="search.popup.singingfish" 
                    label="Singingfish" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/singingfish.ico"
                  />
                  <xul:menuitem id="search.popup.elbows" 
                    label="elbo.ws" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/elbows.ico"
                />
                  <xul:menuitem id="search.popup.google" 
                    label="Google" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/google.ico"
                />
                  <xul:menuitem id="search.popup.wiki" 
                    label="Wikipedia" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/default.ico"
                />
                  <xul:menuitem id="search.popup.yahoo" 
                    label="Yahoo!" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/yahoo.ico"
                />
                  <xul:menuitem id="search.popup.emusic" 
                    label="eMusic" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/emusic.ico"
                />
                  <xul:menuitem id="search.popup.insound" 
                    label="Insound" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/insound.ico"
                />
                  <xul:menuitem id="playlist.popup.odeo" 
                    label="Odeo" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/odeo.ico"
                />
                  <xul:menuitem id="search.popup.shoutcast" 
                    label="Shoutcast" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/shoutcast.ico"
                />
                  <xul:menuitem id="search.popup.radiotime" 
                    label="Radiotime" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/radiotime.ico"
                />
                </xul:menupopup>
              </xul:menu>
              <xul:menu id="playlist.context.lyrics" label="&playlist.context.lyrics;">
                <xul:menupopup id="playlist.popup.lyrics">
                  <xul:menuitem id="lyrics_popup_term" sbid="lyrics_popup_term" label="" disabled="true"/>
                  <xul:menuseparator/>
                  <xul:menuitem id="lyrics.popup.google" 
                    label="Google" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/google.ico"
                  />
                </xul:menupopup>
              </xul:menu>
              <children/>
            </xul:popup>
            <!-- Edit Popup (doesn't work) -->
            <xul:popup id="playlist_edit_popup" sbid="playlist_edit_popup" class="sb_faceplate" ignorekeys="true">
              <xul:textbox id="playlist_edit_box"
                           sbid="playlist_edit_box"
                           class="sb_faceplate"
                           onblur="hidePlaylistEdit();"
                           onchange="onPlaylistEditChange();"
                           onkeypress="onPlaylistEditKeypress( event );"
                           flex="1"/>
            </xul:popup>
          </xul:popupset>
        </xul:vbox>
      </xul:stack>
    </content>

    <implementation type="application/x-javascript" implements="nsIXULBuilderListener,nsIXULTreeBuilderObserver" name="songbird_playlist">

      <constructor>
        <![CDATA[
          //SB_LOG("playlist.xml", "creating...");
      try
      {
        // Load the javascript we want to use
        var jsLoader = Components.classes["@mozilla.org/moz/jssubscript-loader;1"].getService(Components.interfaces.mozIJSSubScriptLoader);
        jsLoader.loadSubScript( "chrome://songbird/content/scripts/songbird_interfaces.js", this );
        jsLoader.loadSubScript( "chrome://songbird/content/scripts/messagebox.js", this );
        jsLoader.loadSubScript( "chrome://songbird/content/scripts/dragAndDrop.js", this );
        jsLoader.loadSubScript( "chrome://global/content/nsDragAndDrop.js", this );
        jsLoader.loadSubScript( "chrome://global/content/nsTransferable.js", this );

        // Load up the string bundle
        var src = "chrome://songbird/locale/songbird.properties";
        var stringBundleService =
            Components.classes["@mozilla.org/intl/stringbundle;1"]
            .getService(Components.interfaces.nsIStringBundleService);
        this.stringbundle = stringBundleService.createBundle( src );
            
        // register to get the willRebuild and didRebuild messages
        this.tree.builder.addListener(this);

        // These are all the possible column ids whose cell content we can use as unique ids (for saveSelection/restoreSelection)
        this._selection_key_array = Array("id", "uuid", "playlist_uuid", "playlist_id", "row_id");
        
        this._lastviewsummary = "";
        this.lastfiltersstate = "open";

        this.bindDataRemotes();
        if ( this._constructed ) dump("playlist.xml - constructor - THIS SHOULD NEVER GET CALLED\n"); // ???
        this._constructed = true; // ???

        // Attach event handler closures.
        var self = this;
        this._onFilterDblClickClosure = function(event) {
          self.onFilterDblClick(event);
        };
        this._onPlaylistDblClickClosure = function(event) {
          self.onPlaylistDblClick(event);
        };
        this._onDragClosure = function(event) {
          self.onDrag(event);
        };
        this.addEventListener("dblclick", this._onPlaylistDblClickClosure, false);
        this.addEventListener("draggesture", this._onDragClosure, false);

        var sbs = Components.classes["@mozilla.org/intl/stringbundle;1"].getService(Components.interfaces.nsIStringBundleService);
        var songbirdStrings = sbs.createBundle("chrome://songbird/locale/songbird.properties");
        this.str_tracksaddedto = "tracks added to"
        this.str_trackaddedto = "track added to"
        this.str_notracksaddedto = "No tracks added to"
        this.str_library = "Library";
        this.str_playlist = "Playlist";
        this.str_trackalreadypresent = "track already present";
        this.str_tracksalreadypresent = "tracks already present";
        try {
          this.str_tracksaddedto = songbirdStrings.GetStringFromName("library.tracksaddedto");
          this.str_trackaddedto = songbirdStrings.GetStringFromName("library.trackaddedto");
          this.str_notracksaddedto = songbirdStrings.GetStringFromName("library.notracksaddedto");
          this.str_trackalreadypresent = songbirdStrings.GetStringFromName("library.trackalreadypresent");
          this.str_tracksalreadypresent = songbirdStrings.GetStringFromName("library.tracksalreadypresent");
          this.str_library = songbirdStrings.GetStringFromName("library");
          this.str_playlist = songbirdStrings.GetStringFromName("playlist");
        } catch (err) { /* ignore error, we have default strings */ }
      }
      catch ( err )
      {
        dump( "playlist.xml - constructor - " + err );
      }
      ]]>
      </constructor>

      <destructor>
        <![CDATA[
          //SB_LOG("playlist.xml", "destroying [" + this.ref + "]");
      try {
        if ( ! this._constructed )
        {
          dump("playlist.xml - destructor - THIS SHOULD NEVER GET CALLED\n");
          return; // ???
        }

        var e = document.createEvent("Events");
        e.initEvent("playlist-destroy", false, true);
        this.dispatchEvent(e);

        // no more didRebuild/willRebuild messages
        if (this.tree.builder)
          this.tree.builder.removeListener(this);

        // remove ourself from watching the tree's view (toggle state, selection notification... )
        if (this.tree.view && this.addedObserver) {
          this.tree.view.removeObserver(this);
          this.addedObserver = false;
        }

        if (this.m_dndSourceTracker)
          this.m_dndSourceTracker.unregisterDnDSource(this);
     
        // detach mouse listeners from drag list 
        this.stopWatchingDragObjects();

        // detach from the DataRemote
        this.unbindDataRemotes();

        this._constructed = false; // ???
        this.m_queryObj = null;
        this.commands = null;

        this.removeEventListener("dblclick", this._onPlaylistDblClickClosure, false);
        this.removeEventListener("draggesture", this._onDragClosure, false);

        for(var i=0;i<this.filters.length;i++) {
          var filter = this.filters[i];
          filter.removeEventListener("dblclick", this._onFilterDblClickClosure, true);
          filter.removeEventListener("filterlist-filterchange", this.sendFilterChangeEvent, true);
        }
        this._onPlaylistDblClickClosure = null;
        this._onDragClosure - null;
        this._onFilterDblClickClosure = null;

      } catch (err) {
        dump("playlist.xml - destructor: " + err + "\n");
      }
      ]]>
      </destructor>

      <field name="tree">document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_tree');</field>
      <field name="context_popup">document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_context_popup');</field>
      <field name="loading_box">document.getAnonymousElementByAttribute(this, 'sbid', 'loading_box');</field>
      <field name="context_x">-1</field>
      <field name="context_y">-1</field>
      <field name="context_term">""</field>
      <field name="context_item"></field>
      <field name="popup_showing">false</field>
      <field name="guid">""</field>
      <field name="table">""</field>
      <field name="type">""</field>
      <field name="base_type">""</field>
      <field name="description">""</field>
      <field name="readable_name">""</field>
      <field name="filters">new Array();</field>
      <field name="commands"></field>
      <field name="toolbarbuttons">new Array();</field>
      <field name="menuitems">new Array();</field>
      <field name="stringbundle">null</field>
      <field name="m_Library">null</field>
      <field name="m_PlaylistManager">null</field>
      <field name="edit_popup">document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_edit_popup');</field>
      <field name="edit_box">document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_edit_box');</field>
      <field name="source">null</field>
      <field name="builder">this.tree.builder</field>
      <field name="view">this.tree.view</field>
      <field name="_saved_selection">null</field>
      <field name="_saved_nitems">null</field>
      <field name="_dragobjects">null</field>
      <field name="_selection_key">""</field>
      <field name="_selection_key_array">""</field>
      <field name="treecols">null</field>
      <field name="restoring_selection">false</field>
      <field name="_addto_added_count">0</field>
      <field name="_addto_existed_count">0</field>
      <field name="m_dndSourceTracker">null</field>
      <field name="lastClickIndex">0</field>
      <field name="lastClickTimestamp">0</field>
      <field name="paused_scanning">false</field>
      <field name="sortorder">""</field>
      <field name="sortdirection">""</field>

      <property name="ref">
        <getter>
          return this.tree.getAttribute("ref");
        </getter>
        <setter>
          return this.tree.setAttribute("ref", val);
        </setter>
      </property>

      <property name="datasources">
        <getter>
          return this.tree.getAttribute("datasources");
        </getter>
        <setter>
          return this.tree.setAttribute("datasources", val);
        </setter>
      </property>

      <!-- Initialization and Control -->

      <method name="load">
        <parameter name="url"/>
        <parameter name="guid"/>
        <parameter name="table"/>
        <parameter name="name"/>
        <parameter name="type"/>
        <parameter name="description"/>
        <parameter name="content_type"/>
        <parameter name="commands"/>
        <body>
          <![CDATA[
      try
      {
            //SB_LOG("playlist.xml", "playlist::load ********* guid:" + guid + " ******** table:" + table + " ******* " + url + " *******");
/*      
        alert(
        "   url: " + url + "\n" +
        "   guid: " + guid + "\n" +
        "   table: " + table + "\n" +
        "   name: " + name + "\n" +
        "   type: " + type + "\n" +
        "   description: " + description + "\n" +
        "   content_type: " + content_type + "\n" );
*/
        // Get a query object to handle the database transactions.
        aDBQuery = Components.classes["@songbirdnest.com/Songbird/DatabaseQuery;1"].createInstance(Components.interfaces.sbIDatabaseQuery);
        aDBQuery.setAsyncQuery(false); // hard and slow.  should only have to happen once.
        aDBQuery.setDatabaseGUID(guid);
        
        // Get the library interface, make sure there is a default library (fast if already exists)
        const MediaLibrary = new Components.Constructor("@songbirdnest.com/Songbird/MediaLibrary;1", "sbIMediaLibrary");
        var aMediaLibrary = (new MediaLibrary()).QueryInterface(Components.interfaces.sbIMediaLibrary);
        aMediaLibrary.setQueryObject(aDBQuery);
        aMediaLibrary.createDefaultLibrary();

        // Make it all go now, please.
        aDBQuery.execute();
        aDBQuery.resetQuery();
        
        // Get the playlist manager, and create the internal playlisting infrastructure.
        var aPlaylistManager = new sbIPlaylistManager();
        aPlaylistManager.createDefaultPlaylistManager(aDBQuery);

        // Make it all go now, please.
        aDBQuery.execute();
        aDBQuery.resetQuery();
        
        // Make sure we load into something empty
        aPlaylistManager.deletePlaylist(table, aDBQuery);
        
        // Make it all go now, please.
        aDBQuery.execute();
        aDBQuery.resetQuery();

        // Now it is safe to load up that playlist.    
        const PlaylistReaderManager = new Components.Constructor("@songbirdnest.com/Songbird/PlaylistReaderManager;1", "sbIPlaylistReaderManager");
        var aPlaylistReader = (new PlaylistReaderManager()).QueryInterface(Components.interfaces.sbIPlaylistReaderManager);
        
        // For some reason, this is the offending method?      
        var success = aPlaylistReader.loadPlaylist(url, guid, table, name, type, description, content_type, false, null);
        
        // And, lastly, bind ourselves to that playlist being loaded.
        this.bind( guid, table, "", commands );
      }
      catch( err )
      {
        alert( "playlist.xml - load - " + err );
      }
      ]]>
        </body>
      </method>

      <method name="bind">
        <parameter name="guid"/>
        <parameter name="table"/>
        <parameter name="filters"/>
        <parameter name="commands"/>
        <parameter name="resize"/>
        <parameter name="collapse"/>
        <parameter name="refsuffix"/>
        <body>
          <![CDATA[
            //SB_LOG("playlist.xml", "playlist::bind ********* guid:" + guid + " ******** table:" + table + " *******");
      try
      {
        // Perhaps we need to reload our columns
        var need_loadcolumns = false;
        
        // Make sure we have a playlist source.
        if ( this.source == null )
        {
          this.source = Components.classes["@mozilla.org/rdf/datasource;1?name=playlist"]
                                   .getService( Components.interfaces.sbIPlaylistsource );
        }
        
        // Reset some variables used elsewhere.
        this.m_queryObj = null;
        this.m_Library = null;
        this.m_PlaylistManager = null;
        this.loading_box.removeAttribute( "hidden" );
        
        // Set some others
        this.guid = guid;
        this.table = table;
        this.type = "";
        this.base_type = "";

        // Find the table in the playlistlist if possible.
        var queryObj = Components.classes["@songbirdnest.com/Songbird/DatabaseQuery;1"].createInstance();
        queryObj = queryObj.QueryInterface(Components.interfaces.sbIDatabaseQuery);
        queryObj.setDatabaseGUID(guid);
        var PlaylistManager = new Components.Constructor("@songbirdnest.com/Songbird/PlaylistManager;1", "sbIPlaylistManager");
        var playlistManager = new PlaylistManager();
        playlistManager = playlistManager.QueryInterface(Components.interfaces.sbIPlaylistManager);
        playlistManager.getAllPlaylistList( queryObj );
        var resultset = queryObj.getResultObject();
        for ( var i = 0; i < resultset.getRowCount(); i++ )
        {
          if ( table == resultset.getRowCellByColumn( i, "name" ) )
          {
            this.type = resultset.getRowCellByColumn( i, "type" );
            this.base_type = resultset.getRowCellByColumn( i, "base_type" );
            this.description = resultset.getRowCellByColumn( i, "description" );
            this.readable_name = resultset.getRowCellByColumn( i, "readable_name" );
            break;
          }
        }        

        var ref = "NC:" + guid + "_" + table;
        if (refsuffix) ref += "_" + refsuffix;
        
        var feed = false;
        // If there are no rows already loaded for this ref
        if (
              ( this.source.getRefRowCount( ref ) <= 0 ) ||
              ( (filters != null) && filters.length != this.source.getNumFilters( ref ) ) 
           )
        {
          // We must feed from the sbIPlaylistsource interface
          feed = true;
        }

        // If we are loading a new ref into an extant playlist        
        if ( ref != this.ref )
        {
          // New columns from the new feed.
          this.removeColumns();
          this.removeTemplate();
          need_loadcolumns = true;
        }
        
        // Tell the playlist source to feed.
        if ( feed )
        {
          this.source.feedPlaylist( ref, guid, table );
        }

        // Tell the tree to listen for the datasource
        this.source.incomingObserver( ref, this ); // HI!  We're about to stick an observer on you!
        this.tree.setAttribute("ref", ref);
        this.tree.setAttribute("datasources", "rdf:playlist");
        this.builder.refresh();
        
        // Handle the silly observer stuff
        if ( this.tree.view && this.addedObserver )
        {
          this.tree.view.removeObserver(this);
        }
        this.addedObserver = false;
        
        this._lastviewsummary = "";
        
        /* 
        // this is wrong, getFilter returns filter *values*, we should use getFilterColumn instead.
        // also, some usage of playlist.xml may not want autocreation of filterlists from the source,
        // so, disable this code until we have a use case that makes it clear if/how we should autoreload the filters
        
        // If the source says we have filters, use them.
        if ( filters == null )
        {
          var num = this.source.getNumFilters( ref );
          if ( num > 0 )
          {
            filters = new Array();
            for ( var i = 0; i < num; i++ )
            {
              filters.push( this.source.getFilter( ref, i ) );
            }
          }
        }
        */
        
        if ( filters && filters.length )
        {
          for ( var i = 0; i < filters.length; ++i )
          {
            this.addFilter( filters[ i ], feed );
          }
        }
        else
        {
          // These should be hidden
          var parent = document.getAnonymousElementByAttribute(this, 'sbid', 'filter_parent');
          parent.hidden = true;
          var splitter = document.getAnonymousElementByAttribute(this, 'sbid', 'filter_splitter');
          splitter.hidden = true;
        }
        
        // Tell the playlist source to feed the filters.
        if ( feed )
        {
          this.source.executeFeed( ref );
        }

        // Clear out the old commands
        var toolbar = document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_toolbar');
        toolbar.hidden = true;
        
        if (!this.forcedcommands) 
        {
          // And add the new ones
          this.commands = commands;
          // See if there is one registered specifically for this table
          var cmds = this.source.getPlaylistCommands( this.guid, this.table, this.type );
          if ( cmds )
          {
            this.commands = cmds;
          }
        } 
        else 
        {
          this.commands = this.forcedcommands; 
        }
        // Make sure it does what we think it does.
        if ( this.commands )
        {
          this.commands = this.commands.QueryInterface( Components.interfaces.sbIPlaylistCommands );
        }
        this.refreshCommands();
        
        // If boolean true, read from the XUL file.
        if ( resize == true )
        {
          resize = this.getAttribute( "resize_height" );
        }
        // If an integer
        if ( parseInt( resize ) > 0 )
        {
          this.height = resize;
        }
        if ( collapse > 0 )
        {
          this.previousSibling.setAttribute( "state", "collapsed" );
        }
        else if ( collapse != null )
        {
          this.previousSibling.setAttribute( "state", "open" );
        }
        
        // Last last last thing, just force one redraw on the tree.
        if ( need_loadcolumns )
        {
          // Load columns upon rebinding.
          this.loadColumns();
        }
        
        // Compare the current ordering value in the playlistsource to make sure we stay in sync
        var order = this.source.getOrder(this.ref);
        var orderArray = order.split(","); // Split out any comma delimited values first
        var orderArray = orderArray[0].split(" "); // And only look at the first value
        
        // Sync the order column and direction
        this.sortorder = orderArray[0];
        this.sortdirection = orderArray[1];
        this.syncColumnSortIndicator();
      }
      catch( err )
      {
        alert( "playlist.xml - bind - " + err );
      }
      ]]>
        </body>
      </method>

      <method name="refreshCommands">
        <parameter name="stateonly"/>
        <body>
          <![CDATA[
      try
      {
        if (!stateonly)
          stateonly = false;
        if (this.toolbarbuttons.length == 0 || this.menuitems.length == 0) 
          stateonly = false;
        
        // Get the parents
        var toolbar = document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_toolbar');
        var parent = document.getAnonymousElementByAttribute(this, 'sbid', 'toolbar_parent');
        var popup = document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_context_popup');
        var before = document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_context_before');
        
        // If we have a popup, skip it
        if ( this.popup_shown )
        {
          // make a note that we need to refresh when the popup goes away
          this._needRefresh = true;
          return;
        }
        this._needRefresh = false;
        
        if (!stateonly) {
          toolbar.hidden = true;
          // Remove old elements
          this.removeCommands();
        }
        
        if ( this.commands )
        {
          // Once we get here, tell the commands who we are.
          if (!stateonly) this.commands.setPlaylist( this );
          
          // And make all the new stuff
          var num = this.commands.getNumCommands();
          for ( var i = 0; i < num; i++ )
          {
            var toolbarbutton;
            var menuitem;
            if (!stateonly)
            {
              // If we get here, show the toolbar
              toolbar.hidden = false;
              
              // What id?
              var obj_id = this.commands.getCommandId( i );
              
              var toolbarbutton_type = "button";
              var menuitem_type = "menuitem";
              
              if ( obj_id == "*separator*" )
              {
                toolbarbutton_type = "spacer";
                menuitem_type = "menuseparator";
              }
            
              // Create a toolbarbutton
              toolbarbutton = document.createElement( toolbarbutton_type );
              toolbarbutton.setAttribute( "id", obj_id );
              toolbarbutton.setAttribute( "sbtype", "command" ); // to find it easily, later
              toolbarbutton.setAttribute( "class", "sb_faceplate" ); // Make them fully skinned buttons.

              // And a menuitem
              menuitem = document.createElement( menuitem_type );
              menuitem.setAttribute( "id", obj_id );
              menuitem.setAttribute( "sbtype", "command" );
              menuitem.setAttribute( "class", "menuitem-iconic" ); // Icons are set in the css using the id
              
              // No label unless you have a label
              var cmd_text = this.commands.getCommandText( i );
              if ( cmd_text.length > 0 )
              {
                if ( cmd_text[ 0 ] == "&" )
                {
                  try
                  {
                    cmd_text = this.stringbundle.GetStringFromName( cmd_text.substr( 1, cmd_text.length ) );
                  }
                  catch( err )
                  {
                    dump("error playlist.xml refreshCommands() - getStringFromName: " + err + "\n");
                  }
                }
                toolbarbutton.setAttribute( "label", cmd_text );
                menuitem.setAttribute( "label", cmd_text );
              }

              // No label unless you have a label
              var cmd_flex = this.commands.getCommandFlex( i );
              if ( cmd_flex > 0 )
              {
                toolbarbutton.setAttribute( "flex", cmd_flex );
//                menuitem.setAttribute( "flex", cmd_flex );
              }

              // No tooltip unless you have a tooltip
              var tooltip_text = this.commands.getCommandToolTipText( i );
              if ( tooltip_text.length > 0 )
              {
                if ( tooltip_text[ 0 ] == "&" )
                {
                  try
                  {
                    tooltip_text = this.stringbundle.GetStringFromName( tooltip_text.substr( 1, tooltip_text.length ) );
                  }
                  catch( err )
                  {
                    dump("error playlist.xml refreshCommands() - getStringFromName: " + err + "\n");
                  }
                }
                /*
                    These cause the crashy if they're up while updating.  :(
                
                  toolbarbutton.setAttribute( "tooltiptext", tooltip_text );
                  menuitem.setAttribute( "tooltiptext", tooltip_text );
                */
              }
            }
            else
            {
              toolbarbutton = this.toolbarbuttons[i];
              menuitem = this.menuitems[i];
            }

            if ( this.commands.getCommandEnabled( i ) )
            {
              toolbarbutton.setAttribute( "disabled", "false" );
              menuitem.setAttribute( "disabled", "false" );
            }
            else
            {
              toolbarbutton.setAttribute( "disabled", "true" );
              menuitem.setAttribute( "disabled", "true" );
            }
            
            // Add them to the parents
            if (!stateonly)
            {
              this.toolbarbuttons.push( toolbarbutton );
              this.menuitems.push( menuitem );
              parent.appendChild( toolbarbutton );
              popup.insertBefore( menuitem, before );
            }
          }

          if ( this.toolbarbuttons.length != this.commands.getNumCommands() )
          {
            dump( "ERROR: TOOLBARBUTTONS OUT OF SYNCH!\n" );
          }
        }
      }
      catch( err )
      {
        alert( "playlist.xml - refreshCommands - " + err );
      }
      ]]>
        </body>
      </method>

      <method name="removeCommands">
        <body>
          <![CDATA[
        try
        {
          // Delete the toolbar commands
          var parent = document.getAnonymousElementByAttribute(this, 'sbid', 'toolbar_parent');
          var command_nodes = parent.getElementsByAttribute( 'sbtype', 'command' );
          // command_nodes is a live array, removing children from parent auto removes items from it
          while ( command_nodes.length > 0 ) 
          {
            var node = command_nodes.item( 0 );
            parent.removeChild(node);
          }
          this.toolbarbuttons.length = 0; // clear the array??
        
          // Delete the popup commands
          var popup = document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_context_popup');
          command_nodes = popup.getElementsByAttribute( 'sbtype', 'command' );
          while ( command_nodes.length > 0 ) 
          {
            var node = command_nodes.item( 0 );
            popup.removeChild(node);
          }
          this.menuitems.length = 0; // clear the array??
        }
        catch ( err )
        {
          alert( "playlist.xml - removeElementsByAttribute - " + err );
        }
        ]]>
        </body>
      </method>

      <method name="addFilter">
        <parameter name="meta_column"/>
        <parameter name="feed"/>
        <body>
          <![CDATA[
      try
      {
        // These should be shown
        var thesplitter = document.getAnonymousElementByAttribute(this, 'sbid', 'filter_splitter');
        thesplitter.hidden = false;
        var parent = document.getAnonymousElementByAttribute(this, 'sbid', 'filter_parent');
        parent.hidden = false;
        
        // Add a splitter
        if ( this.filters.length > 0 )
        {
          var splitter = document.createElement( "splitter" );
          splitter.setAttribute( "id", "filter_splitter" );
          splitter.setAttribute( "state", "open" );
          splitter.setAttribute( "resizebefore", "closest" );
          splitter.setAttribute( "resizeafter", "closest" );
          splitter.setAttribute( "collapse", "before" );
          
          var grippy = document.createElement( "grippy" );

          splitter.appendChild( grippy );
          parent.appendChild( splitter );          
        }
        
        // Add a filterlist
        var filterlist = document.createElement( "filterlist" );
        filterlist.setAttribute( "id", meta_column + "_filter" );
        filterlist.setAttribute( "enableColumnDrag", "false" );
        filterlist.setAttribute( "hidecolumnpicker", "true" );
        filterlist.setAttribute( "flex", "1" );
        
        parent.appendChild( filterlist );          
        
        // The ref for the filter contains the column header identifier
        var ref = this.ref + "_" + meta_column;

        // This preps the Playlistsource for the XUL Tree Builder to hook up
        // and only listen to changes to this ref.
        this.source.incomingObserver( ref, filterlist );

        // There is a VERY delicate ordering here that breaks if you start
        // moving things around. If you do, make sure you test thoroughly.
        filterlist.source = this.source;
        filterlist.index = this.filters.length;
        filterlist.column = meta_column;
        filterlist.datasources = "rdf:playlist";
        filterlist.playlist = this;
        filterlist.ref_pl = this.ref;

        // setting the ref causes a rebuild of the filter and a
        // select to happen, which calls setFilter, so you BETTER have index,
        // ref and column set before setting the ref.
        filterlist.ref = ref;

        filterlist.addEventListener( "dblclick", this._onFilterDblClickClosure, true );
        filterlist.addEventListener( "filterlist-filterchange", this.sendFilterChangeEvent, true );

        // We still need to call setFilter here despite it getting called from
        // the setting of ref above, otherwise the filters will not draw
        if ( feed )
        {
          this.source.setFilter( this.ref, 
                                 filterlist.index, 
                                 "", 
                                 filterlist.ref,
                                 filterlist.column );
        }

        filterlist.builder.refresh();
        
        this.filters.push( filterlist );
        thesplitter.restoreLastState( true );
      }
      catch( err )
      {
        alert( "playlist.xml - addFilter - " + err );
      }
      ]]>
        </body>
      </method>

      <!-- Dynamic Columns/Template -->

      <method name="loadColumns">
        <body>
          <![CDATA[
      try
      {
        if (this.source == null)
          return;
        // Don't nuke the columns if the user's currently moving or resizing them, or if the columns picker is open
        if (!this.isAnyDragObjectDown() && !this.isColumnPickerOpen()) {
          // Don't nuke the columns if there's no current query result.  Yipe.
          if ( this.source.getRefColumnCount( this.ref ) > 0 )
          {
            this.saveColumnsProperties();
            this.removeColumns();
            this.removeTemplate(); 
            this.createTemplateAndColumns(this.source, this.ref);
          }
          else {
            this.createTemplateAndColumns(this.source, this.ref);
          }
        }
      }
      catch( err )
      {
        alert( "playlist.xml - loadColumns - " + err );
      }
      ]]>
        </body>
      </method>

      <method name="createTemplateAndColumns">
        <parameter name="source"/>
        <parameter name="ref"/>
        <body>
          <![CDATA[
        try
        {
          // See if we need to hide the loading box.
          if ( ! this.loading_box.hidden )
          {
            if ( ! this.source.isQueryExecuting( this.ref ) )
            {
              this.loading_box.hidden = true;
            }
          }
      
          const MediaLibrary = new Components.Constructor("@songbirdnest.com/Songbird/MediaLibrary;1", "sbIMediaLibrary");
          const PlaylistManager = new Components.Constructor("@songbirdnest.com/Songbird/PlaylistManager;1", "sbIPlaylistManager");
          const SimplePlaylist = new Components.Constructor("@songbirdnest.com/Songbird/SimplePlaylist;1", "sbISimplePlaylist");
          const Playlist = new Components.Constructor("@songbirdnest.com/Songbird/Playlist;1", "sbIPlaylist");
        
          this.stopWatchingDragObjects();
        
          // Go through all the columns on the table and create nodes accordingly
          if(this.guid == 'undefined' || this.table == 'undefined' || this.guid == "" || this.table == "")
            return;

          if(this.m_queryObj == null)
          {          
            this.m_queryObj = Components.classes["@songbirdnest.com/Songbird/DatabaseQuery;1"].createInstance();
            this.m_queryObj = this.m_queryObj.QueryInterface(Components.interfaces.sbIDatabaseQuery);
            this.m_queryObj.setDatabaseGUID(this.guid);
          }
          
          if(this.m_Library == null)
          {
            this.m_Library = (new MediaLibrary()).QueryInterface(Components.interfaces.sbIMediaLibrary);
            this.m_Library.setQueryObject(this.m_queryObj);
          }
          
          if(this.m_PlaylistManager == null)
          {
            this.m_PlaylistManager = (new PlaylistManager()).QueryInterface(Components.interfaces.sbIPlaylistManager);
          }
          
          if(this.table == "library")
          {
            this.m_Library.getColumnInfo();
          }
          else
          {
            var playlist = this.m_PlaylistManager.getPlaylist(this.table, this.m_queryObj);
            
            if(!playlist)
              playlist = this.m_PlaylistManager.getSimplePlaylist(this.table, this.m_queryObj);

            if(!playlist)
              playlist = this.m_PlaylistManager.getDynamicPlaylist(this.table, this.m_queryObj);

            if(!playlist)
              playlist = this.m_PlaylistManager.getSmartPlaylist(this.table, this.m_queryObj);
           
            if(playlist)
            {
              playlist.getColumnInfo();
            }
            else
            {
              this.m_Library.getColumnInfo();
            }
          }
          
          var result = this.m_queryObj.getResultObject();
          
          if ( result.getRowCount() == 0 ) return; // Don't create nodes if there's no columns.

          // Columns nodes parent
          var columns_node = document.createElement("treecols");

          // Template nodes parents
          var template_node = document.createElement("template");

          var rule_node = document.createElement("rule");

          var treechildren_node = document.createElement("treechildren");
          treechildren_node.setAttribute("flex", "1");

          var treeitem_node = document.createElement("treeitem");
          treeitem_node.setAttribute("uri", "rdf:*");

          var treerow_node = document.createElement("treerow");

          // XXXredfive - Row Count is # of columns (19 currently)
          for (var i = 0; i < result.getRowCount(); i++)
          {
            var name = result.getRowCellByColumn(i, "column_name");
            var readableName = result.getRowCellByColumn(i, "readable_name");
            var isVisible = result.getRowCellByColumn(i, "is_visible");
            var isDefaultVisible = result.getRowCellByColumn(i, "default_visibility");
            
            if ( name == null ) name = "";
            if ( readableName == null ) readableName = "";
            if ( isVisible == null ) isVisible = "";
            if ( isDefaultVisible == null ) isDefaultVisible = "";
            
            if ( name == "" ) continue;
            
            var this_column_node = document.createElement("treecol");

            if ( readableName && readableName[ 0 ] == "&" )
            {
              try
              {
                readableName = this.stringbundle.GetStringFromName( readableName.substr( 1, readableName.length ) );
              }
              catch( err )
              {
                dump("ERROR playlist.xml:createTemplateAndColumns getting the string from the name: " + err + "\n");
              }
            }

            // ordinal is the position of the column
            var ordinal = SBDataGetIntValue( "playlist." + this.ref + ".column." + name + ".ordinal" );
            if (ordinal == 0) ordinal = 1;

            var defaultFlex = result.getRowCellByColumn(i, "width");
            if (defaultFlex == -1) defaultFlex = 35;
            var isFixed = "false";
            var size = SBDataGetIntValue( "playlist." + this.ref + ".column." + name + ".size" );

            this_column_node.setAttribute("id", name);
            this_column_node.setAttribute("label", readableName);
            this_column_node.setAttribute("ordinal", ordinal);
            
            if (name == "progress")
            {
              this_column_node.setAttribute("type", "progressmeter");
            }

            if (name == "rating")
            {
              this_column_node.setAttribute("type", "progressmeter");
            }
           
            // need to check string, to check for unset state 
            var savedHidden = SBDataGetStringValue( "playlist." + this.ref + ".column." + name + ".hidden" );

            if (savedHidden == "1") 
            {
              this_column_node.setAttribute("hidden", "true");
            }
            else
            {
              // check default visibility if hidden has not been saved
              if (savedHidden == "" && isDefaultVisible == "0") 
              {
                this_column_node.setAttribute("hidden", "true");
              } 
            }

            if(!isVisible)
            {
              this_column_node.setAttribute("ignoreincolumnpicker", "true");
            }
            
            if (size > 0) this_column_node.width = size;
            
            this_column_node.setAttribute("fixed", isFixed);
            this_column_node.setAttribute("flex", defaultFlex);
            this_column_node.setAttribute("minheight", "0");
            
            var splitter = document.createElement("splitter");
            splitter.setAttribute("class", "tree-splitter");
            splitter.setAttribute("ordinal", ordinal);
            columns_node.appendChild(splitter);
            this.registerDragObject(splitter);

            columns_node.appendChild(this_column_node);
            this.registerDragObject(this_column_node);

            var treecell_node = document.createElement("treecell");
            treecell_node.setAttribute("label", "rdf:http://home.netscape.com/NC-rdf#"+name);
            
            // hardcode hack for progressmeter
            if (name == "progress") {
              treecell_node.setAttribute("value", "rdf:http://home.netscape.com/NC-rdf#"+name);
              treecell_node.setAttribute("mode", "normal");
            }
            // hardcode hack for ratings
            if (name == "rating") {
              treecell_node.setAttribute("value", "rdf:http://home.netscape.com/NC-rdf#"+name);
              treecell_node.setAttribute("mode", "normal");
            }
            treerow_node.appendChild(treecell_node);
          }
          
        
          // Now add columns and template node hierarchy to the tree
          this.tree.insertBefore(columns_node, null);

          treeitem_node.appendChild(treerow_node); 
          treechildren_node.appendChild(treeitem_node);
          rule_node.appendChild(treechildren_node);
          template_node.appendChild(rule_node);
          this.tree.appendChild(template_node);

          this.startWatchingDragObjects();
          
          this.treecols = columns_node;

          this.builder.rebuild();
        }
        catch( err )
        {
          alert( "playlist.xml - createTemplateAndColumns - " + err );
        }
        ]]>
        </body>
      </method>

      <!-- Tree Manipulation Functions -->

      <method name="removeColumns">
        <body>
          this.removeChildByName("treecols");
          //this.treecols = null;
        </body>
      </method>

      <method name="removeTemplate">
        <body>
          this.removeChildByName("template");
        </body>
      </method>

      <method name="removeChildByName">
        <parameter name="childname"/>
        <body>
          <![CDATA[
          for (var i=0; i<this.tree.childNodes.length; i++) {
            var node = this.tree.childNodes.item(i);
            if (node.tagName == childname || node.tagName == "xul:"+childname) {
              this.tree.removeChild(node);
              i--;
            }
          }
        ]]>
        </body>
      </method>

      <!-- Save columns UI properties -->

      <method name="saveColumnsProperties">
        <body>
          this.saveColumnsWidth();
          this.saveColumnsOrdinal();
          this.saveColumnsVisibility();
        </body>
      </method>

      <!-- Save columns width in data remotes -->

      <method name="saveColumnsWidth">
        <body>
          <![CDATA[
          try
          {
            if (this.tree.columns && this.tree.columns.count && this.tree.columns.count > 0) {
              for (var i=0;i<this.tree.columns.count;i++) {
                var id = this.tree.columns.getColumnAt(i).id;
                var width = this.tree.columns.getColumnAt(i).width;
                if (width == 0) {
                  // first rebuild when coming back from a url doesn't have time
                  //   to show the columns and still has all their widths to 0,
                  //   don't save that
                  continue; 
                }
                SBDataSetIntValue( "playlist." + this.ref + ".column." + id + ".size", width );
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - saveColumnsWidth - " + err );
          }
        ]]>
        </body>
      </method>

      <method name="findObject">
        <parameter name="parent"/>
        <parameter name="object"/>
        <body>
          <![CDATA[
          var ret = null;
          try
          {
            if (parent != null)
            {
              var n = parent.childNodes.length;
              for (var i=0;i<parent.childNodes.length;i++) {
                var node = parent.childNodes.item(i);
                if (node.tagName == object ||
                    node.tagName == "xul:" + object) {
                  ret = node;
                }
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - findObject - " + err );
          }
          return ret;
        ]]>
        </body>
      </method>

      <method name="findAnonymousObject">
        <parameter name="parent"/>
        <parameter name="object"/>
        <body>
          <![CDATA[
          var ret = null;
          try
          {
            if (parent != null)
            {
              var nodes = document.getAnonymousNodes(parent);
              if (nodes != null)
              {
                var n = nodes.length;
                for (var i=0;i<nodes.length;i++) {
                  var node = nodes.item(i);
                  if (node.tagName == object ||
                      node.tagName == "xul:" + object) {
                    ret = node;
                    break;
                  }
                }
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - findAnonymousObject - " + err );
          }
          return ret;
        ]]>
        </body>
      </method>

      <method name="isColumnPickerOpen">
        <body>
          <![CDATA[
          var ret = false;
          try
          {
            if (this.treecols != null)
            {
              var colpicker = this.findAnonymousObject(this.treecols, "treecolpicker");
              if (colpicker != null)
              {
                var popup = this.findAnonymousObject(colpicker, "menupopup");
                if (popup != null)
                {
                  if (popup.popupBoxObject.x != 0) ret = true;
                }
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - isColumnPickerOpen - " + err );
          }
          return ret;
        ]]>
        </body>
      </method>


      <!-- Save columns ordinal in data remotes -->

      <method name="findColumns">
        <body>
          return this.findObject(this.tree, "treecols");
        </body>
      </method>

      <method name="saveColumnsOrdinal">
        <body>
          <![CDATA[
          try
          {
            var columnsNode = this.findColumns();
            if (columnsNode == null) return;
            for (var i=0;i<columnsNode.childNodes.length;i++)
            {
              var node = columnsNode.childNodes[i];
              if (node.tagName == "treecol" || node.tagName == "xul:treecol")
              {
                SBDataSetIntValue( "playlist." + this.ref + ".column." + node.id + ".ordinal", node.ordinal );
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - saveColumnsOrdinal - " + err );
          }
        ]]>
        </body>
      </method>

      <method name="saveColumnsVisibility">
        <body>
          <![CDATA[
          try
          {
            var columnsNode = this.findColumns();
            if (columnsNode == null) return;
            for (var i=0;i<columnsNode.childNodes.length;i++)
            {                                                                          
              var node = columnsNode.childNodes[i];
              if (node.tagName == "treecol" || node.tagName == "xul:treecol")
              {
                SBDataSetBoolValue( "playlist." + this.ref + ".column." + node.id + ".hidden", node.hidden );
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - saveColumnsVisibility - " + err );
          }
        ]]>
        </body>
      </method>

      <!-- Selection save/restore - HACK -->

      <method name="saveSelection">
        <body>
          <![CDATA[
          try
          {
            if (this.tree.columns && this.tree.columns.count > 0 && this.tree.view.rowCount > 0) {
              var column 
              // pick a column whose content we will use as unique identifier
              for (var k=0;k<this._selection_key_array.length;k++)
              {
                column = this.tree.columns.getNamedColumn(this._selection_key_array[k]);
                if (column != null)
                {
                  this._selection_key = this._selection_key_array[k];
                  break;
                }
              }
              // save selection array, this is potentially slow if many items are selected
              if (column != null) {
                this._saved_selection = Array();
                this._saved_selection.position = Array();
                this._saved_selection.all = false;
                this._saved_selection.ranges = Array();
                this._saved_nitems = this.tree.view.rowCount;
                this._saved_order = this.source.getOrder(this.ref); // save the old order, if it is empty and the new is empty as well then we will be able to reselect much faster
                var rangeCount = this.tree.view.selection.getRangeCount();
                for (var i=0; i < rangeCount; i++) {
                  var start = {};
                  var end = {};
                  this.tree.view.selection.getRangeAt( i, start, end );
                  if (start.value == -1 || end.value == -1) {
                    continue;
                  }
                  this._saved_selection.ranges.push([start.value, end.value]);
                  if (start.value == 0 && end.value == this.tree.view.rowCount-1) this._saved_selection.all = true;
                  else {
                    for( var c = start.value; c <= end.value; c++ )
                    {
                      if (c >= this.tree.view.rowCount) 
                      {
                        return; //alert( "playlist.xml - saveSelection - selection item c (" + c + ") is not in range! (rowCount = " + this.tree.view.rowCount + ")");
                      }
                      try
                      {
                        var value = this.tree.view.getCellText( c, column );
                      }
                      catch ( e )
                      {
                        alert( "Error? " + column + " - " + c + "\r\n" + e );
                        return;  // wtf?!
                      }
                      this._saved_selection.push(value);
                      this._saved_selection.position.push(c);
                    }
                  }
                }
                // did our selection just get screwed for no reason ? this happens when all selection ranges are invalid ! eek !!
                if (rangeCount > 0 && this._saved_selection.length == 0) {
                  // fix the internal selection ranges, or we'll keep getting (-1,-1)'s :(
                  this.tree.view.selection.clearSelection();
                }
              }
            } 
          }
          catch( err )
          {
            alert( "playlist.xml - saveSelection" + err );
          }
        ]]>
        </body>
      </method>

      <method name="restoreSelection">
        <body>
          <![CDATA[
          try
          {
            this.restoring_selection = true;
            
            //dump("start restore\n");
            if (this._saved_selection != null && 
                this._saved_selection.ranges && 
                this._saved_selection.ranges.length > 0 && 
                this.tree.columns && 
                this.tree.columns.count > 0 && 
                this.tree.view.rowCount > 0) {

              // use the key we picked in saveSelection
              var column = this.tree.columns.getNamedColumn(this._selection_key); 
              if (column != null) {

                // restore selection from array

                // first try to restore from selection ranges. this can only be done for unsorted 
                // playlists, because sorted playlists may move the items in a rebuild.
                // an exception to this is when *all* items are selected, then it doesn't matter if 
                // the items moved since all should be reselected (but this is only true if the number 
                // of items did not change)

                if ((this._saved_order == "" && this.source.getOrder(this.ref) == "") || 
                    (this._saved_selection.all && this._saved_nitems == this.tree.view.rowCount)) {
                
                  while (this._saved_selection.ranges.length > 0) {
                    var item = this._saved_selection.ranges.pop();
                    var start = item[0];
                    var end = item[1];
                    this.tree.view.selection.rangedSelect(start, end, true);
                  }
                
                } else {
                
                  // next try to restore based on the item's position in the list. 
                  // for each item, check that the unique value is still the one it was
                  
                  var by_position_failed = false;
                  
                  while (this._saved_selection.length > 0) {
                    var value = this._saved_selection.pop();
                    var row = this._saved_selection.position.pop();
                    
                    var cell = this.tree.view.getCellText( row, column );
                    if (value == cell) {
                      // the item at that position is still the right item, select it
                      this.tree.view.selection.rangedSelect(row, row, true);
                    } else {
                      // an item has changed position, put it back in the list and stop trusting item positions
                      this._saved_selection.push(value);
                      this._saved_selection.position.push(row);
                      by_position_failed = true;
                      break;
                    }
                  }
                  
                  if (by_position_failed) {

                    // last, if neither of the previous method succeeded (which implies some items moved around), 
                    // ask the playlist source to find the previously recorded values and return an array of new rows
                    // this is potentially slow for really big libraries on slow machines

                    var nrows = {};
                    var rows = this.source.getRefRowsByColumnValues(this.ref, this._selection_key, this._saved_selection.length, this._saved_selection, nrows);
                    
                    for (var i=0;i<nrows.value;i++) {
                      var row = rows[i];
                      if (row == -1) continue;
                      this.tree.view.selection.rangedSelect(row, row, true);
                    }
                  }
                }
              }
            }

            //dump("end restore\n");

            this.restoring_selection = false;
          }
          catch( err )
          {
            alert( "playlist.xml - restoreSelection - " + err );
          }
        ]]>
        </body>
      </method>

      <method name="findCell">
        <parameter name="column"/>
        <parameter name="value"/>
        <body>
          <![CDATA[
          try
          {
            // Instead of a linear search, try a shortcut.
            if ( column.id == "row_id" )
            {
              return value - 1;   
            }
            var row = this.source.getRefRowByColumnValue(this.ref, column.id, value);
            return row;
          }
          catch( err )
          {
            alert( "playlist.xml - findCell - " + err );
          }
          return -1;
        ]]>
        </body>
      </method>

      <!-- Drag Objects watcher -->

      <method name="registerDragObject">
        <parameter name="obj"/>
        <body>
          <![CDATA[
          try
          {
            if (this._dragobjects == null) this._dragobjects = Array();
            this._dragobjects.push(obj);
          }
          catch( err )
          {
            alert( "playlist.xml - registerDragObject - " + err );
          }
        ]]>
        </body>
      </method>

      <method name="startWatchingDragObjects">
        <body>
          <![CDATA[
          try {
            var dragObjects = this._dragobjects;
            if (dragObjects) {
              var count = dragObjects.length;
              for (var i = 0; i < count; i++) {
                var dragObject = dragObjects[i];
                if (dragObject.addEventListener) {
                  dragObject.addEventListener("mouseup", this.dragObjectMouseUp, true); 
                  dragObject.addEventListener("mousedown", this.dragObjectMouseDown, true); 
                }
              }
            }
          }
          catch(err) {
            alert("playlist.xml - startWatchingDragObjects - " + err);
          }
        ]]>
        </body>
      </method>

      <method name="stopWatchingDragObjects">
        <body>
          <![CDATA[
          try
          {
            if (this._dragobjects != null)
            {
              for (var i=0; i<this._dragobjects.length;i++)
              {
                this._dragobjects[i].removeEventListener("mouseup", this.dragObjectMouseUp, true); 
                this._dragobjects[i].removeEventListener("mousedown", this.dragObjectMouseDown, true); 
              }
              this._dragobjects = null;
            }
          }
          catch( err )
          {
            alert( "playlist.xml - stopWatchingDragObjects - " + err );
          }
        ]]>
        </body>
      </method>

      <method name="dragObjectMouseUp">
        <body>
          document.__PlaylistXBL_DragObjectDown__ = null;
        </body>
      </method>

      <method name="dragObjectMouseDown">
        <body>
          document.__PlaylistXBL_DragObjectDown__ = this;
        </body>
      </method>

      <method name="isAnyDragObjectDown">
        <body>
          <![CDATA[
          var ret = 0;
          try
          {
            if (this._dragobjects != null) {
              var o = document.__PlaylistXBL_DragObjectDown__;
              for (var i=0; i<this._dragobjects.length;i++)
              {
                if (o == this._dragobjects[i])
                {
                  ret = 1;
                  break;
                }
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - isAnyDragObjectDown - " + err );
          }
          return ret;
        ]]>
        </body>
      </method>

      <!-- nsIXULBuilderListener implementation -->

      <method name="willRebuild">
        <parameter name="builder"/>
        <body>
          this.saveSelection();
          this.saveColumnsProperties();
          // XXXredfive - may want to check if columns have changed
          //this.loadColumns();
        </body>
      </method>

      <method name="didRebuild">
        <parameter name="builder"/>
        <body>
          // Check to make sure this playlist still exists!
          if (!this.ensurePlaylistExists()) return;
          
          var viewsummary = this.getViewSummary();
          if (this._lastviewsummary == viewsummary)
          {
            this.restoreSelection();
            this.refreshCommands(true);
          }
          else
          {
            this.refreshCommands(false);
          }
          this._lastviewsummary = viewsummary;
          this.syncColumnSortIndicator();
        </body>
      </method>

      <method name="onCycleHeader">
        <parameter name="id"/>
        <parameter name="elem"/>
        <body>
          <![CDATA[
            if (this.source) {
              // Flip the sort direction
              if (this.sortorder == id) {
                if (this.sortdirection == "asc") this.sortdirection = "desc";
                else this.sortdirection = "asc";
              } else {
                this.sortorder = id;
                this.sortdirection = (id == "rating") ? "desc" : "asc";
              }
              
              // Make some metadata columns have secondary columns associated!
              var order = "";
              if ( id == "row_id" ) // No sort on this column.  It does not exist.
                this.sortorder = "";
              else if ( id == "artist" )
                order = "artist " + this.sortdirection + ", " +
                        "album " + this.sortdirection + ", " +
                        "track_no " + this.sortdirection;
              else if ( id == "album" )
                order = "album " + this.sortdirection + ", " +
                        "track_no " + this.sortdirection;
              else 
                order = id + " " + this.sortdirection;
              
              // Tell the playlistsource how things should sort  
              this.source.setOrder(this.ref, order);
              
              // Clear the selection
              this.tree.view.selection.clearSelection();
            }
          ]]>
        </body>
      </method>

      <!-- nsIXULTreeBuilderObserver implementation
      canDrop()
      onDrop()
      onToggleOpenState()
      onCycleCell()
      onSelectionChanged()
      onPerformAction()
      onPerformActionOnRow()
      onPerformActionOnCell()
      -->

      <!-- nsITreeView implementation -->
      <method name="isEditable">
        <parameter name="row"/>
        <parameter name="col"/>
        <body>
          <![CDATA[
      try
      {
        alert( "isEditable( " + row + ", " + col + " )" );
      }
      catch( err )
      {
        alert( "playlist.xml - isEditable - " + err )
      }
      return true;
      ]]>
        </body>
      </method>

      <!-- Event yellers -->

      <method name="sendPlayEvent">
        <body>
          <![CDATA[
      try
      {
        var e = document.createEvent("Events");
        e.initEvent("playlist-play", false, true);
        this.dispatchEvent(e);
      }
      catch( err )
      {
        alert( "playlist.xml - sendPlayEvent - " + err )
      }
      ]]>
        </body>
      </method>

      <method name="sendEscEvent">
        <body>
          <![CDATA[
          try
          {
            var e = document.createEvent("Events");
            e.initEvent("playlist-esc", false, true);
            this.dispatchEvent(e);
          }
          catch( err )
          {
            alert( "playlist.xml - sendEscEvent - " + err )
          }
          ]]>
        </body>
      </method>

      <method name="sendEditEvent">
        <body>
          <![CDATA[
          try
          {
            // No inline editing on readonly columns.
            if ( !this.isReadOnlyColumn( this.edit_col.id ) )
            {
              var e = document.createEvent("Events");
              e.initEvent("playlist-edit", false, true);
              this.dispatchEvent(e);
            }
          }
          catch( err )
          {
            alert( "playlist.xml - sendEditEvent - " + err )
          }
          ]]>
        </body>
      </method>

      <method name="sendEditorEvent">
        <body>
          <![CDATA[
          try
          {
            var e = document.createEvent("Events");
            e.initEvent("playlist-editor", false, true);
            this.dispatchEvent(e);
          }
          catch( err )
          {
            alert( "playlist.xml - sendEditorEvent - " + err )
          }
          ]]>
        </body>
      </method>

      <method name="sendBurnToCDEvent">
        <body>
          <![CDATA[
          try
          {
            var e = document.createEvent("Events");
            e.initEvent("playlist-burntocd", false, true);
            this.dispatchEvent(e);
          }
          catch( err )
          {
            alert( "playlist.xml - sendBurnToCDEvent - " + err )
          }
          ]]>
        </body>
      </method>

      <!-- Tree event listeners -->

      <method name="onToolbarCommand">
        <parameter name="evt"/>
        <body>
          <![CDATA[
          try
          {
            if ( this.commands )
            {
              this.commands.onCommand( evt );
            }
          }
          catch( err )
          {
            alert( "playlist.xml - onToolbarCommand - " + err );
          }
        ]]>
        </body>
      </method>

      <method name="onPlaylistDblClick">
        <parameter name="evt"/>
        <body>
          <![CDATA[
          try
          {
            if( this.pointInTreeRows( this.tree, evt.clientX, evt.clientY ) )
            {
              if ( this.tree.currentIndex != -1 )
              {
                this.sendPlayEvent();
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistDblClick - " + err );
          }
        ]]>
        </body>
      </method>

      <method name="onFilterDblClick">
        <parameter name="evt"/>
        <body>
          <![CDATA[
          try
          {
            if( this.pointInTreeRows( evt.target.tree, evt.clientX, evt.clientY ) )
            {
              var playlist = evt.target.playlist;
              
              if ( playlist )
              {
                document.__PlaylistXBL_DragObjectDown__ = playlist; // YUCK YUCK YUCK YUCK (note the absence of "f")
                var txt = "document.__PlaylistXBL_DragObjectDown__.tree.view.selection.currentIndex = 0;"
                txt += "document.__PlaylistXBL_DragObjectDown__.tree.view.selection.select( 0 );"
                txt += "document.__PlaylistXBL_DragObjectDown__.sendPlayEvent();"
                // Play it in awhile, after the tree updates.
                setTimeout( txt, 250 ); 
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - onFilterDblClick - " + err );
          }
        ]]>
        </body>
      </method>

      <method name="onPlaylistKeypress">
        <parameter name="evt"/>
        <body>
          <![CDATA[
          try
          {
            //dump("charcode = " + evt.charCode + " - keycode = " + evt.keyCode + "\n");
            if (evt.charCode == 97 && evt.ctrlKey) {  // ctrl-a
              this.tree.view.selection.selectAll();
            } else {
              switch ( evt.keyCode )
              {
                case KeyEvent.DOM_VK_DELETE: 
                case KeyEvent.DOM_VK_BACK_SPACE: 
                  if ( this.tree.currentIndex != -1 )
                  {
                    this.removeTracks();
                  }
                  break;
                case KeyEvent.DOM_VK_RETURN:
                case KeyEvent.DOM_VK_ENTER: 
                  if ( this.tree.currentIndex != -1 )
                  {
                    this.sendPlayEvent();
                  }
                  break;
                case KeyEvent.DOM_VK_ESCAPE:
                  {
                    this.sendEscEvent();
                  }
                  break;
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistKeypress - " + err );
          }
        ]]>
        </body>
      </method>

      <method name="onPlaylistContextClick">
        <parameter name="evt"/>
        <body>
          <![CDATA[
          try {
            // If there is no actual commands, do not allow the context menu to pop.
            if (!this.commands || this.commands.getNumCommands() == 0) return;
            
            const COLUMN_TITLE = "title";
            const CONTEXT_IDS = ["playlist_context_before",
                                 "playlist.context.search",
                                 "playlist.context.lyrics"];

            // Small helper to loop through a list of the ids for the context
            // menu items and show or hide each element.
            //
            // aShow - a boolean specifying if items are to be shown or
            //           hidden. Defaults to true.
            function showContextItems(aShow) {
              if (aShow === undefined)
                aShow = true;

              var items = CONTEXT_IDS;
              var count = items.length;
              for (var index = 0; index < count; index++) {
                var id = items[index];
                var item = document.getElementById(id);
                if (!item)
                  continue;

                var isHidden = item.hasAttribute("hidden");

                if (aShow && isHidden) {
                  item.removeAttribute("hidden");
                }
                else if (!aShow && !isHidden) {
                  item.setAttribute("hidden", "true");
                }
              }
            }

            var tree = this.tree;            
            if (tree.currentIndex < 0)
              return;

            this.hidePlaylistEdit();

            // First, get the row and column clicked.
            var childElement = {}, rowObject = {}, columnObject = {};
            tree.treeBoxObject.getCellAt(evt.clientX, evt.clientY, rowObject,
                                         columnObject, childElement);

            // Bail if we got a bad result
            if (rowObject.value == -1)
              return;

            this.edit_row = rowObject.value;
            this.edit_col = columnObject.value;
            
            var cellText =
              tree.view.getCellText(rowObject.value, columnObject.value);

            if (!cellText) {
              // If we couldn't get text from the cell then we'll try to pull it
              // out another way
              var titleColumn = tree.columns.getNamedColumn(COLUMN_TITLE);
              if (titleColumn)
                cellText = tree.view.getCellText(tree.currentIndex, titleColumn);
            }

            // Make sure that everyone knows about our context
            this.context_term = cellText;
            SBDataSetStringValue("playlist.context.term", cellText);

            if (cellText) {
              var sbs =
                Components.classes["@mozilla.org/intl/stringbundle;1"]
                          .getService(Components.interfaces.nsIStringBundleService);
              var songbirdStrings =
                sbs.createBundle("chrome://songbird/locale/songbird.properties");

              var searchHeader, lyricsHeader;
              try {
                searchHeader =
                  songbirdStrings.GetStringFromName("playlist.context.searchheader");
                lyricsHeader =
                  songbirdStrings.GetStringFromName("playlist.context.lyricsheader");
              }
              catch (err) {
                searchHeader = "Search";
                lyricsHeader = "Lyrics";
              }

              var searchTerm =
                document.getAnonymousElementByAttribute(this, 'sbid', 'search_popup_term');
              searchTerm.label = searchHeader + ": " + cellText;

              var lyricsTerm =
                document.getAnonymousElementByAttribute(this, 'sbid', 'lyrics_popup_term');
              lyricsTerm.label = lyricsHeader + ": " + cellText;

              // Make sure that the search and lyrics menus are visible
              showContextItems(true);
            }
            else {
              // We couldn't get any context, so hide the search and lyrics
              // menu items.
              showContextItems(false);
            }
            
            this.context_x = evt.screenX + 5;
            this.context_y = evt.screenY;
            
            //dump("this.context_x = " + this.context_x + "\r\n");
            //dump("this.context_y = " + this.context_y + "\r\n");
            
            this.context_popup.showPopup(tree, this.context_x, this.context_y,
                                         "context", null, null, null);
            
            //dump("this.context_popup.boxObject.screenX = " + this.context_popup.boxObject.screenX + "\r\n");
            //dump("this.context_popup.boxObject.screenY = " + this.context_popup.boxObject.screenY + "\r\n");
            
            // lone> there seems to be a bug here. sometimes the origin for the popup coords is the top left corner of the parent window
            // instead of the screen ... it only seems to happen after the user has used the in-place popup edit box and right clicked on it.
            // it's pretty obscure, i'm not sure if this is a moz or a sb bug ...
          }
          catch( e )
          {
            dump("playlist.xml - onPlaylistContextClick:\nException = " + e + "\n");
          }
        ]]>
        </body>
      </method>

      <method name="onPlaylistSelectClick">
        <parameter name="evt"/>
        <body>
          <![CDATA[
          try
          {
            //dump("onPlaylistSelectClick\r\n");
            this.hidePlaylistEdit();
            
            // If we have commands, allow them to update
            if ( ! this.restoring_selection )
            {
              this.refreshCommands();
            }
            
            // If we select too many items, we need to pause the scanning.
            var count = 0;
            if (this.tree.view)
            {
              var rangeCount = this.tree.view.selection.getRangeCount();
              for (var i=0; i < rangeCount; i++) 
              {
                var start = {};
                var end = {};
                this.tree.view.selection.getRangeAt( i, start, end );
                count += end.value - start.value + 1;
              }
            }
            if ( count > 50 )
            {
              if ( ! this.paused_scanning )
              {
                // increment the backscan pause value.
                SBDataIncrementValue( "backscan.paused" );
                this.paused_scanning = true;
              }
            }
            else
            {
              if ( this.paused_scanning )
              {
                // decrement the backscan.pause value to a floor of 0
                SBDataDecrementValue( "backscan.paused", 0 );
                this.paused_scanning = false;
              }
            }
            if (!this.restoring_selection) {
              var e = document.createEvent("Events");
              e.initEvent("playlist-selchange", false, true);
              this.dispatchEvent(e);
            }
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistSelectClick - " + err );
          }
        ]]>
        </body>
      </method>

    <method name="isReadOnlyColumn">
      <parameter name="col"/>
      <body>
        <![CDATA[
          var ml = Components.classes["@songbirdnest.com/Songbird/MediaLibrary;1"].createInstance(Components.interfaces.sbIMediaLibrary);
          var query = Components.classes["@songbirdnest.com/Songbird/DatabaseQuery;1"].createInstance(Components.interfaces.sbIDatabaseQuery);
          query.setDatabaseGUID(this.guid)
          ml.setQueryObject(query);
          ml.getColumnInfo();
          var destcols = query.getResultObject();
          for (var i=0;i<destcols.getRowCount();i++) {
            var colname = destcols.getRowCellByColumn(i, "column_name");
            if (colname == col)
              return (destcols.getRowCellByColumn(i, "readonly") != 0);
          }
          return true;
        ]]>
      </body>
    </method>

    <method name="onPlaylistClick">
      <parameter name="evt"/>
      <body>
        <![CDATA[
          try
          {
            //dump("onPlaylistClick\r\n");
            // If there is an edit box up, get rid of it.
            this.hidePlaylistEdit();

            // Put the observer back, here.
            if ( ! this.addedObserver )
            {
              // And then listen to the tree? (togglecell, selectionChange)
              this.tree.view.addObserver(this);
              this.addedObserver = true;
              
              // Handle the fact this might be a click on the header (lame!)
              if ( evt.target.nodeName == "treecol" )
              {
                this.onCycleHeader(evt.target.id, evt.target);
                return;
              }
            }
            
            if ( evt.button == 0 && this.tree.currentIndex != -1 )
            {
              var obj = {}, row = {}, col = {}; 
              this.tree.treeBoxObject.getCellAt( evt.clientX, evt.clientY, row, col, obj );
              // If the "obj" has a value, it is a cell.  Otherwise, it could be anything.
              if ( obj.value )
              {
                if (!this.isReadOnlyColumn( col.value.id ))
                {
                  // Remember the row and column
                  this.edit_row = row.value;
                  this.edit_col = col.value;
                  if (this.edit_col.id == "rating") 
                  {
                    var width = this.edit_col.element.boxObject.width;
                    var dist = evt.screenX - this.edit_col.element.boxObject.screenX;
                    // 4 pixels offsets
                    width -= 8;
                    dist -= 4;
                    var ret = Math.round(dist / width * 100);
                    if (ret < 0) ret = 0; if (ret > 100) ret = 100;
                    this.setCellRating(this.edit_row, this.edit_col, ret);
                  } 
                  else if ( this.tree.currentIndex == this.tree.lastClickIndex  )
                  {
                    var delay = evt.timeStamp - this.lastClickTimestamp;
                    if ( delay > 1000 && delay < 2000 )
                    {
                      // Send the event and see if anyone is there to catch it?
                      this.sendEditEvent();
                    }
                  }
                }
              }
            }
            this.tree.lastClickIndex = this.tree.currentIndex;            
            this.lastClickTimestamp = evt.timeStamp;            
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistClick - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="onPlaylistScroll">
      <parameter name="evt"/>
      <body>
        <![CDATA[
          try
          {
            alert( "Scroll:" + evt );
            this.hidePlaylistEdit();
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistScroll - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="onPlaylistContextMenu">
      <parameter name="evt"/>
      <body>
        <![CDATA[
          try
          {
            this.context_item = null;
            if ( ! evt.target )
            {
              return;
            }
            this.context_item = document.getAnonymousElementByAttribute(this, 'id', evt.target.id);
            metrics_inc("playlist.context", this.context_item.getAttribute("id"), null);
            if ( evt.target.getAttribute( "sbtype" ) == "command" )
            {
              if ( this.commands ) // I hope so!
              {
                this.commands.onCommand( evt );
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistContextMenu - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="onPlaylistEdit">
      <parameter name="mouse_x"/>
      <parameter name="mouse_y"/>
      <body>
        <![CDATA[
          try
          {
            // First, get the row and column clicked.
            var obj = {}; 
            var tree_edit_row = {};
            var tree_edit_col = {};
            this.tree.treeBoxObject.getCellAt( mouse_x, mouse_y, tree_edit_row, tree_edit_col, obj );
            
            // If the "obj" has a value, it is a cell?
            if ( obj.value )
            {
              // Remember the row and column
              this.edit_row = tree_edit_row.value;
              this.edit_col = tree_edit_col.value;
              
              // *?* So, instead, we send an event and hope it can find us
              this.sendEditEvent();
              
/* LAME -- The edit popup doesnt work in here.  Phththth.
              // Is this supposed to be editable?
              var editable = this.tree.view.isEditable( this.edit_row, this.edit_col );
              
              if ( editable )
              {
                // Get the info for the cell item.
                var out_x = {}, out_y = {}, out_w = {}, out_h = {}; 
                this.tree.treeBoxObject.getCoordsForCellItem( tree_edit_row.value, tree_edit_col.value, "cell",
                                                                    out_x , out_y , out_w , out_h );
                var cell_text = this.tree.view.getCellText( tree_edit_row.value, tree_edit_col.value );
                
                // Then pop the edit box to the bounds of the cell.
                var extra_x = 3; // Why do I have to give it extra?  What am I calculating wrong?
                var extra_y = 22; // Why do I have to give it extra?  What am I calculating wrong?
                var less_w  = 6;
                var pos_x = extra_x + this.tree.boxObject.screenX + out_x.value;
                var pos_y = extra_y + this.tree.boxObject.screenY + out_y.value;
                this.edit_popup.showPopup( this.tree, pos_x, pos_y, "popup", null, null, null );
                this.edit_popup.sizeTo( out_w.value - less_w, out_h.value ); // increase the width to the size of the cell.
                this.edit_box.focus();
                this.edit_box.value = cell_text;
              }
*/              
            }
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistEdit - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="onPopupShown">
      <parameter name="evt"/>
      <body>
        <![CDATA[
          try
          {
            this.popup_shown = true;
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistContextMenu - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="onPopupHidden">
      <parameter name="evt"/>
      <body>
        <![CDATA[
          try
          {
            this.popup_shown = false;

            // Force a refresh of the commands due to bug315 - toolbarbuttons out of sync
            if (this._needRefresh)
              this.refreshCommands(false);
            
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistContextMenu - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="onPlaylistEditChange">
      <body>
        <![CDATA[
          try
          {
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistEditChange - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="onPlaylistEditKeypress">
      <body>
        <![CDATA[
          try
          {
            alert( "key" );
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistEditKeypress - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="hidePlaylistEdit">
      <body>
        <![CDATA[
          try
          {
        //    alert( "hide" );
            this.edit_popup.hidePopup();
          }
          catch( err )
          {
            alert( "playlist.xml - hidePlaylistEdit - " + err );
          }
        ]]>
      </body>
    </method>
    
    <method name="addToPlaylist">
      <body>
        <![CDATA[
          try
          {
            // Make a data object to get the playlist to add to from the dialog
            var add_to_playlist_data = new Object();
            // Open the modal dialog
            window.openDialog( "chrome://songbird/content/xul/add_to_playlist.xul", "add_to_playlist", "chrome,modal=yes,titlebar=no,resizable=no, centerscreen", add_to_playlist_data );
            if ( add_to_playlist_data.retval == "ok" )
            {
              // add them !
              var playlist = add_to_playlist_data.playlist;
              this.addToPlaylistOrLibrary(playlist);
              this.reportAddedTracks(true);
            }  
          }
          catch( err )
          {
            alert( "playlist.xml - addToPlaylist - " + err );
          }
        ]]>
      </body>
    </method>
    
    <method name="addToLibrary">
      <body>
        <![CDATA[
          try
          {
            this.addToPlaylistOrLibrary();
            this.reportAddedTracks(false);
          }
          catch( err )
          {
            alert( "playlist.xml - addToPlaylist - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="reportAddedTracks">
      <parameter name="toplaylist"/>
      <body>
        <![CDATA[
          var msg;
          if (toplaylist) {
            var totalcount = this._addto_added_count + this._addto_existed_count;
            msg = "" + totalcount + " ";
            switch (totalcount) {
              case 0: msg += this.str_notracksaddedto; break;
              case 1: msg += this.str_trackaddedto; break;
              default: msg += this.str_tracksaddedto; break;
            }
            msg += " " + this.str_playlist.toLowerCase(); 
          } else {
            msg = "" + this._addto_added_count + " ";
            switch (totalcount) {
              case 0: msg += this.str_notracksaddedto; break;
              case 1: msg += this.str_trackaddedto; break;
              default: msg += this.str_tracksaddedto; break;
            }
            msg += " " + this.str_library.toLowerCase(); 
            if (this._addto_existed_count > 0) msg += " (" + this._addto_existed_count + " " + ((this._addto_existed_count > 1) ? this.str_tracksalreadypresent : this.str_trackalreadypresent) + ")";
          }
          SBDataSetStringValue("faceplate.status.override.text", "");
          SBDataSetStringValue("faceplate.status.override.text", msg);
          SBDataSetStringValue("faceplate.status.override.style", "font-weight: bold;");
        ]]>
      </body>
    </method>
    
    <method name="addToPlaylistOrLibrary">
      <parameter name="playlist"/>
      <body>
        <![CDATA[
          try
          {
            var MediaLibrary = new Components.Constructor("@songbirdnest.com/Songbird/MediaLibrary;1", "sbIMediaLibrary");
            mediaLibrary = (new MediaLibrary()).QueryInterface(Components.interfaces.sbIMediaLibrary);
            
            var queryObj = Components.classes["@songbirdnest.com/Songbird/DatabaseQuery;1"].createInstance();
            queryObj = queryObj.QueryInterface(Components.interfaces.sbIDatabaseQuery);
            queryObj.setDatabaseGUID("songbird");
            
            mediaLibrary.setQueryObject(queryObj);
            
            var PlaylistManager = new Components.Constructor("@songbirdnest.com/Songbird/PlaylistManager;1", "sbIPlaylistManager");
            var playlistManager = new PlaylistManager();
            playlistManager = playlistManager.QueryInterface(Components.interfaces.sbIPlaylistManager);
            
            var thePlaylist;
            if (playlist != null) thePlaylist = playlistManager.getPlaylist(playlist, queryObj);
            
            if (playlist != null && thePlaylist == null)
            {
              alert("playlist.xml - addToPlaylistOrLibrary - Playlist '" + playlist + "' not found!");
              return;
            }

            // Add the tracks to it     
            var urlcolumn = this.tree.columns.getNamedColumn("url");
            var uuidcolumn = this.tree.columns.getNamedColumn("uuid");
            if (urlcolumn) // it is okay if uuidcolumn does not exist, but url is our fallback
            {
              var metadataintersection_ids = Array();
              var metadataintersection_cols = Array();
              
              // are the tracks coming from a different db ? if so, compute the intersection of metadata columns between the source
              // and destination db, so that the insertion can use it later to insert the proper data in the destination db
              if (this.guid != "songbird")
              {
                mediaLibrary.getColumnInfo();
                var destcols = queryObj.getResultObject();
                
                var thisPlaylist = playlistManager.getPlaylist(this.table, this.m_queryObj);
                thisPlaylist.getColumnInfo();
                var srccols = this.m_queryObj.getResultObject();
                
                for (var i=0;i<destcols.getRowCount();i++)
                {
                  var columnid = destcols.getRowCell(i, 0);
                  if (columnid == "uuid" || columnid == "url" || columnid == "service_uuid" || columnid == "id" || columnid == "row_id") continue;
                  for (var j=0;j<srccols.getRowCount();j++)
                  {
                    if (columnid == srccols.getRowCell(j, 0))
                    {
                      metadataintersection_ids.push(columnid);
                      metadataintersection_cols.push(this.tree.columns.getNamedColumn(columnid));
                      break;
                    }
                  }
                }
              }
              queryObj.resetQuery();
              var params = Array(mediaLibrary, thePlaylist, urlcolumn, uuidcolumn, metadataintersection_ids, metadataintersection_cols);
              this._addto_added_count = 0;
              this._addto_existed_count = 0;
              if (this.table != "library" && this.tree.view.selection.getRangeCount() == 0)
                this.processAll(this.processSelection_addToPlaylistOrLibrary, params);
              else
                this.processSelection(this.processSelection_addToPlaylistOrLibrary, params);
                
              queryObj.execute();
            }
            else
            {
              alert("playlist.xml - addToPlaylistOrLibrary - no url column");
              return;
            }
          }
          catch( err )
          {
            alert( "playlist.xml - addToPlaylistOrLibrary - " + err );
          }
        ]]>
      </body>
    </method>
    
    <method name="processSelection">
      <parameter name="func"/>
      <parameter name="params"/>
      <body>
        <![CDATA[
          try
          {
            var rangeCount = this.tree.view.selection.getRangeCount();
            for (var i=0; i < rangeCount; i++) 
            {
              var start = {};
              var end = {};
              this.tree.view.selection.getRangeAt( i, start, end );
              for( var c = start.value; c <= end.value; c++ )
              {
                if (c > this.tree.view.rowCount) 
                {
                  continue; 
                }
                func(this, c, params);
              }
            }
            this.tree.view.selection.clearSelection();
          }
          catch( err )
          {
            alert( "playlist.xml - processSelection - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="processAll">
      <parameter name="func"/>
      <parameter name="params"/>
      <body>
        <![CDATA[
          try
          {
            var rowCount = this.tree.view.rowCount;
            for (var i=0; i < rowCount; i++) 
            {
              func(this, i, params);
            }
          }
          catch( err )
          {
            alert( "playlist.xml - processAll - " + err );
          }
        ]]>
      </body>
    </method>
    
    <method name="processSelection_addToPlaylistOrLibrary">
      <parameter name="_this"/>
      <parameter name="item"/>
      <parameter name="params"/>
      <body>
        <![CDATA[
          try
          {
            var mediaLibrary = params[0];
            var thePlaylist = params[1];
            var urlcolumn = params[2];
            var uuidcolumn = params[3];
            var metadataintersection_ids = params[4];
            var metadataintersection_cols = params[5];
            
            var guid;
            
            // metadataintersection is empty if the destination library is the same as the source library
            if (uuidcolumn && metadataintersection_cols.length == 0) 
            {
              guid = _this.tree.view.getCellText( item, uuidcolumn );
              _this._addto_existed_count++;
            }
            else
            {
              var url = _this.tree.view.getCellText( item, urlcolumn );
              if (metadataintersection_cols.length != 0)
              {
                var values = new Array();
                var r = mediaLibrary.findByURL(url);
                if (r && r != "") 
                {
                  _this._addto_existed_count++;
                }
                else
                {
                  _this._addto_added_count++;
                }
                // source playlist has its own library, use the intersection of available metadata in source and 
                // destination libraries as the metadata for the insertion in the the destination library 
                for (var i=0;i<metadataintersection_cols.length;i++)
                {
                  values.push(_this.tree.view.getCellText( item, metadataintersection_cols[i] ));
                }
                guid = mediaLibrary.addMedia( url, metadataintersection_ids.length, metadataintersection_ids, values.length, values, false, true );
              }
              else
              {
                // item is already in destination library, but we didnt have a uuid column, 
                // ask the library for the guid associated with this url
                guid = mediaLibrary.addMedia( url, 0, null, 0, null, false, true );
                _this._addto_existed_count++;
              }
            }
            
            if (thePlaylist) 
            {
              thePlaylist.addByGUID( guid, "songbird", -1, false, true );
            }
          }
          catch( err )
          {
            alert( "playlist.xml - processSelection_addToPlaylistOrLibrary - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="removeTracks">
      <body>
        <![CDATA[
          try
          {
            const PlaylistManager = new Components.Constructor("@songbirdnest.com/Songbird/PlaylistManager;1", "sbIPlaylistManager");
            if (this.table == "library")
            {
              var column = this.tree.columns.getNamedColumn("uuid");
              if (column)
              {
                const MediaLibrary = new Components.Constructor("@songbirdnest.com/Songbird/MediaLibrary;1", "sbIMediaLibrary");
                var library = new MediaLibrary();    
                library = library.QueryInterface(Components.interfaces.sbIMediaLibrary);
                library.setQueryObject(this.m_queryObj);

                var params = Array(library, column);
                this.processSelection(this.processSelection_removeTracksFromLibrary, params);
                this.m_queryObj.execute();
                // problem: playlists containing the tracks we just removed now show these items as blank, we could prompt the user to tell him that these tracks
                //          are in existing playlists and ask for confirmation, then remove the items from the playlists as well, but it might get very slow for 
                //          lots of selected items/lots of playlists (even just the check may be real slow)
              }
              else
              {
                alert("playlist.xml - removeTracks - no uuid column for library");
                return;
              }
            }
            else
            {
              var playlistmgr = new PlaylistManager();
              playlistmgr = playlistmgr.QueryInterface(Components.interfaces.sbIPlaylistManager);
              
              var playlist = playlistmgr.getPlaylist(this.table, this.m_queryObj);
              
              if (playlist)
              {
                column = this.tree.columns.getNamedColumn("uuid");
                if (column)
                {
                  var params = Array(playlist, column);
                  this.processSelection(this.processSelection_removeTracksFromPlaylist, params);
                  this.m_queryObj.execute();
                }
                else
                {
                  alert("playlist.xml - removeTracks - no uuid column for playlist");
                  return;
                }
              }
              else
              {
                var column = this.tree.columns.getNamedColumn("playlist_uuid");
                if ( !column )
                {
                  // Try url if no guid?
                  column = this.tree.columns.getNamedColumn("url");
                }
                if ( !column )
                {
                  // Try id if no url?
                  column = this.tree.columns.getNamedColumn("id");
                }
                if (column)
                {
                  playlist = playlistmgr.getSimplePlaylist(this.table, this.m_queryObj);
                  if (playlist)
                  {
                    var params = Array(playlist, column);
                    this.processSelection(this.processSelection_removeTracksFromSimplePlaylist, params);
                    this.m_queryObj.execute();
                  }
                  else
                  {
                    alert("playlist.xml - removeTracks - not a library, playlist, or simpleplaylist");
                    return;
                  }
                }
                else
                {
                  var text = "";
                  for ( var i = 0; i < this.tree.columns.count; i++ )
                  {
                    text += this.tree.columns.getColumnAt( i ).element.getAttribute( "label" ) + " - " + this.tree.columns.getColumnAt( i ).id + "\r\n";
                  }
                  alert( text + "playlist.xml - removeTracks - no id, url, or playlist_uuid columns for simple playlist?" );
                  return;
                }
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - removeTracks - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="processSelection_removeTracksFromLibrary">
      <parameter name="_this"/>
      <parameter name="item"/>
      <parameter name="params"/>
      <body>
        <![CDATA[
          try
          {
            var mediaLibrary = params[0];
            var column = params[1];
            var guid = _this.tree.view.getCellText( item, column );
            mediaLibrary.removeMediaByGUID(guid, true);
          }
          catch( err )
          {
            alert( "playlist.xml - processSelection_removeTracksFromLibrary - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="processSelection_removeTracksFromPlaylist">
      <parameter name="_this"/>
      <parameter name="item"/>
      <parameter name="params"/>
      <body>
        <![CDATA[
          try
          {
            var playlist = params[0];
            var column = params[1];
            var index = _this.tree.view.getCellText( item, column );
            playlist.removeByGUID(index, true);
          }
          catch( err )
          {
            alert( "playlist.xml - processSelection_removeTracksFromPlaylist - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="processSelection_removeTracksFromSimplePlaylist">
      <parameter name="_this"/>
      <parameter name="item"/>
      <parameter name="params"/>
      <body>
        <![CDATA[
          try
          {
            var playlist = params[0];
            var column = params[1];
            var value = _this.tree.view.getCellText( item, column );
            switch ( column.id )
            {
              case "id":
                playlist.removeByIndex( value, true );
                break;
              case "playlist_uuid":
                playlist.removeByGUID( value, true );
                break;
              case "url":
                playlist.removeByURL( value, true );
                break;
            }
          }
          catch( err )
          {
            alert( "playlist.xml - processSelection_removeTracksFromSimplePlaylist - " + err );
          }
        ]]>
      </body>
    </method>
    
    <method name="setDnDSourceTracker">
      <parameter name="tracker"/>
      <body>
        if (this.m_dndSourceTracker == tracker) 
        {
          return;
        }
        else 
        {
          if (this.m_dndSourceTracker != null) 
          {
            this.m_dndSourceTracker.unregisterDnDSource(this);
            this.m_dndSourceTracker = null;
          }
        }
        this.m_dndSourceTracker = tracker;
        if (tracker != null) tracker.registerDnDSource(this);
      </body>
    </method>
    
    <method name="getDnDSourceIndex">
      <body>
        if (this.m_dndSourceTracker != null) return this.m_dndSourceTracker.getDnDSourceIndex(this);
        return -1;
      </body>
    </method>
    
    <method name="onDrag">
      <parameter name="evt"/>
      <body>
        <![CDATA[
          try
          {
            //
            //  Do something interesting to indicate the drag of a column?
            //

            if( this.pointInTreeRows( this.tree, evt.clientX, evt.clientY ) )
            {
              // Heheh, only drag if you're dragging a cell.  Otherwise, don't screw with the scrollbar
              this.nsDragAndDrop.startDrag(evt, this.sbIPlaylistDragObserver);
            }
          }
          catch( err )
          {
            alert( "playlist.xml - onDrag - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="getViewSummary">
      <body>
        <![CDATA[
          var ret = "";
          try
          {
            if (this.source && this.ref != "")
            {
              ret = this.guid + ";" + this.table;
              var n = this.source.getNumFilters(this.ref);
              ret += ";" + n;
              for (var i=0;i<n;i++)
                ret += ";" + this.source.getFilter(this.ref, i);
              ret += "|" + this.source.getSearchString(this.ref);
            }
          }
          catch( err )
          {
            alert( "playlist.xml - getViewSummary - " + err );
          }
          return ret;
        ]]>
      </body>
    </method>
    
    <method name="syncPlaylistIndex">
      <parameter name="scroll"/>
      <body>
        <![CDATA[
          try
          {
            // if this playlist is the currently playing one, set selection to the playing item
            if ( this.playlistRef && this.playlistRef.stringValue == this.playingRef.stringValue )
            {
              var url = this.playUrl.stringValue;
              var row = this.findUrl(url);
              if (row != -1) 
              {
                this.tree.view.selection.clearSelection();
                this.tree.view.selection.rangedSelect(row, row, true);
                if (scroll) 
                {
                  var box = this.tree.treeBoxObject;
                  box.ensureRowIsVisible(row);
                }
              }
            }
          }
          catch (err)
          {
            alert( "playlist.xml - onPlayUrlChange - " + err );
          }
        ]]>
      </body>
    </method>
    
    <method name="findUrl">
      <parameter name="url"/>
      <body>
        <![CDATA[
          try
          {
            if ( this.tree.columns ) {
              var urlcolumn = this.tree.columns.getNamedColumn("url"); 
              if (urlcolumn != null) 
              {
                var row = this.findCell(urlcolumn, url);
                return row;
              }
            }
          }
          catch (err)
          {
            alert( "playlist.xml - findUrl - " + err );
          }
          return -1;
        ]]>
      </body>
    </method>
    
    <method name="findRowIdByUrl">
      <parameter name="url"/>
      <body>
        <![CDATA[
          try
          {
            var i = this.findUrl(url);
            if (i != -1) {
              var idcolumn = this.tree.columns.getNamedColumn("row_id"); 
              if (idcolumn != null) 
              {
                var rowid = this.tree.view.getCellText( i, idcolumn );
                return rowid - 1;
              }
            }
          }
          catch (err)
          {
            alert( "playlist.xml - findRowIdByUrl - " + err );
          }
          return -1;
        ]]>
      </body>
    </method>
    
    <method name="setCellRating">
      <parameter name="row"/>
      <parameter name="col"/>
      <parameter name="rating"/>
      <body>
        <![CDATA[
          try
          {
            // Find the url column.
            var filter = "uuid";
            var filter_column = this.tree.columns ? this.tree.columns[filter] : filter;
            var filter_value = this.tree.view.getCellText( this.tree.currentIndex, filter_column );

            var the_table_column = col.id;
            var the_new_value = rating;

            var aDBQuery = Components.classes["@songbirdnest.com/Songbird/DatabaseQuery;1"].createInstance(Components.interfaces.sbIDatabaseQuery);
            var aMediaLibrary = Components.classes["@songbirdnest.com/Songbird/MediaLibrary;1"].createInstance(Components.interfaces.sbIMediaLibrary);
            
            if ( ! aDBQuery || ! aMediaLibrary)
              return;
            
            aDBQuery.setAsyncQuery(true);
            aDBQuery.setDatabaseGUID(this.guid);
            aMediaLibrary.setQueryObject(aDBQuery);
            
            aMediaLibrary.setValueByGUID(filter_value, the_table_column, the_new_value, false);
          }
          catch (err)
          {
            alert( "playlist.xml - setCellRating - " + err );
          }
          return;
        ]]>
      </body>
    </method>


    <method name="ensurePlaylistExists">
      <body>
        <![CDATA[
        var found = true;
        if (this.table.length > 0 && this.guid.length > 0) {
          found = false;
          var queryObj = Components.classes["@songbirdnest.com/Songbird/DatabaseQuery;1"].createInstance();
          queryObj = queryObj.QueryInterface(Components.interfaces.sbIDatabaseQuery);
          queryObj.setDatabaseGUID(this.guid);
          var PlaylistManager = new Components.Constructor("@songbirdnest.com/Songbird/PlaylistManager;1", "sbIPlaylistManager");
          var playlistManager = new PlaylistManager();
          playlistManager = playlistManager.QueryInterface(Components.interfaces.sbIPlaylistManager);
          playlistManager.getAllPlaylistList( queryObj );
          var resultset = queryObj.getResultObject();
          if (this.table == "library")
            found = true;
          else
            for ( var i = 0; i < resultset.getRowCount(); i++ ) {
              if ( this.table == resultset.getRowCellByColumn( i, "name" ) ) {
                found = true;
                break;
              }
            }
          
          if ( !found )
          {
            var e = document.createEvent("Events");
            e.initEvent("playlist-noplaylist", false, true);
            this.dispatchEvent(e);
          }
        }          
        return found;
        ]]>
        </body>
      </method>

    <method name="syncColumnSortIndicator">
      <body>
        <![CDATA[
          if (this.treecols) {
            var cols = this.treecols.childNodes;
            for (var i=0;i<cols.length;i++) {
              if (cols[i].getAttribute("id") == this.sortorder) {
                cols[i].setAttribute("sortDirection", (this.sortdirection == "asc") ? "ascending" : "descending");
              } else {
                cols[i].setAttribute("sortDirection", "natural");
              }
            }
          }
        ]]>
      </body>
    </method>

    <method name="bindDataRemotes">
      <body>
        <![CDATA[
          // Create and bind data remotes
          this.playingRef = SB_NewDataRemote( "playing.ref", null );
          this.playlistRef = SB_NewDataRemote( "playlist.ref", null );
          this.playUrl = SB_NewDataRemote( "faceplate.play.url", null );
        ]]>
      </body>
    </method>
    
    <method name="unbindDataRemotes">
      <body>
        <![CDATA[
          if (this.playUrl) {
            this.playUrl.unbind();
            this.playUrl = null;
          }
        ]]>
      </body>
    </method>

    <method name="resetFilterLists">
      <body>
        <![CDATA[
          var n = this.filters.length;
          for (var i=0;i<n;i++) {
            this.source.setFilter( this.ref, i, "", this.filters[i].ref, this.filters[i].column);
          }
          this.source.executeFeed( this.ref );
        ]]>
      </body>
    </method>

    <method name="sendFilterChangeEvent">
      <parameter name="event"/>
      <body>
        <![CDATA[
          var e = document.createEvent("Events");
          e.initEvent("playlist-filterchange", false, true);
          this.dispatchEvent(e);
        ]]>
      </body>
    </method>

    <method name="pointInTreeRows">
      <parameter name="tree"/>
      <parameter name="mouseX"/>
      <parameter name="mouseY"/>
        <body>
        <![CDATA[
          // Make sure the user actually double clicked on a tree cell.
          // Previously this used getCellAt() on the tree, however, it was
          // unreliable.  This code compares the mouse position with the box
          // object of the contaier of the tree's rows (which excludes the
          // column headers and scroll bar)
          var treeRows = document.getAnonymousElementByAttribute(tree, "class", "tree-rows");
          if(!treeRows) {
              return false;
          }
          var treeBodyBox = document.getAnonymousElementByAttribute(treeRows, "class", "tree-bodybox");
          if(!treeBodyBox) {
              return false;
          }
          var bo = treeBodyBox.boxObject;
          if(mouseX >= bo.x && mouseX <= (bo.x + bo.width) &&
             mouseY >= bo.y && mouseY <= (bo.y + bo.height)) {
             return true;
          }
          else {
            return false;
          }
        ]]>
        </body>
      </method>

      <method name="deselectAll">
        <body>
        <![CDATA[
          this.tree.view.selection.clearSelection();
        ]]>
        </body>
      </method>

    </implementation>
 
  </binding>

</bindings>
