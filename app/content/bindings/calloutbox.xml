<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// CopyrightÂ© 2006 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">


  <!--
  /**
   * Word bubble type box with a close button in the top right corner
   * TODO: Consider extending http://lxr.mozilla.org/mozilla1.8/source/toolkit/content/widgets/notification.xml
   */
  -->
  <binding id="callout">

    <content>
      <xul:vbox id="callout_bar" flex="1" xbl:inherits="class" >                      
        <xul:hbox id="callout_bar_content" flex="1" >
          <xul:hbox flex="20" >
            <children/>
          </xul:hbox>  
          <xul:hbox>
            <!-- TODO rename -->
            <xul:button id="sysbtn_close"  xbl:inherits="class" oncommand="close();" tooltiptext="&tooltip.hide;"/>
          </xul:hbox>
        </xul:hbox>      
        <xul:hbox>
          <xul:spacer id="callout_bar_arrow"/>
        </xul:hbox>  
      </xul:vbox>         
    </content>

   <implementation type="application/x-javascript">

     <constructor>
       <![CDATA[
       ]]>
     </constructor>

     <destructor>
       <![CDATA[
        if (this.animationInterval) {
          clearInterval(this.animationInterval);  
        }
       ]]>
     </destructor>
     
     <method name="show">
       <body>
         <![CDATA[
          this.fade(0, 0.2, 75, null);
         ]]>
       </body>
     </method>
     
     <method name="hide">
       <body>
         <![CDATA[
          this.hidden = true;
          this.style.opacity = "0;";
         ]]>
       </body>
     </method>

     <method name="fade">
       <parameter name="opacity"/>
       <parameter name="step"/>
       <parameter name="interval"/>
       <parameter name="onComplete"/>
       <body>
         <![CDATA[
          this.style.opacity = opacity + ";";
          this.hidden = false;
          var element = this;
          var startingOpacity = opacity;
          var counter = 0;
            
          var fadeStep = function() {
            opacity = startingOpacity + (step * (++counter));

            if (opacity >= 1) {
              element.style.opacity = "1;";
              clearInterval(element.animationInterval);
              if (onComplete != null) onComplete();
            } else if (opacity <= 0) {
              element.style.opacity = "0;";
              clearInterval(element.animationInterval);  
              if (onComplete != null) onComplete();
            } else {
              element.style.opacity = opacity + ";";
            }
          }
          
          this.animationInterval = setInterval(fadeStep, interval);
         ]]>
       </body>
     </method>
     
          
     <method name="close">
       <body>
         <![CDATA[
           this.hide();
         ]]>
       </body>
     </method>

   </implementation>

  </binding>
  

  <!--
  /**
   * Callout that remembers if its close button has been clicked.
   */
  -->
  <binding id="callout-once" extends="chrome://songbird/content/bindings/calloutbox.xml#callout">


   <implementation type="application/x-javascript">

     <constructor>
       <![CDATA[
        this.completed = false;
        if (!this.id || this.id == "") 
          throw("callout-once must have an id to work correctly");
        
        // Use the id of this calloutbox to determine if this message has already been seen and closed.
        this.completed = SBDataGetBoolValue("callout.once." + this.id);       
       ]]>
     </constructor>

     
     <method name="close">
       <body>
         <![CDATA[
           // Set flag to indicate that this callout should not be shown again
           SBDataSetBoolValue("callout.once." + this.id, true);
        
           this.completed = true;
           
           var callout = this;
           this.fade(1, -0.2, 75, function() {callout.hide();});
           
         ]]>
       </body>
     </method>


     
     <property name="hasBeenClosed">
      <getter>
        return this.completed;
      </getter>
    </property>

   </implementation>

  </binding>  
  
  
</bindings>

