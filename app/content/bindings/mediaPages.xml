<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE overlay [
<!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd">
<!ENTITY % songbirdDTD SYSTEM "chrome://songbird/locale/songbird.dtd">
<!ENTITY % charsetDTD SYSTEM "chrome://global/locale/charsetOverlay.dtd" >
<!ENTITY % browserDTD SYSTEM "chrome://browser/locale/browser.dtd" >
%brandDTD;
%songbirdDTD;
%charsetDTD;
%browserDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">


  <!--
    A binding that adds mediapages-related menu elements that allows selection of media pages
  -->
  <binding 
    id="mediapages-menuitems" 
    extends="chrome://songbird/content/bindings/generatedMenuItems.xml#generated-menuitems-base"
  >
    <content/>
    <implementation type="application/x-javascript">
      <constructor>
      <![CDATA[
        // NOTE: this would be much nicer in the base class but their constructor fires first!
        // We need to explicitly call onPopupShowing() here since the first
        // time this constructor is called it is after the popupshowing event
        // has fired.
        this.onPopupShowing();
      ]]>
      </constructor>

      <destructor>
      <![CDATA[
      ]]>
      </destructor>

      <!--
        Called when a child menuitem is selected.  Attempts 
        to switch media pages based on the properties of the
        menuitem.
      -->
      <method name="onCommand">
        <parameter name="item"/>
        <parameter name="event"/>
        <body>
        <![CDATA[
          try {
            if (item.mediaPage && gBrowser.currentMediaPage) {
            
              // Set the given media page as the default for the current list
              var mgr = Components.classes["@songbirdnest.com/Songbird/MediaPageManager;1"]
                                  .getService(Components.interfaces.sbIMediaPageManager);
              mgr.setPage(gBrowser.currentMediaPage.mediaListView.mediaList, item.mediaPage);
                      
              // Reload using the new page
              gBrowser.loadMediaList(
                gBrowser.currentMediaListView.mediaList,  
                event,
                null, 
                gBrowser.currentMediaListView, 
                null);
            }
            else if (item.hasAttribute("uri")) {
              gBrowser.loadURI(item.getAttribute("uri"), null, null, null, "_blank");
            }
          } catch (e) { 
            Components.utils.reportError(e);
          }
        ]]>
        </body>
      </method>

      <!--
        Populates the menupopup with a menu allowing selection
        of compatible media pages
      -->
      <!-- 
        NOTE: this function uses _addToMenu directly instead of returning an array
              of content either method is fine, and here this one probably makes
              more sense
      -->
      <method name="generateMenuItems">
        <body>
        <![CDATA[
          var mgr = Components.classes["@songbirdnest.com/Songbird/MediaPageManager;1"]
                .getService(Components.interfaces.sbIMediaPageManager);

          var mediaPagesLabel = "mediapages.label";
          try {
            mediaPagesLabel =
              this._stringBundle.GetStringFromName(mediaPagesLabel);
          } catch (e) { 
          }

          // enable switching if we have a valid media page
          // or are on a valid media page URL
          // this prevents broken media pages from being inescapable
          var pages = mgr.getAvailablePages();
          var mediaPageURL = false;
          var currentSpec = gBrowser.selectedBrowser.currentURI.spec;
          for (var i = 0; i < pages.length; i++) {
            if (currentSpec == pages[i].contentUrl) {
              mediaPageURL = true;
              break;
            }
          };
          
          if (!gBrowser.currentMediaPage && !mediaPageURL) {
            var mediaPagesMenu = document.createElement("menu");
            mediaPagesMenu.setAttribute("label", mediaPagesLabel);
            mediaPagesMenu.setAttribute("disabled", "true");
            this._addToMenu(document.createElement("menuseparator"));
            this._addToMenu(mediaPagesMenu);
            return;
          }
          
          var ml = gBrowser.currentMediaPage.mediaListView.mediaList;

          // these properties are used to customize the menu based on the space you
          // want to allocate for it
          var hideTitle = this.getAttribute("hideMediaListTitle");
          var hideGetMore = this.getAttribute("hideGetMore");

          if (hideTitle != "true") {
            // Add the 'Media Views' menu

            // create the menu to add to the parent
            var mediaPagesMenu = document.createElement("menu");
            mediaPagesMenu.setAttribute("label", mediaPagesLabel);

            // create the popup menu that will hold the mediapage menuitems
            var mediaPagesPopup = document.createElement("menupopup");
            mediaPagesMenu.appendChild(mediaPagesPopup);

            // add to the parent
            this._addToMenu(document.createElement("menuseparator"));
            this._addToMenu(mediaPagesMenu);
          }

          var pages = mgr.getAvailablePages(ml);
          
          // Trim the media list GUID from the querystring so that we can
          // match it to the list of pages.  The guid is added by the
          // tab browser so that each page instance shows up in the history
          // service. This is unfortunate.   
          var currentPageURL = gBrowser.currentURI
                                      .spec.replace(/[\?&]libraryGUID.*$/, "");

          
          // Attach a menuitem for each compatible layout
          while (pages.hasMoreElements()) {
            var page = pages.getNext()
            page.QueryInterface(Components.interfaces.sbIMediaPageInfo);
            
            var item = this._makeMenuItem(page);
            
            if (page.contentUrl == currentPageURL) {
              item.setAttribute("checked", "true");
            }
            else {
              item.setAttribute("checked", "false");
            }
         
            if ( hideTitle ) { 
              // we hide the title for the popup menu, so add it directly 
              this._addToMenu(item);
            } else {
              mediaPagesPopup.appendChild(item);
            }
          }
          
          // If the current window has a browser/servicepane, then add a link
          // to get more media pages.
          // NOTE: This is brittle. Please change this once we have a proper API.
          if (typeof(gBrowser) != "undefined" && hideGetMore != "true") {
            this._addToMenu(document.createElement("menuseparator"));
            this._addToMenu(this._makeGetMore());
          }
        ]]>
        </body>
      </method>

      <!-- Return a menuitem element for the given page -->
      <method name="_makeMenuItem">
        <parameter name="page"/>
        <body>
        <![CDATA[
          var item = document.createElement("menuitem");
          item.setAttribute("label", page.contentTitle);
          item.setAttribute("name", "mediapage.item");
          item.setAttribute("type", "radio");
          item.mediaPage = page;
          return item;
        ]]>
        </body>
      </method>
      
      <!-- Adds a "Get More" menu item that links to the addons site -->
      <method name="_makeGetMore">
        <body>
        <![CDATA[
          var item = document.createElement("menuitem");

          var getMoreText;
          try {
            getMoreText = this._stringBundle.GetStringFromName("mediapages.getmore");
          } catch (e) { 
            getMoreText="Error";
            dump("\n\n\nmediaPages.xml:  Error getting menu text from songbird.properties" +
                 " bundle\n"+ e + "\n"); 
          }
          
          var formatter = Components.classes["@mozilla.org/toolkit/URLFormatterService;1"]
                                    .getService(Components.interfaces.nsIURLFormatter);
          var getMoreURL = formatter.formatURLPref("songbird.url.addons.mediaviews");
          item.setAttribute("label", getMoreText);
          item.setAttribute("name", "menu.getmore");
          item.setAttribute("uri", getMoreURL);
          return item;
        ]]>
        </body>
      </method>
    </implementation>
  </binding>
  <binding id="mediapages-button">
    <content>
      <xul:toolbarbutton id="mediapages-button" class="toolbarbutton-1 chromeclass-toolbar-additional"
                         anonid="mediapages-button"
                         label="&tooltip.browser.mediapages;"
                         tooltiptext="&tooltip.browser.mediapages;"
                         type="menu">
          <xul:menupopup orient="vertical">
            <xul:sb-mediapages-menuitems hideMediaListTitle="true"/>
          </xul:menupopup>
      </xul:toolbarbutton>
    </content>
    <implementation>
      <constructor><![CDATA[
        var button = document.getAnonymousElementByAttribute(this, "anonid", "mediapages-button");
        this.disabler = function() {
          
          // enable switching if we have a valid media page
          // or are on a valid media page URL
          // this prevents broken media pages from being inescapable
          var mgr = Components.classes["@songbirdnest.com/Songbird/MediaPageManager;1"]
                                  .getService(Components.interfaces.sbIMediaPageManager);
          var pages = mgr.getAvailablePages();
          var mediaPageURL = false;
          var currentSpec = gBrowser.selectedBrowser.currentURI.spec;
          for (var i = 0; i < pages.length; i++) {
            if (currentSpec == pages[i].contentUrl) {
              mediaPageURL = true;
              break;
            }
          };
          
          if (gBrowser.currentMediaPage || mediaPageURL) {
            button.setAttribute("disabled", "false");
          }
          else {
            button.setAttribute("disabled", "true");
          }
        };
        gBrowser.addEventListener('TabContentChange', this.disabler, false); 
      ]]></constructor>
      <destructor><![CDATA[
        gBrowser.removeEventListener('TabContentChange', this.disabler, false);
      ]]></destructor>
    </implementation>
  </binding>
</bindings>


