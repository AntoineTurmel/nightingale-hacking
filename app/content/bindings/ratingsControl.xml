<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

          
  <binding id="sb-rating">
    <content value="0">
        <xul:hbox class="rating-box" flex="1">
        <xul:spacer flex="1"/>
          <xul:stack mousethrough="never">
            <xul:spacer class="rating-background"/>
            <xul:spacer sid="stars" class="rating-stars" xbl:inherit="value" />
          </xul:stack>
        <xul:spacer flex="1"/>
        </xul:hbox>
    </content>
    <implementation>
      <field name="stars">document.getAnonymousElementByAttribute(this, 'sid', 'stars');</field>
      <constructor>
        <![CDATA[
          // assign a default value
          this.oldValue = 0;
          this.lastStar = -1;
        ]]>
      </constructor>
      <property name="value">
        <getter>
          return this.getAttribute("value");
        </getter>
        <setter>
          if (!val || val == "") val = 0;
          this.setAttribute("value", val);
          this.stars.setAttribute("value", val);
        </setter>
      </property>
      <property name="disabled">
        <getter>
          return this.getAttribute("disabled") == "true";
        </getter>
        <setter>
          if (val == false || 
              val == "false" || 
              val == "" || 
              !val)
            this.removeAttribute("disabled");
          else
            this.setAttribute("disabled", val);
        </setter>
      </property>
      <method name="canEdit">
        <body>
          <![CDATA[
            return (!this.disabled && 
                    this.getAttribute("readonly") != "true");
          ]]>
        </body>
      </method>
      <method name="handleMouseEvent">
        <parameter name="event"/>
        <parameter name="type"/>
        <body>
          <![CDATA[
            // types
            const HOVER=0;
            const DOWN=1;
            const UP=2;
            
            // calculate dimensions
            var starwidth = this.stars.boxObject.width / 5;
            
            // figure out where we clicked
            var v = parseInt( ( (event.screenX - 
                                 this.stars.boxObject.screenX)
                                -1 )
                              / starwidth );

            // add 1 because star 0 is rating 1
            v = v + 1;
            
            // handle out of bounds
            if (v > 5) v = 5;
            if (v < 1) v = 1;
            
            var star = v;
            
            if (star == this.lastStar) {
              return;
            } else {
              this.lastStar = -1;
            }
              
            // if this is a DOWN event, and the old value is the 
            // same as the one clicked, remove all stars (set to 0)
            if (type == DOWN && this.oldValue == v) {
              v = 0;
            }
              
            // let the css change the background image to reflect
            // the current value
            this.value = v;
            
            // store the new value in place of the old one so
            // that it sticks when the mouse leaves the element  
            if (type == DOWN || type == UP) {
              if (this.oldValue != v) {
                this.oldValue = v;
                // notify listeners that the value changed
                var evt = document.createEvent("UIEvents");
                evt.initUIEvent("input", true, false, window, 0);
                this.dispatchEvent(evt);
              }
              // remember not to handle events until we
              // reach a different star
              this.lastStar = star;
            }
          ]]>
        </body>
      </method>
    </implementation>
    <handlers>
      <handler event="mouseover">
        <![CDATA[
          if (event.originalTarget != this.stars) return;
          if (!this.canEdit()) return;
          this.lastStar = -1;
          this.oldValue = this.value;
        ]]>
      </handler>
      <handler event="mouseout">
        <![CDATA[
          if (event.originalTarget != this.stars) return;
          if (!this.canEdit()) return;
          this.lastStar = -1;
          this.value = this.oldValue;
        ]]>
      </handler>
      <handler event="mousemove">
        <![CDATA[
          if (event.originalTarget != this.stars) return;
          if (!this.canEdit()) return;
          this.handleMouseEvent(event, 0);
        ]]>
      </handler>
      <!-- set the value on mousedown so that reaction is immediate
           and also on mouseup so that dragging works -->
      <handler event="mousedown">
        <![CDATA[
          if (event.originalTarget != this.stars) return;
          if (!this.canEdit()) return;
          this.lastStar = -1;
          this.handleMouseEvent(event, 1);
        ]]>
      </handler>
      <handler event="mouseup">
        <![CDATA[
          if (event.originalTarget != this.stars) return;
          if (!this.canEdit()) return;
          this.handleMouseEvent(event, 2);
        ]]>
      </handler>
      <handler event="keydown">
        <![CDATA[
          if (!this.canEdit()) return;
          var newv = -1;
          var oldv = parseInt(this.value);
          if (event.keyCode == 
            Components.interfaces.nsIDOMKeyEvent.DOM_VK_RIGHT) {
            newv = oldv + 1;
          } else if (event.keyCode == 
            Components.interfaces.nsIDOMKeyEvent.DOM_VK_LEFT) {
            newv = oldv - 1;
          }
          if (newv != -1) {
            if (newv > 5) newv = 5;
            if (newv < 0) newv = 0;
            if (this.value != newv) {
              this.oldValue = newv;
              this.value = newv;
              // notify listeners that the value changed
              var evt = document.createEvent("UIEvents");
              evt.initUIEvent("input", true, false, window, 0);
              this.dispatchEvent(evt);
            }
          }
        ]]>
      </handler>
    </handlers>
  </binding>

  <binding id="sb-nowplaying-rating">
    <content>
      <xul:sb-rating sbid="sb-rating-binding" />
    </content>
    <implementation>
      <constructor>
        <![CDATA[
          Components.utils.import("resource://app/jsmodules/sbProperties.jsm", this);
          Components.utils.import("resource://app/jsmodules/XPCOMUtils.jsm", this);
          Components.utils.import("resource://app/jsmodules/SBJobUtils.jsm", this);
        
          var self = this;
          this._ratingschange = function(evt) {
            self.onRatingsChange(evt);
          };
          this._ratingBinding.addEventListener("input", this._ratingschange, true);
        
          // Media list listener, used to pickup "onchange" events for media items so
          // the rating can be updated in this binding.
          this._mediaListListener = {
            _callback: this,
            
            onItemUpdated: function(aMediaList, aMediaItem, aIndex) {
              if (aMediaItem == this._callback._curMediaItem)
                this._callback.updateRatingsDisplay();
            },
            
            onItemAdded: function(aMediaList, aMediaItem, aIndex) {
            },
            
            onBeforeItemRemoved: function(aMediaList, aMediaItem, aIndex) {
            },
            
            onAfterItemRemoved: function(aMediaList, aMediaItem, aIndex) {
            },
            
            onItemMoved: function(aMediaList, aFromIndex, aToIndex) {
            },
            
            onListCleared: function(aMediaList) {
            },
            
            onBatchBegin: function(aMediaList) {
            },
            
            onBatchEnd: function(aMediaList) {
            },
            
            QueryInterface: this.XPCOMUtils.generateQI([Components.interfaces.sbIMediaListListener])
          };

          // Setup a playlist-playback listener to keep this binding in sync
          // with the current playing track
          this._playbackListener = {
            _callback: this,
          
            onStop: function() { 
            },
          
            onBeforeTrackChange: function(aItem, aView, aIndex) { 
            },
          
            onTrackChange: function(aItem, aView, aIndex) {
              this._callback.onTrackChange(aItem, aView.mediaList);
            },
            
            onTrackIndexChange: function(aItem, aView, aIndex) {
            },
            
            onBeforeViewChange: function(aView) {
            },

            onViewChange: function(aView) {
            },
          
            QueryInterface: this.XPCOMUtils.generateQI([Components.interfaces.sbIPlaylistPlaybackListener])
          };
      
          var pps = Components.classes["@songbirdnest.com/Songbird/PlaylistPlayback;1"]
                              .getService(Components.interfaces.sbIPlaylistPlayback);
          pps.addListener(this._playbackListener);
          
          if (pps.playing) {
            // read data from the currently playing item
            var view = pps.playingView;
            var item = view.getItemByIndex(pps.currentIndex);
            if (item) {
              this.onTrackChange(item, view.mediaList);
            }
          }
        ]]>
      </constructor>
      <destructor>
        <![CDATA[        
          this._ratingBinding.removeEventListener("input", this._ratingschange, true);
          this._ratingschange = null;
        
          var pps = Components.classes["@songbirdnest.com/Songbird/PlaylistPlayback;1"]
                              .getService(Components.interfaces.sbIPlaylistPlayback);
          pps.removeListener(this._playbackListener);
          this._playbackListener = null;
        ]]>
      </destructor>
      <field name="_curMediaItem">null</field>
      <field name="_curMediaList">null</field>
      <property name="_ratingBinding" readonly="true">
        <getter>
          <![CDATA[
            return document.getAnonymousElementByAttribute(this, "sbid", "sb-rating-binding");
          ]]>
        </getter>
      </property>
      <method name="onTrackChange">
        <parameter name="aMediaItem"/>
        <parameter name="aMediaList"/>
        <body>
          <![CDATA[          
            this._curMediaItem = aMediaItem;
            
            // Remove the old listener
            if (this._curMediaList != null)
              this._curMediaList.removeListener(this._mediaListListener);
            
            this._curMediaList = aMediaList;
            if (this._curMediaList)
              this._curMediaList.addListener(this._mediaListListener);
            
            this.updateRatingsDisplay();
          ]]>
        </body>
      </method>
      <method name="updateRatingsDisplay">
        <body>
          <![CDATA[
            // Make sure the media items rating information is in sync with the ratings binding
            var curRating = this._curMediaItem.getProperty(SBProperties.rating);
            this._ratingBinding.value = curRating;
          ]]>
        </body>
      </method>
      <method name="onRatingsChange">
        <parameter name="event" />
        <body>
          <![CDATA[
            if (!this._curMediaItem)
              return;
          
            // Set the new rating value to be written in the metadata job
            var newRating = this._ratingBinding.value;
            this._curMediaItem.setProperty(SBProperties.rating, newRating);

            // Don't bother writing the rating if the item is readonly, or 
            // if ratings are disabled
            // Note that it is OK to rate items that cannot be written to
            if (!this._curMediaItem.userEditable ||
                !Application.prefs.getValue("songbird.metadata.ratings.enableWriting", false)) 
            {
              return;
            }
          
            var self = this;
            this._callback = function() {
              var mediaItemArray = 
                Components.classes["@songbirdnest.com/moz/xpcom/threadsafe-array;1"]
                          .createInstance(Components.interfaces.nsIMutableArray);
                        
              mediaItemArray.appendElement(self._curMediaItem, false);

              var metadataService = 
                 Components.classes["@songbirdnest.com/Songbird/FileMetadataService;1"]                                              
                           .getService(Components.interfaces.sbIFileMetadataService);
              var job = metadataService.write(mediaItemArray);       
            
              this.SBJobUtils.showProgressDialog(job, null);
            }
          
            setTimeout(this._callback, 0);  
          ]]>
        </body>
      </method>
    </implementation>
  </binding>
</bindings>
 
