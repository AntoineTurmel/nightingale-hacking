<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2006 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the “GPL”).
// 
// Software distributed under the License is distributed 
// on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!--


    WOO HOO!! LET'S MAKE A BINDING WIDGET!!


-->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="search">
    <content>
      <xul:hbox onmousedown="onFirstMousedown();" onfocus="onFirstMousedown();">
        <xul:button 
          sbid="search.button"
          type="menu"
          xbl:inherits="id=buttonid"
          class="sb_faceplate"
          oncommand="onSearchServiceMenu(event.target);"
        >
          <xul:menupopup id="search.popup">
            <xul:menuitem id="search.popup.songbird" sid="search.item.songbird"
              label="Library" class="menuitem-iconic" image="chrome://songbird/skin/default/icon_lib_16x16.png"
            />
            <xul:menuitem id="search.popup.elbows" 
              label="elbo.ws" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/elbows.ico"
            />
            <xul:menuitem id="search.popup.google" 
              label="Google" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/google.ico"
            />
            <xul:menuitem id="search.popup.wiki" 
              label="Wikipedia" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/default.ico"
            />
            <xul:menuitem id="search.popup.yahoo" 
              label="Yahoo!" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/yahoo.ico"
            />
            <xul:menuitem id="search.popup.emusic" 
              label="eMusic" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/emusic.ico"
            />
            <xul:menuitem id="search.popup.insound" 
              label="Insound" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/insound.ico"
            />
            <xul:menuitem id="search.popup.odeo" 
              label="Odeo" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/odeo.ico"
            />
            <xul:menuitem id="search.popup.shoutcast" 
              label="Shoutcast" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/shoutcast.ico"
            />
            <xul:menuitem id="search.popup.radiotime" 
              label="Radiotime" class="menuitem-iconic" image="chrome://songbird/skin/serviceicons/radiotime.ico"
            />          
          </xul:menupopup>
        </xul:button>
         
        <xul:menulist 
          sbid="search.list"
          xbl:inherits="id=listid"
          editable="true"
          class="sb_faceplate"
          xxx_onchange="onSearchChange();"
          xxx_oncommand="onSearchChange();"
          onkeypress="onSearchKeypress( event );"
        >
          <xul:menupopup 
            sbid="search.list.popup"
            id="search.list.popup"
            onpopupshowing="onSearchPopup();"
          />
        </xul:menulist>

        <children/>
      </xul:hbox>
    </content>

   <implementation>

    <!-- CONSTRUCTION -->
    <constructor>
    <![CDATA[
    try
    {
      // Set our starting values.                              
      this.theSongbirdSearchSelection = document.getAnonymousElementByAttribute( this, "sid", "search.item.songbird" );
      this.theCurrentSearchSelection = this.theSongbirdSearchSelection;
      if ( this.theCurrentSearchSelection )
      {
        this.button.setAttribute( "image", this.theCurrentSearchSelection.getAttribute( "image" ) );
      }

      this.editIdleInterval = null;
      
      // Stuff us into the document context so we can find us from an interval callback
      document.__SEARCH_WIDGET__ = this;
      
      this.list.label = this.getDefaultSearchString();
    }
    catch ( err )
    {
      alert( err );
    }
    ]]>
    </constructor>
    
    <destructor>
    </destructor>

    <!-- DATA FIELDS -->
    <field name="button">document.getAnonymousElementByAttribute(this, 'sbid', 'search.button');</field>
    <field name="list">  document.getAnonymousElementByAttribute(this, 'sbid', 'search.list');  </field>
    <field name="popup"> document.getAnonymousElementByAttribute(this, 'sbid', 'search.list.popup'); </field>
    <field name="first_mousedown">false</field>

    <!-- DATA PROPERTIES -->
    <property name="cur_service">
      <getter>
        return this.theCurrentSearchSelection;
      </getter>
      <setter>
        // readonly, bitches!
      </setter>
    </property>
    
    <property name="is_songbird">
      <getter>
        return ( this.theCurrentSearchSelection == this.theSongbirdSearchSelection );
      </getter>
      <setter>
        // readonly, bitches!
      </setter>
    </property>

    <property name="reset">
      <getter>
        return 0;
      </getter>
      <setter>
        this.onSearchPopup();
      </setter>
    </property>

    <method name="getDefaultSearchString">
      <body>
        <![CDATA[
          var sbs = Components.classes["@mozilla.org/intl/stringbundle;1"].getService(Components.interfaces.nsIStringBundleService);
          var songbirdStrings = sbs.createBundle("chrome://songbird/locale/songbird.properties");
          var defaultsearchstring = "Search";
          try {
            defaultsearchstring = songbirdStrings.GetStringFromName("search.defaultstring");
          } catch (err) { /* ignore error, we have default strings */ }
          return defaultsearchstring;
        ]]>
      </body>
    </method>

    <!-- INTERNAL EVENT HANDLERS -->
    <method name="onFirstMousedown">
      <parameter name="event"/>
      <body>
      <![CDATA[
      try
      {
        if ( ! this.first_mousedown )
        {
          this.list.label = "";
          this.first_mousedown = true;
        }
        this.list.setAttribute( "focused", "true" );
        this.list.mInputField.focus();
        
        // Why select?  This was causing some funky behaviour..
        //this.list.mInputField.select();
      }
      catch( err )
      {
        alert( err )
      }
      ]]>
      </body>
    </method>
    
    <method name="onSearchServiceMenu">
      <parameter name="target"/>
      <body>
      <![CDATA[
      try
      {
        this.theCurrentSearchSelection = target;
        this.button.image = this.theCurrentSearchSelection.getAttribute( "image" );
        this.onSearchChange();
      }
      catch( err )
      {
        alert( err )
      }
      ]]>
      </body>
    </method>
    
    <method name="onSearchChange">
      <body>
      <![CDATA[
      try
      {
        var empty_space = " ";
        var search_term = this.list.label;
        if ( ( search_term.length > 0 ) && ( search_term != empty_space ) )
        {          
          this.sendSearchEvent();
          metrics_inc("searchwidget", document.__SEARCH_WIDGET__.theCurrentSearchSelection.getAttribute("id"), null);
          
          // Keep last 4 search terms for display in popup
          var recentSearches = SB_NewDataRemote( "searchwidget.recentstrings", null ); 
          searchStrings = recentSearches.stringValue.split("\n");
          if (searchStrings.indexOf(search_term) == -1) 
          {
            if (searchStrings.length > 3 || (searchStrings.length == 1 && searchStrings[0] == ""))
            {
              searchStrings.pop();
            }
            searchStrings.unshift(search_term);
            recentSearches.stringValue = searchStrings.join("\n");
            this.onSearchPopup();
          }
        }
        else
        {
          // Is the term now empty?
          this.list.selectedIndex = -1;
          this.list.label = "";
        }
      }
      catch( err )
      {
        alert( err )
      }
      ]]>
      </body>
    </method>
    
    <method name="onSearchKeypress">
      <parameter name="evt"/>
      <body>
      <![CDATA[
      try
      {
        switch ( evt.keyCode )
        {
          case 27: // Esc
            this.list.label = ""; // Clear it
            // Fallthru
          case 13: // Return
            this.onSearchChange();
            this.list.mInputField.select();
            break;      
          default:
            if ( this.editIdleInterval )
            {
              clearInterval( this.editIdleInterval );
            }
            this.editIdleInterval = setInterval( this.onSearchEditIdle, 1000 );
            break;      
        }
      }
      catch( err )
      {
        alert( err )
      }
      ]]>
      </body>
    </method>
    
    <method name="onSearchEditIdle">
      <body>
      <![CDATA[
      try
      {
        // WOO HOO.  YAY FOR GLOBAL DATA POLLUTING MY DOCUMENT OBJECT!!
        if ( document.__SEARCH_WIDGET__.theCurrentSearchSelection == document.__SEARCH_WIDGET__.theSongbirdSearchSelection )
        {
          // Only do key timeouts when the library is selected
          document.__SEARCH_WIDGET__.sendSearchEvent();
          metrics_inc("searchwidget", document.__SEARCH_WIDGET__.theCurrentSearchSelection.getAttribute("id"), null);
        }
        clearInterval( document.__SEARCH_WIDGET__.editIdleInterval );
      }
      catch( err )
      {
        alert( err )
      }
      ]]>
      </body>
    </method>

    <method name="onSearchPopup">
      <body>
      <![CDATA[
      try
      {
        var empty_space = " ";

        var prev_sel = this.list.selectedIndex;
        var prev_label = this.list.label;
        
        var modified = false;
        
  
        // Look for metadata that might be worth searching
        var playbackURL = SBDataGetStringValue( "metadata.url" );
        if ( playbackURL.length )
        {

          this.list.removeAllItems();
          
          var aDBQuery = new sbIDatabaseQuery();
          aDBQuery.setAsyncQuery(false);
          aDBQuery.setDatabaseGUID("songbird");
          aDBQuery.addQuery('select title, artist, album, genre from library where url="' + playbackURL + '"' );
          var ret = aDBQuery.execute();
          var resultset = aDBQuery.getResultObject();
          
          // Go through and see if there is anything upon which to search.
          var ccount = resultset.getColumnCount();
          var rowcount = resultset.getRowCount();
          
          for(var i = 0; i < rowcount; i++)
          {
            for(var j = 0; j < ccount; j++)
            {
              // LAME.  If I append a totally blank item it is autoselected.
              var value = "" + resultset.getRowCell(i, j);
              if ( ! value.length )
              {
                value = " ";
                // A unique number of blank spaces to ensure that the metadata column is preserved
                for ( var k = 0; k < j; k++ )
                {
                  value += empty_space; 
                }
              }
              this.list.appendItem( value, null, null )
              //retval = true;
              modified = true;
            }
          } 
        }
        
        
        // Add previous searches
        var recentSearches = SBDataGetStringValue( "searchwidget.recentstrings" ); 
        if (recentSearches.length)
        {
          if (!modified) 
          {
            this.list.removeAllItems();
          }
          else 
          {
            var item = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menuseparator");
            this.list.menupopup.appendChild(item);
          }
          
          recentSearches = recentSearches.split("\n");
          for (var i = 0; i < recentSearches.length; i++)
          {
            this.list.appendItem( recentSearches[i], null, null )
          }
          
          modified = true;
        }
        
        
        // If the list was modified, fix/restore the selected item
        if (modified) 
        {
          this.list.selectedIndex = prev_sel;
          if ( prev_sel == -1 )
          {
            // Reset the label if it's a hand-edited label.
            this.list.label = prev_label;
          }
        }
      }
      catch( err )
      {
        alert( " search.xml:onSearchPopup" + err )
      }
      ]]>
      </body>
    </method>

    <!-- EXTERNAL EVENT DISPATCH -->
    <method name="sendSearchEvent">
      <parameter name="which"/>
      <body>
      <![CDATA[
      try
      {
        if ( this.list.label == "migmigmig" )
        {
          alert( ".gge retsaE" );
        }
        var e = document.createEvent("Events");
        e.initEvent("search", false, true);
        this.dispatchEvent(e);
      }
      catch( err )
      {
        alert( err )
      }
      ]]>
      </body>
    </method>

   </implementation>
 
  </binding>

</bindings>
