<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->


<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">


  <!--
    A menupopup that allows selection of feathers skin and layout
    
    TODO:
    * Indicate selected layout at top level using CSS
  -->
  <binding id="feathers-menupopup" 
           extends="chrome://global/content/bindings/popup.xml#popup">
    <implementation type="application/x-javascript">
      <constructor>
        <![CDATA[
          this._feathersManager = Components.classes['@songbirdnest.com/songbird/feathersmanager;1']
                                     .getService(Components.interfaces.sbIFeathersManager);
          this._currentLayout = null;
          this._currentSkin = null;
          
          // Get the songbird string bundle.  Can't use dtd to localize dynamically
          // generated menuitems.
          var stringBundleService =
              Components.classes["@mozilla.org/intl/stringbundle;1"]
                        .getService(Components.interfaces.nsIStringBundleService);
          this._stringBundle = stringBundleService.createBundle( 
                      "chrome://songbird/locale/songbird.properties" );
        ]]>
      </constructor>

      <destructor>
        <![CDATA[
          this._feathersManager = null;
          this._currentLayout = null;
          this._currentSkin = null;
          this._stringBundle = null;
        ]]>
      </destructor>

      <!--
        Called just before the popup appears.
      -->
      <method name="onPopupShowing">
        <body>
          <![CDATA[
            this._cleanMenu();
            this._buildFeathersMenu();
          ]]>
        </body>
      </method>


      <!--
        Called when a child menuitem is selected.  Attempts 
        to switch feathers based on the properties of the
        menuitem.
      -->
      <method name="onCommand">
        <parameter name="item"/>
        <body>
          <![CDATA[
            switch (item.getAttribute("name")) {

              case "feathers.getmore":
                var formatter = Components.classes["@mozilla.org/toolkit/URLFormatterService;1"]
                                          .getService(Components.interfaces.nsIURLFormatter);
                var getMoreURL = formatter.formatURLPref("extensions.getMoreThemesURL");
                gBrowser.loadURI(getMoreURL);
                break;
                
              case "feathers.item":
                var layoutURL = item.getAttribute("layoutURL"); 
                var skinName = item.getAttribute("skinName");
                this._feathersManager.switchFeathers(layoutURL, skinName);
                break;
                
              default:
                dump("feathers.xml: feathers menu oncommand: unknown menu item\n");
                break;
            }          
          ]]>
        </body>
      </method>


      <!-- Get rid of all the children of this menupopup -->
      <method name="_cleanMenu">
        <body>
          <![CDATA[
            var children = this.childNodes;
            for (var i = children.length - 1; i >= 0; --i) {
              this.removeChild(children[i]);
            }
          ]]>
        </body>
      </method>


      <!--
        Populates the this menupopup with a menu allowing selection
        of compatible skins and layouts.
      -->
      <method name="_buildFeathersMenu">
        <body>
          <![CDATA[
            try {  
              
              this._currentLayout = this._feathersManager.currentLayoutURL; 
              this._currentSkin = this._feathersManager.currentSkinName;

              var className = this.parentNode.getAttribute("class");
                            
              // Add a menu for each layout
              var layouts = this._enumToArray(this._feathersManager.getLayoutDescriptions(), 
                                    Components.interfaces.sbILayoutDescription);
              for (var i=0; i < layouts.length; i++) {
                var layout = layouts[i];
                
                // Get all skins for this layout
                var skins = this._enumToArray(this._feathersManager.getSkinsForLayout(layout.url), 
                                        Components.interfaces.sbISkinDescription);

                // Skip layouts with no compatible skins
                if (skins.length == 0) continue;
                
                // Build a menu for this layout
                var layoutMenu = this._makeLayoutMenu(layout);
                
                // Attach a menuitem for each compatible skin
                for (var j = 0; j < skins.length; j++) {
                  var item = this._makeSkinMenuItem(layout, skins[j]);
                  layoutMenu.firstChild.appendChild(item);
                }
                
                this.appendChild(layoutMenu);
              }
              
              // If the current window has a browser/servicepane, then add a link
              // to get more feathers.
              // NOTE: This is brittle. Please change this once we have a proper API.
              if (typeof(gBrowser) != "undefined") {
                this._appendGetMoreFeathers();
              }
            } catch (e) {
              dump( "Feathers MenuPopup XBL: Error in _buildFeathersMenu: " + e.toString()  + "\n");
            }
          ]]>
        </body>
      </method>


      <!-- Return a menu with menupopup for the given layout -->
      <method name="_makeLayoutMenu">
        <parameter name="layout"/>
        <body>
          <![CDATA[
            var menu = document.createElement("menu");
            menu.setAttribute("label", layout.name);
            menu.setAttribute("layoutURL", layout.url);

            // TODO: Should probably indicate which 
            // layout is currently selected.  This will
            // have to be done via an attribute and CSS,
            // as "checked" doesn't seem to work for menu
            // elements
            /*
            menu.setAttribute("type", "checkbox");
            if (this._currentLayout == layout.url) {
              menu.setAttribute("checked", "true");
            }
            */
            var menupopup = document.createElement("menupopup");
            menu.appendChild(menupopup);

            return menu;
          ]]>
        </body>
      </method>


      <!-- Return a menuitem element for the given skin-layout pair -->
      <method name="_makeSkinMenuItem">
        <parameter name="layout"/>
        <parameter name="skin"/>
        <body>
          <![CDATA[
            var item = document.createElement("menuitem");
            item.setAttribute("label", skin.name);
            item.setAttribute("name", "feathers.item");
            item.setAttribute("skinName", skin.internalName);
            item.setAttribute("layoutURL", layout.url);
            item.setAttribute("type", "radio");
            if (this._currentLayout == layout.url 
                && this._currentSkin == skin.internalName) 
            {
              item.setAttribute("checked", "true");
            }
            return item;
          ]]>
        </body>
      </method>

      
      <!-- Adds a "Get More" menu item that links to the addons site -->
      <method name="_appendGetMoreFeathers">
        <body>
          <![CDATA[
            this.appendChild(document.createElement("menuseparator"));
            var item = document.createElement("menuitem");

            var getMoreText;
            try {
              getMoreText = this._stringBundle.GetStringFromName("feathers.getmore");
            } catch (e) { 
              getMoreText="Error";
              dump("\n\n\nfeathers.xml:  Error getting menu text from songbird.properties" +
                   " bundle\n"+ e + "\n"); 
            }
            
            item.setAttribute("label", getMoreText);
            item.setAttribute("name", "feathers.getmore");
            this.appendChild(item);
          ]]>
        </body>
      </method>
      

      <!-- Helper to convert an nsISimpleEnumerator into a js array -->
      <method name="_enumToArray">
        <parameter name="enumerator"/>
        <parameter name="iface"/>
        <body>
          <![CDATA[
            var results = [];
            while (enumerator.hasMoreElements()) {
              results.push(enumerator.getNext().QueryInterface(iface));
            }
            return results;
          ]]>
        </body>
      </method>

    </implementation>
    
    <handlers>
      <handler event="command">
        <![CDATA[
          this.onCommand(event.target);
          
          // We've handled this event, so prevent
          // others from hearing about it.
          event.stopPropagation();
          event.preventDefault();
        ]]>
      </handler>
      <handler event="popupshowing">
        <![CDATA[
          if (event.target == this) {
            this.onPopupShowing();
          }
        ]]>
      </handler>
      <handler event="popuphidden">
        <![CDATA[        
          if (event.target == this) {
            // Should we do anything here?
          }
        ]]>
      </handler>
    </handlers>
  </binding>







  <!--
   Clickhold button that embeds the feathers-menupopup menu. When clicked
   it will attempt to revert to the previously selected feathers.
  -->
  <binding id="feathers-togglebutton">
    <content>
      <xul:sb-clickhold-button anonid="clickhold"  
                 xbl:inherits="position,popupanchor,popupalign"
                 class="sb-feathers-toggle-button"
                 menupopuptype="feathers"/>
    </content>
    <implementation type="application/x-javascript">
      <constructor>
        <![CDATA[
          this._feathersManager = Components.classes['@songbirdnest.com/songbird/feathersmanager;1']
                                     .getService(Components.interfaces.sbIFeathersManager);
                                     
          this._applyClickholdTooltip();
        ]]>
      </constructor>

      <destructor>
        <![CDATA[
          this._feathersManager = null;      
        ]]>
      </destructor>

      <!--
        Called when the clickhold button is clicked.  
      -->
      <method name="switchFeathers">
        <parameter name="layoutURL"/>
        <parameter name="skinName"/>
        <body>
          <![CDATA[            
            // Attempt to switch feathers
            try {
              this._feathersManager.switchFeathers(layoutURL, skinName);
            } catch (e) {
              dump("feathers.xml#feathers-togglebutton: Unable to revert to the " +
                   "fallback feathers [" + layoutURL + "], [" + skinName +
                   "].  This should never happen. Someone modified the " +
                   " default feathers and forgot to change sbFeathersManager.js\n" +
                   " Error: " + e.toString() + "\n");  
            }
             
          ]]>
        </body>
      </method>
            
      <!--
        Creates a tooltip for the clickhold button.
      -->
      <method name="_applyClickholdTooltip">
        <body>
          <![CDATA[
            // Get the songbird string bundle. 
            var stringBundleService =
                Components.classes["@mozilla.org/intl/stringbundle;1"]
                          .getService(Components.interfaces.nsIStringBundleService);
            var stringBundle = stringBundleService.createBundle( 
                 "chrome://songbird/locale/songbird.properties" );             
             
            // Try to create the tooltip
            var tooltip;
            try {
              tooltip = stringBundle.GetStringFromName("feathers.switchfeathers");              
            } catch (e) { 
              tooltip="[Localization Error] Switch Feathers";
              dump("\n\n\nfeathers.xml:  Error getting clickhold tooltip from " +
                   "songbird.properties bundle\n"+ e + "\n"); 
            }

            // Get the clickhold
            var clickhold = document.getAnonymousElementByAttribute(this,
                                                       'anonid', 'clickhold');


            // Now add to the tooltip the feathers that will be selected
            // when the button is pressed.

            // Requesting the previous feathers will trigger the FeathersManager's
            // lazily metadata loading.
            // We do not want to block the UI from appearing, so we delay the final  
            // tooltip creation step until after the binding is constructed.
            
            var finishClickholdTooltip = function finishClickholdTooltip(feathersManager) {
              // Figure out which feathers were previously active
              var skin = feathersManager.getSkinDescription(
                              feathersManager.previousSkinName);
              var layout = feathersManager.getLayoutDescription(
                              feathersManager.previousLayoutURL);
              tooltip += " (" + layout.name + " / " + skin.name + ")";
              clickhold.setAttribute("tooltiptext", tooltip);  
            };
            setTimeout(finishClickholdTooltip, 1000, this._feathersManager);
          ]]>
        </body>
      </method>


    </implementation>
    <handlers>
      <handler event="command">
        <![CDATA[
                    
          // Special hack to reload the current window.
          // This is to make CSS testing a bit easier.
          if (event.altKey || event.ctrlKey | event.metaKey | event.shiftKey) {
            var layoutURL = this._feathersManager.currentLayoutURL;
            var skinName = this._feathersManager.currentSkinName;
            var chromeFeatures = "chrome,modal=no,toolbar=yes,popup=no";    
            var showChrome = this._feathersManager.isChromeEnabled(layoutURL, skinName);
            if (showChrome) {
               chromeFeatures += ",resizable=yes";
            } else {
               chromeFeatures += ",titlebar=no";
            }
            // Open the new player window
            var newMainWin = window.open(layoutURL, "", chromeFeatures);
            window.close();
            newMainWin.focus();
            
          // Otherwise just restore the previous feathers
          } else {
						// Get the previously active (or default) skin and layout
						var layoutURL = this._feathersManager.previousLayoutURL;
						var skinName = this._feathersManager.previousSkinName;
						  
						this.switchFeathers(layoutURL, skinName);
          }
        ]]>
      </handler>
    </handlers>
  </binding>
  
</bindings>


