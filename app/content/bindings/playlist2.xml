<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="playlist2">
    <content>
      <stack flex="1" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
      <vbox sbid="loading_box" pack="end" align="right" flex="1" class="sb_faceplate">
          <vbox id="loading_box" class="sb_faceplate" flex="1">
            <label id="loading_text" flex="1" value=""/>
          </vbox>
        </vbox>
        <vbox flex="1" class="sb_faceplate" style="margin: 0px;padding: 0px;">
          <!-- Playlist Filters -->
          <hbox sbid="filter_parent" style="min-height: 60px;" flex="1" hidden="false">
          </hbox>

          <sb-smart-splitter
            id="horz_splitter"
            sbid="filter_splitter"
            state="open"
            collapse="before"
            resizebefore="closest"
            resizeafter="closest"
            hidden="true"
            metricscategory="player"
            metricsid="collapse.library"
          >
            <grippy/>
          </sb-smart-splitter>

          <!--
            onscroll="onPlaylistScroll( event );"
            -->
          <!-- Playlist Tree -->
          <tree
            xbl:inherits="enableColumnDrag=enableColumnDrag,hidecolumnpicker=hidecolumnpicker"
            id="playlist_tree"
            sbid="playlist_tree"
            flex="3"
            onselect="_onPlaylistSelectClick(event);"
            onclick="_onPlaylistClick(event);"
            ondblclick="_onPlaylistDblClick(event);"
            oncontextmenu="_onPlaylistContextClick(event);"
            onkeypress="_onPlaylistKeypress(event);"
            ondraggesture="_onDragGesture(event);"
            ondragover="_onDragOver(event);"
            ondragdrop="_onDragDrop(event);"
          >
            <treecols sbid="treecols"/>
            <treechildren/>
          </tree>

          <!-- Playlist Toolbar -->
          <hbox id="playlist_toolbar_bkg" sbid="playlist_toolbar">
            <hbox id="playlist_toolbar" sbid="toolbar_parent" flex="1" oncommand="onToolbarCommand( event )" style="overflow: hidden;">
            </hbox>
          </hbox>

          <!-- Popupset -->
          <popupset>
            <!-- Context Popup -->
            <popup
              id="playlist_context_popup"
              sbid="playlist_context_popup"
              onpopupshown="onPopupShown( event );"
              onpopuphidden="onPopupHidden( event );"
              oncommand="onPlaylistContextMenu( event );"
            >
              <menuseparator id="playlist_context_before" sbid="playlist_context_before"/>
              <menu id="playlist.context.search" label="&playlist.context.search;">
                <menupopup id="playlist.popup.search">
                  <menuitem id="search_popup_term" sbid="search_popup_term" label="" disabled="true"/>
                  <menuseparator/>
                  <menuitem id="search.popup.dogpile"
                    label="dogpile" class="menuitem-iconic" image="chrome://service-icons/skin/dogpile.ico"
                />
                  <menuitem id="search.popup.elbows"
                    label="elbo.ws" class="menuitem-iconic" image="chrome://service-icons/skin/elbows.ico"
                />
                  <menuitem id="search.popup.mefeedia"
                    label="mefeedia" class="menuitem-iconic" image="http://www.mefeedia.com/favicon.ico"
                />
                  <menuitem id="search.popup.google"
                    label="Google" class="menuitem-iconic" image="chrome://service-icons/skin/google.ico"
                />
                  <menuitem id="search.popup.yahoo"
                    label="Yahoo!" class="menuitem-iconic" image="chrome://service-icons/skin/yahoo.ico"
                />
                  <menuitem id="search.popup.wiki"
                    label="Wikipedia" class="menuitem-iconic" image="chrome://service-icons/skin/default.ico"
                />
                  <menuitem id="search.popup.emusic"
                    label="eMusic" class="menuitem-iconic" image="chrome://service-icons/skin/emusic.ico"
                />
<!--                  <menuitem id="search.popup.creativecommons"
                    label="Creative Commons" class="menuitem-iconic" image="http://creativecommons.org/favicon.ico"
                /> -->
                </menupopup>
              </menu>
              <menu id="playlist.context.lyrics" label="&playlist.context.lyrics;">
                <menupopup id="playlist.popup.lyrics">
                  <menuitem id="lyrics_popup_term" sbid="lyrics_popup_term" label="" disabled="true"/>
                  <menuseparator/>
                  <menuitem id="lyrics.popup.google"
                    label="Google" class="menuitem-iconic" image="chrome://service-icons/skin/google.ico"
                  />
                </menupopup>
              </menu>
              <children/>
            </popup>
          </popupset>
        </vbox>
        </stack>
        </content>

    <implementation type="application/x-javascript" name="songbird_playlist2">

      <constructor>
<![CDATA[
  // Set up the columns
  this._setupColumns();

  // Attach event handler closures
  var self = this;

  // Attach a attribute modified event handler to the treecols element.  This
  // allows us to be notified when the user drags a column (the "dragging"
  // attribute on a child element is set and it then removed) or when one is
  // resized (the width attribute changes) or when a column is hidden/shown
  // (the "hidden" attribute changes).  Save the column spec attributes when\
  // this happens.
  this._onColumnMutationClosure = function(event) {
    self._onColumnMutation(event);
  };
  this._treecols.addEventListener("DOMAttrModified",
                                  this._onColumnMutationClosure,
                                  false);

  // Install our special keyNavigate function. The signature must match the
  // keyNavigate method in tree.xml.
  this.tree.keyNavigate = this._treeKeyNavigate;
  
  // Load the drag and drop helper, if needed
  if (typeof(nsDragAndDrop) == "undefined") {
    var jsLoader = this._Cc["@mozilla.org/moz/jssubscript-loader;1"]
                           .getService(this._Ci.mozIJSSubScriptLoader);
    jsLoader.loadSubScript("chrome://global/content/nsDragAndDrop.js", null);
  }

  // Some strings
  this._str_tracksaddedto =
    this._getString("library.tracksaddedto", "tracks added to");
  this._str_trackaddedto =
    this._getString("library.trackaddedto", "track added to");
  this._str_notracksaddedto =
    this._getString("library.notracksaddedto", "No tracks added to");
  this._str_trackalreadypresent =
    this._getString("library.trackalreadypresent", "track already present");
  this._str_tracksalreadypresent =
    this._getString("library.tracksalreadypresent", "tracks already present");
]]>
      </constructor>

      <destructor>
<![CDATA[
  // Remove event listeners
  this._treecols.removeEventListener("DOMAttrModified",
                                     this._onColumnMutationClosure,
                                      false);

  for (var s = 0; s < this._splitters.length; s++) {
    this._splitters[s].removeEventListener("mousemove", this._onFilterSplitterMove, true);
    this._splitters[s].removeEventListener("mousedown", this._onFilterSplitterDown, true);
    this._splitters[s].removeEventListener("mouseup", this._onFilterSplitterUp, true);
  }
]]>
      </destructor>

      <!-- The media list view this playlist is showing -->
      <field name="mediaListView">null;</field>

      <!-- The anonymous xul tree element -->
      <field name="tree" readonly="true">
        document.getAnonymousElementByAttribute(this, "sbid", "playlist_tree");
      </field>

      <!-- Holds the text value of the cell that was right clicked -->
      <field name="context_term">""</field>

      <!-- Store the last clicked row and column so we know which cell to edit
           when we are asked to start an edit -->
      <field name="edit_row">0;</field>
      <field name="edit_col">0;</field>

      <!-- Last click time and row index.  This is used to time the slow click
           to inline edit -->
      <field name="_lastClickIndex">0</field>
      <field name="_lastClickTimestamp">0</field>

      <!-- Sortcuts for various anonymous elements -->
      <field name="_context_popup" readonly="true">
        document.getAnonymousElementByAttribute(this, "sbid", "playlist_context_popup");
      </field>
      <field name="_loading_box" readonly="true">
        document.getAnonymousElementByAttribute(this, "sbid", "loading_box");
      </field>
      <field name="_treecols" readonly="true">
        document.getAnonymousElementByAttribute(this, "sbid", "treecols");
      </field>

      <field name="_toolbarbuttons">new Array();</field>
      <field name="_menuitems">new Array();</field>

      <!-- Cached reference to the Songbird string bundle -->
      <field name="_stringbundle">null;</field>
      <field name="_commands">null;</field>

      <!-- Coordinates of the last shown content menu popup -->
      <field name="_context_x">-1</field>
      <field name="_context_y">-1</field>

      <!-- Array of the splitters between each filter list -->
      <field name="_splitters">new Array();</field>

      <!-- Used to implement draggable smart splitters -->
      <field name="_down">0</field>
      <field name="_lastpos">0</field>

      <!--
      <field name="context_item"></field>
      <field name="popup_showing">false</field>
      <field name="guid">""</field>
      <field name="table">""</field>
      <field name="type">""</field>
      <field name="base_type">""</field>
      <field name="description">""</field>
      <field name="readable_name">""</field>
      <field name="m_Library">null</field>
      <field name="m_PlaylistManager">null</field>
      <field name="source">null</field>
      <field name="_saved_selection">null</field>
      <field name="_saved_nitems">null</field>
      <field name="_dragobjects">null</field>
      <field name="_selection_key">""</field>
      <field name="_selection_key_array">""</field>
      <field name="restoring_selection">false</field>
      <field name="_addto_added_count">0</field>
      <field name="_addto_existed_count">0</field>
      <field name="paused_scanning">false</field>
      <field name="sortorder">""</field>
      <field name="sortdirection">""</field>
-->

      <!-- Drag and Drop flavors -->
      <field name="_TYPE_X_SB_MEDIAITEM"            readonly="true">
        "application/x-sb-media-item"
      </field>
      <field name="_TYPE_X_SB_MEDIAITEM_ENUMERATOR" readonly="true">
        "application/x-sb-media-item-enumerator"
      </field>

      <field name="_Cc"     readonly="true">Components.classes</field>
      <field name="_Ci"     readonly="true">Components.interfaces</field>
      <field name="_Cr"     readonly="true">Components.results</field>
      <field name="_XUL_NS" readonly="true">
        "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
      </field>

      <!-- Initialization and Control -->
      <method name="bind">
        <parameter name="mediaListView"/>
        <parameter name="commands"/>
        <parameter name="resize"/>
        <parameter name="collapse"/>
        <parameter name="refsuffix"/>
        <body>
<![CDATA[
  // Set the tree's view to the tree of the supplied media list view
  this.mediaListView = mediaListView;
  this.tree.view = mediaListView.treeView;

  // Attach our observer
  var mediaListViewTreeView = mediaListView.treeView.QueryInterface(this._Ci.sbIMediaListViewTreeView);

  var self = this;
  mediaListViewTreeView.observer = {
    canDrop: function(index, orientation) {
      return true;
    },
    drop: function(row, orientation) {
      self._dropOnTree(row, orientation);
    }
  };

  // Create the filters
  var parent = document.getAnonymousElementByAttribute(this, "sbid", "filter_parent");
  this._removeAllChildren(parent);

  var cfs = mediaListView.cascadeFilterSet;
  var length = cfs.length;
  for (var i = 0; i < length; i++) {
    var filterlist = document.createElementNS(this._XUL_NS, "filterlist2");
    filterlist.setAttribute("enableColumnDrag", "false");
    filterlist.setAttribute("hidecolumnpicker", "true");
    filterlist.setAttribute("flex", "1");
    parent.appendChild(filterlist);
    filterlist.bind(cfs, i);

    if (i < length - 1) {
      var splitter = document.createElement("sb-smart-splitter");
      splitter.setAttribute("id", "filter_splitter" );
//      splitter.setAttribute("stateid", "filter_splitter_" + this.ref );
      splitter.setAttribute("state", "open");
      splitter.setAttribute("resizebefore", "closest");
      splitter.setAttribute("resizeafter", "closest");
      splitter.setAttribute("collapse", "before");

      var grippy = document.createElement( "grippy" );
      splitter.appendChild(grippy);
      parent.appendChild(splitter);

      splitter.addEventListener("mousemove", this._onFilterSplitterMove, true);
      splitter.addEventListener("mousedown", this._onFilterSplitterDown, true);
      splitter.addEventListener("mouseup", this._onFilterSplitterUp, true);

      this._splitters.push(splitter);
    }

  }


        // Clear out the old commands
        var toolbar = document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_toolbar');
        toolbar.hidden = true;

        if (!this.forcedcommands)
        {
          // And add the new ones
          this._commands = commands;

          // See if there is one registered specifically for this table
/*
          var cmds = this.source.getPlaylistCommands( this.guid, this.table, this.type );
          if ( cmds )
          {
            this._commands = cmds;
          }
*/
        }
        else
        {
          this._commands = this.forcedcommands;
        }
        // Make sure it does what we think it does.
        if ( this._commands )
        {
          this._commands = this._commands.QueryInterface( this._Ci.sbIPlaylistCommands );
        }
        this._deferRefresh = false;
        this.refreshCommands();

        // If boolean true, read from the XUL file.
        if ( resize == true )
        {
          resize = this.getAttribute( "resize_height" );
        }
        // If an integer
        if ( parseInt( resize ) > 0 )
        {
          this.height = resize;
        }
        if (this.previousSibling) {
          if ( collapse > 0 )
          {
            this.previousSibling.setAttribute( "state", "collapsed" );
          }
          else if ( collapse != null )
          {
            this.previousSibling.setAttribute( "state", "open" );
          }
        }
      ]]>
        </body>
      </method>

      <method name="startCellEditing">
        <body>
<![CDATA[
  if (this.edit_row >= 0 && this.edit_col.index >= 0) {
    this.tree.startEditing(this.edit_row, this.edit_col);
  }
]]>
        </body>
      </method>

      <method name="_onColumnMutation">
        <parameter name="event"/>
        <body>
<![CDATA[
  if((event.attrName == "dragging" && event.newValue == "") ||
     event.attrName == "width" || event.attrName == "hidden") {
    this._saveColumnSettings();
  }
]]>
        </body>
      </method>

      <method name="_setupColumns">
        <body>
<![CDATA[
  // Read the "column-list" attribute to determine which columns are to be
  // shown and in which order
  var columnListAttr = this.getAttribute("column-list");
  var columnMap = [];
  var hasColumnSpec = false;

  if (columnListAttr) {
    hasColumnSpec = true;
    var a = columnListAttr.split(" ");
    a.forEach(function(e) {
      columnMap.push({
        property: e
      });
    });
  }

  // Read the "column-widths" property which is a space delimited list of
  // integers that correspond to the columns in the "column-list" attribute
  if (hasColumnSpec) {
  var columnWidthsAttr = this.getAttribute("column-widths");
    if (columnWidthsAttr) {
      var a = columnWidthsAttr.split(" ", columnMap.length);
      a.forEach(function(e, index) {
        if (!isNaN(e)) {
          columnMap[index].width = parseInt(e);
        }
      });
    }
  }

  // Read the "column-sort" attribute which is a property name, a space, and
  // then "a" for ascending and "d" for descending
  var columnSortAttr = this.getAttribute("column-sort");
  var columnSortProperty;
  var columnSortDirection;
  if (columnSortAttr) {
    var a = columnSortAttr.split(" ", 2);
    if (a.length == 2) {
      columnSortProperty  = a[0];
      columnSortDirection = a[1] == "a";
    }
  }

  // Get the list of columns from the property manager and add them to the
  // tree
  var allColumns = [
    "http://songbirdnest.com/data/1.0#ordinal",
    "http://songbirdnest.com/data/1.0#artistName",
    "http://songbirdnest.com/data/1.0#albumName",
    "http://songbirdnest.com/data/1.0#trackName",
    "http://songbirdnest.com/data/1.0#duration",
    "http://songbirdnest.com/data/1.0#genre",
    "http://songbirdnest.com/data/1.0#track",
    "http://songbirdnest.com/data/1.0#year",
    "http://songbirdnest.com/data/1.0#lastPlayTime",
    "http://songbirdnest.com/data/1.0#playCount",
    "http://songbirdnest.com/data/1.0#contentUrl"];
  var numColumns = allColumns.length;

  // Add the columns that have saved settings, keeping track of which column
  // were added
  var alreadyAdded = {};
  var addedColumns = 0;
  columnMap.forEach(function(columnInfo) {
    this._appendColumn(columnInfo.property,
                       columnInfo.property.split("#")[1],
                       false,
                       columnInfo.width,
                       numColumns - addedColumns > 1);
    alreadyAdded[columnInfo.property] = true;
    addedColumns++;
  }, this);

  // Add the rest of the columns from the property manager.  Note if there was
  // any saved column info, add these additional columns as hidden, otherwise
  // show them
  allColumns.forEach(function(property) {
    if (!alreadyAdded[property]) {
      this._appendColumn(property,
                         property.split("#")[1],
                         hasColumnSpec,
                         null,
                         numColumns - addedColumns > 1);
      addedColumns++;
    }
  }, this);

  // TODO: set the saved sort
]]>
        </body>
      </method>

      <method name="_appendColumn">
        <parameter name="property"/>
        <parameter name="label"/>
        <parameter name="isHidden"/>
        <parameter name="width"/>
        <parameter name="addSplitter"/>
        <body>
<![CDATA[
  var treecol = document.createElementNS(this._XUL_NS, "treecol");
  treecol.setAttribute("bind", property);
  treecol.setAttribute("label", label);
  treecol.setAttribute("flex", "1");
  if (width) {
    treecol.setAttribute("width", width);
  }

  if (isHidden) {
    treecol.setAttribute("hidden", "true");
  }

  this._treecols.appendChild(treecol);

  if (addSplitter) {
    var splitter = document.createElementNS(this._XUL_NS, "splitter");
    splitter.setAttribute("class", "tree-splitter");
    this._treecols.appendChild(splitter);
  }
]]>
        </body>
      </method>

      <method name="_saveColumnSettings">
        <body>
<![CDATA[
  var columns = [];

  var treecolList = this._treecols.getElementsByTagNameNS(this._XUL_NS,
                                                          "treecol");

  // Gather the column information for the columns that are not hidden
  for (var i = 0; i < treecolList.length; i++) {
    var col = treecolList[i];
    if (col.getAttribute("hidden") != "true") {
      columns.push({
        property: col.getAttribute("bind"),
        ordinal:  col.getAttribute("ordinal"),
        width:    col.width
      });
    }
  }

  // Sort the column list by ordinal
  columns.sort(function(a, b) { return a.ordinal - b.ordinal; });

  var columnList = [];
  var columnWidths = [];
  columns.forEach(function(col) {
    columnList.push(col.property);
    columnWidths.push(col.width)
  });

  this.setAttribute("column-list", columnList.join(" "));
  this.setAttribute("column-widths", columnWidths.join(" "));
]]>
        </body>
      </method>

      <method name="refreshCommands">
        <parameter name="stateonly"/>
        <body>
          <![CDATA[
//      try
//      {

        // Sometimes we get here before the tree is properly built.  That's bad.
        if (this.tree.view == null)
        {
          // So if we're supposed to build the items here, remember that and quit.
          if (!stateonly)
            this._laststateonly = false;
          return;
        }
        // And build them the next time it's time to refresh (this function gets called alot)
        if (!this._laststateonly)
        {
          stateonly = false;
          this._laststateonly = true;
        }

        // Convert null to bool.
        if (!stateonly)
          stateonly = false;

        // If our internal objects are out of sync, rebuild.
        if (this._toolbarbuttons.length == 0 || this._menuitems.length == 0 || this._toolbarbuttons.length != this._commands.getNumCommands())
          stateonly = false;

        // Get the parents
        var toolbar = document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_toolbar');
        var parent = document.getAnonymousElementByAttribute(this, 'sbid', 'toolbar_parent');
        var popup = document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_context_popup');
        var before = document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_context_before');

        // If deferring refresh, skip it
        if ( this._deferRefresh )
        {
          // make a note that we need to refresh when the popup goes away
          this._needRefresh = true;
          // So if we're supposed to build the items here, remember that and quit.
          if (!stateonly)
            this._laststateonly = false;
          return;
        }
        this._needRefresh = false;

        if (!stateonly) {
          toolbar.hidden = true;
          // Remove old elements
          this.removeCommands();
        }

        if ( this._commands )
        {
          // Once we get here, tell the commands who we are.
          if (!stateonly) this._commands.setPlaylist( this );

          // And make all the new stuff
          var num = this._commands.getNumCommands();
          for ( var i = 0; i < num; i++ )
          {
            var toolbarbutton;
            var menuitem;
            if (!stateonly)
            {
              // If we get here, show the toolbar
              toolbar.hidden = false;

              // What id?
              var obj_id = this._commands.getCommandId( i );

              var toolbarbutton_type = "button";
              var menuitem_type = "menuitem";

              if ( obj_id == "*separator*" )
              {
                toolbarbutton_type = "spacer";
                menuitem_type = "menuseparator";
              }

              // Create a toolbarbutton
              toolbarbutton = document.createElement( toolbarbutton_type );
              toolbarbutton.setAttribute( "id", obj_id );
              toolbarbutton.setAttribute( "sbtype", "command" ); // to find it easily, later
              toolbarbutton.setAttribute( "class", "sb_faceplate" ); // Make them fully skinned buttons.

              // And a menuitem
              menuitem = document.createElement( menuitem_type );
              menuitem.setAttribute( "id", obj_id );
              menuitem.setAttribute( "sbtype", "command" );
              menuitem.setAttribute( "class", "menuitem-iconic" ); // Icons are set in the css using the id

              // No label unless you have a label
              var cmd_text = this._commands.getCommandText( i );
              if ( cmd_text.length > 0 )
              {
                if ( cmd_text[ 0 ] == "&" )
                {
                  cmd_text = this._getString(cmd_text.substr(1, cmd_text.length), "");
                }
                toolbarbutton.setAttribute( "label", cmd_text );
                menuitem.setAttribute( "label", cmd_text );
              }

              // No label unless you have a label
              var cmd_flex = this._commands.getCommandFlex( i );
              if ( cmd_flex > 0 )
              {
                toolbarbutton.setAttribute( "flex", cmd_flex );
//                menuitem.setAttribute( "flex", cmd_flex );
              }

              // No tooltip unless you have a tooltip
              var tooltip_text = this._commands.getCommandToolTipText( i );
              if ( tooltip_text.length > 0 )
              {
                if ( tooltip_text[ 0 ] == "&" )
                {
                  tooltip_text = this._getString(tooltip_text.substr(1, tooltip_text.length), "");
                }
                ///*
                //    These cause the crashy if they're up while updating.  :(
                //
                //  toolbarbutton.setAttribute( "tooltiptext", tooltip_text );
                //  menuitem.setAttribute( "tooltiptext", tooltip_text );
                //*/
              }
            }
            else
            {
              toolbarbutton = this._toolbarbuttons[i];
              menuitem = this._menuitems[i];
            }

            if ( this._commands.getCommandEnabled( i ) )
            {
              toolbarbutton.setAttribute( "disabled", "false" );
              menuitem.setAttribute( "disabled", "false" );
            }
            else
            {
              toolbarbutton.setAttribute( "disabled", "true" );
              menuitem.setAttribute( "disabled", "true" );
            }

            // Add them to the parents
            if (!stateonly)
            {
              this._toolbarbuttons.push( toolbarbutton );
              this._menuitems.push( menuitem );
              parent.appendChild( toolbarbutton );
              popup.insertBefore( menuitem, before );
            }
          }

          if ( this._toolbarbuttons.length != this._commands.getNumCommands() )
          {
            dump( "ERROR: TOOLBARBUTTONS OUT OF SYNCH!\n" );
          }
        }
//      }
//      catch( err )
//      {
//        alert( "playlist.xml - refreshCommands - " + err );
//      }
      ]]>
        </body>
      </method>

      <method name="setDeferRefresh">
        <body>
          <![CDATA[
            try
            {
              this._deferRefresh = true;
            }
            catch( err )
            {
              alert( "playlist.xml - setDeferRefresh - " + err );
            }
          ]]>
        </body>
      </method>

      <method name="clearDeferRefresh">
        <body>
          <![CDATA[
            try
            {
              this._deferRefresh = false;
              if (this._needRefresh)
                this.refreshCommands(false);
            }
            catch( err )
            {
              alert( "playlist.xml - clearDeferRefresh - " + err );
            }
          ]]>
        </body>
      </method>

      <method name="removeCommands">
        <body>
<![CDATA[
  // Delete the toolbar commands
  var parent = document.getAnonymousElementByAttribute(this, 'sbid', 'toolbar_parent');
  var command_nodes = parent.getElementsByAttribute( 'sbtype', 'command' );
  // command_nodes is a live array, removing children from parent auto removes items from it
  while ( command_nodes.length > 0 )
  {
    var node = command_nodes.item( 0 );
    parent.removeChild(node);
  }
  this._toolbarbuttons.length = 0; // clear the array??

  // Delete the popup commands
  var popup = document.getAnonymousElementByAttribute(this, 'sbid', 'playlist_context_popup');
  command_nodes = popup.getElementsByAttribute( 'sbtype', 'command' );
  while ( command_nodes.length > 0 )
  {
    var node = command_nodes.item( 0 );
    popup.removeChild(node);
  }
  this._menuitems.length = 0; // clear the array??
]]>
      </body>
    </method>

    <method name="_onFilterSplitterMove">
      <parameter name="event"/>
      <body>
        <![CDATA[
          var state = this.getAttribute( "state" );
          if (state != "collapsed" && this._down && this._lastPos) {
            if (event.screenX > this._lastPos) { this.setAttribute("collapse", "after"); }
            if (event.screenX < this._lastPos) { this.setAttribute("collapse", "before"); }
          }
          this._lastPos = event.screenX;
        ]]>
      </body>
    </method>

    <method name="_onFilterSplitterUp">
      <body>
        this._down = 0;
        this._lastPos = null;
      </body>
    </method>

    <method name="_onFilterSplitterDown">
      <body>
        this._down = 1;
      </body>
    </method>

    <!-- Removes all children of the given DOM node -->
    <method name="_removeAllChildren">
      <parameter name="parentNode"/>
      <body>
<![CDATA[
  // Bail out if there are no children
  if (!parentNode.hasChildNodes())
    return;

  // Loop through and remove all the children
  var childNodes = parentNode.childNodes;
  var childCount = childNodes.length;
  for(var index = 0; index < childCount; index++) {
    var child = childNodes.item(0);
    parentNode.removeChild(child);
  }
]]>
      </body>
    </method>
      <method name="findCell">
        <parameter name="column"/>
        <parameter name="value"/>
        <body>
          <![CDATA[
          try
          {
            // Instead of a linear search, try a shortcut.
            if ( column.id == "row_id" )
            {
              return value - 1;
            }
            var row = this.source.getRefRowByColumnValue(this.ref, column.id, value);
            return row;
          }
          catch( err )
          {
            alert( "playlist.xml - findCell - " + err );
          }
          return -1;
        ]]>
        </body>
      </method>

      <!-- Drag Objects watcher -->

      <method name="registerDragObject">
        <parameter name="obj"/>
        <body>
          <![CDATA[
          try
          {
            if (this._dragobjects == null) this._dragobjects = Array();
            this._dragobjects.push(obj);
          }
          catch( err )
          {
            alert( "playlist.xml - registerDragObject - " + err );
          }
        ]]>
        </body>
      </method>

      <method name="startWatchingDragObjects">
        <body>
          <![CDATA[
          try {
            var dragObjects = this._dragobjects;
            if (dragObjects) {
              var count = dragObjects.length;
              for (var i = 0; i < count; i++) {
                var dragObject = dragObjects[i];
                if (dragObject.addEventListener) {
                  dragObject.addEventListener("mouseup", this.dragObjectMouseUp, true);
                  dragObject.addEventListener("mousedown", this.dragObjectMouseDown, true);
                }
              }
            }
          }
          catch(err) {
            alert("playlist.xml - startWatchingDragObjects - " + err);
          }
        ]]>
        </body>
      </method>

      <method name="stopWatchingDragObjects">
        <body>
          <![CDATA[
          try
          {
            if (this._dragobjects != null)
            {
              for (var i=0; i<this._dragobjects.length;i++)
              {
                this._dragobjects[i].removeEventListener("mouseup", this.dragObjectMouseUp, true);
                this._dragobjects[i].removeEventListener("mousedown", this.dragObjectMouseDown, true);
              }
              this._dragobjects = null;
            }
          }
          catch( err )
          {
            alert( "playlist.xml - stopWatchingDragObjects - " + err );
          }
        ]]>
        </body>
      </method>

      <method name="dragObjectMouseUp">
        <body>
          document.__PlaylistXBL_DragObjectDown__ = null;
        </body>
      </method>

      <method name="dragObjectMouseDown">
        <body>
          document.__PlaylistXBL_DragObjectDown__ = this;
        </body>
      </method>

      <method name="isAnyDragObjectDown">
        <body>
          <![CDATA[
          var ret = 0;
          try
          {
            if (this._dragobjects != null) {
              var o = document.__PlaylistXBL_DragObjectDown__;
              for (var i=0; i<this._dragobjects.length;i++)
              {
                if (o == this._dragobjects[i])
                {
                  ret = 1;
                  break;
                }
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - isAnyDragObjectDown - " + err );
          }
          return ret;
        ]]>
        </body>
      </method>

      <!-- Event yellers -->

      <method name="sendPlayEvent">
        <body>
          <![CDATA[
      try
      {
        var e = document.createEvent("Events");
        e.initEvent("playlist-play", false, true);
        this.dispatchEvent(e);
      }
      catch( err )
      {
        alert( "playlist.xml - sendPlayEvent - " + err )
      }
      ]]>
        </body>
      </method>

      <method name="sendEscEvent">
        <body>
          <![CDATA[
          try
          {
            var e = document.createEvent("Events");
            e.initEvent("playlist-esc", false, true);
            this.dispatchEvent(e);
          }
          catch( err )
          {
            alert( "playlist.xml - sendEscEvent - " + err )
          }
          ]]>
        </body>
      </method>

      <method name="sendEditorEvent">
        <body>
          <![CDATA[
          try
          {
            var e = document.createEvent("Events");
            e.initEvent("playlist-editor", false, true);
            this.dispatchEvent(e);
          }
          catch( err )
          {
            alert( "playlist.xml - sendEditorEvent - " + err )
          }
          ]]>
        </body>
      </method>

      <method name="sendBurnToCDEvent">
        <body>
          <![CDATA[
          try
          {
            var e = document.createEvent("Events");
            e.initEvent("playlist-burntocd", false, true);
            this.dispatchEvent(e);
          }
          catch( err )
          {
            alert( "playlist.xml - sendBurnToCDEvent - " + err )
          }
          ]]>
        </body>
      </method>

      <!-- Tree event listeners -->

      <method name="onToolbarCommand">
        <parameter name="evt"/>
        <body>
          <![CDATA[
          try
          {
            if ( this._commands )
            {
              this._commands.onCommand( evt );
            }
          }
          catch( err )
          {
            alert( "playlist.xml - onToolbarCommand - " + err );
          }
        ]]>
        </body>
      </method>

      <method name="_onPlaylistDblClick">
        <parameter name="evt"/>
        <body>
<![CDATA[
  // Check to see that the user double clicked on a row
  var row = {};
  var col = {};
  var obj = {};
  var b = this.tree.treeBoxObject;
  b.getCellAt(evt.clientX, evt.clientY, row, col, obj);

  if (row.value >= 0) {
    var gPPS = this._Cc["@songbirdnest.com/Songbird/PlaylistPlayback;1"]
                       .getService(this._Ci.sbIPlaylistPlayback);
    gPPS.playView(this.mediaListView, row.value);
  }
]]>
        </body>
      </method>

      <method name="onFilterDblClick">
        <parameter name="evt"/>
        <body>
          <![CDATA[
          try
          {
            if( this.pointInTreeRows( evt.target.tree, evt.clientX, evt.clientY ) )
            {
              var playlist = evt.target.playlist;

              if ( playlist )
              {
                document.__PlaylistXBL_DragObjectDown__ = playlist; // YUCK YUCK YUCK YUCK (note the absence of "f")
                var txt = "document.__PlaylistXBL_DragObjectDown__.tree.view.selection.currentIndex = 0;"
                txt += "document.__PlaylistXBL_DragObjectDown__.tree.view.selection.select( 0 );"
                txt += "document.__PlaylistXBL_DragObjectDown__.sendPlayEvent();"
                // Play it in awhile, after the tree updates.
                setTimeout( txt, 250 );
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - onFilterDblClick - " + err );
          }
        ]]>
        </body>
      </method>

      <method name="_onPlaylistKeypress">
        <parameter name="evt"/>
        <body>
          <![CDATA[
            //dump("charcode = " + evt.charCode + " - keycode = " + evt.keyCode + "\n");
            
            // Handle Ctrl-a
            if (evt.charCode == 'a'.charCodeAt(0) && evt.ctrlKey) {
              this.tree.view.selection.selectAll();
              return;
            }
            
            switch (evt.keyCode) {
              // Remove entries for these keys.
              case evt.DOM_VK_DELETE:
              case evt.DOM_VK_BACK_SPACE:
                if (this.tree.currentIndex != -1) {
                  this._removeSelectedTracks();
                }
                break;
                
              // Start playback for these keys.
              case evt.DOM_VK_RETURN:
              case evt.DOM_VK_ENTER:
                if (this.tree.currentIndex != -1) {
                  this.sendPlayEvent();
                }
                break;
              
              // Handle escape.
              case evt.DOM_VK_ESCAPE:
                this.sendEscEvent();
                break;
              
              default:
                break;
            }
          ]]>
        </body>
      </method>

      <method name="_onPlaylistContextClick">
        <parameter name="evt"/>
        <body>
          <![CDATA[
          try {
            // If there is no actual commands, do not allow the context menu to pop.
            if (!this._commands || this._commands.getNumCommands() == 0) return;

            const COLUMN_TITLE = "title";
            const CONTEXT_IDS = ["playlist_context_before",
                                 "playlist.context.search",
                                 "playlist.context.lyrics"];

            // Small helper to loop through a list of the ids for the context
            // menu items and show or hide each element.
            //
            // aShow - a boolean specifying if items are to be shown or
            //           hidden. Defaults to true.
            function showContextItems(aShow) {
              if (aShow === undefined)
                aShow = true;

              var items = CONTEXT_IDS;
              var count = items.length;
              for (var index = 0; index < count; index++) {
                var id = items[index];
                var item = document.getElementById(id);
                if (!item)
                  continue;

                var isHidden = item.hasAttribute("hidden");

                if (aShow && isHidden) {
                  item.removeAttribute("hidden");
                }
                else if (!aShow && !isHidden) {
                  item.setAttribute("hidden", "true");
                }
              }
            }

            var tree = this.tree;
            if (tree.currentIndex < 0)
              return;

            // XXX: do we need a version of this?
            //this.hidePlaylistEdit();

            // First, get the row and column clicked.
            var childElement = {}, rowObject = {}, columnObject = {};
            tree.treeBoxObject.getCellAt(evt.clientX, evt.clientY, rowObject,
                                         columnObject, childElement);

            // Bail if we got a bad result
            if (rowObject.value == -1)
              return;

            // Store the last clicked cell
            this.edit_row = rowObject.value;
            this.edit_col = columnObject.value;

            var cellText =
              tree.view.getCellText(rowObject.value, columnObject.value);

            // XXX: What to do here?
            if (!cellText) {
              // If we couldn't get text from the cell then we'll try to pull it
              // out another way
              var titleColumn = tree.columns.getNamedColumn(COLUMN_TITLE);
              if (titleColumn)
                cellText = tree.view.getCellText(tree.currentIndex, titleColumn);
            }

            // Make sure that everyone knows about our context
            this.context_term = cellText;
            SBDataSetStringValue("playlist.context.term", cellText);

            if (cellText) {
              var searchHeader = this._getString("playlist.context.searchheader", "Search");
              var lyricsHeader = this._getString("playlist.context.lyricsheader", "Lyrics");

              var searchTerm =
                document.getAnonymousElementByAttribute(this, 'sbid', 'search_popup_term');
              searchTerm.label = searchHeader + ": " + cellText;

              var lyricsTerm =
                document.getAnonymousElementByAttribute(this, 'sbid', 'lyrics_popup_term');
              lyricsTerm.label = lyricsHeader + ": " + cellText;

              // Make sure that the search and lyrics menus are visible
              showContextItems(true);
            }
            else {
              // We couldn't get any context, so hide the search and lyrics
              // menu items.
              showContextItems(false);
            }

            // XXX: The coords given to the showPopup() method are relative to
            // the browser iframe, so compute the difference.  This may be a
            // bug, possibly related to bmo 362403
            var bo = document.getBoxObjectFor(document.documentElement);
            this._context_x = evt.screenX - bo.screenX;
            this._context_y = evt.screenY - bo.screenY;

            //dump("this._context_x = " + this._context_x + "\n");
            //dump("this._context_y = " + this._context_y + "\n");

            this._context_popup.showPopup(tree, this._context_x, this._context_y,
                                          "context", null, null, null);

            //dump("this._context_popup.boxObject.screenX = " + this._context_popup.boxObject.screenX + "\n");
            //dump("this._context_popup.boxObject.screenY = " + this._context_popup.boxObject.screenY + "\n");
          }
          catch( e )
          {
            dump("playlist.xml - onPlaylistContextClick:\nException = " + e + "\n");
          }
        ]]>
        </body>
      </method>

      <method name="_onPlaylistSelectClick">
        <parameter name="evt"/>
        <body>
          <![CDATA[
          try
          {
            //dump("onPlaylistSelectClick\r\n");

            // If we have commands, allow them to update
            if ( ! this.restoring_selection )
            {
              this.refreshCommands();
            }
/* XXX: we should be able to do better than this
            // If we select too many items, we need to pause the scanning.
            var count = 0;
            if (this.tree.view)
            {
              var rangeCount = this.tree.view.selection.getRangeCount();
              for (var i=0; i < rangeCount; i++)
              {
                var start = {};
                var end = {};
                this.tree.view.selection.getRangeAt( i, start, end );
                count += end.value - start.value + 1;
              }
            }
            if ( count > 50 )
            {
              if ( ! this.paused_scanning )
              {
                // increment the backscan pause value.
                SBDataIncrementValue( "backscan.paused" );
                this.paused_scanning = true;
              }
            }
            else
            {
              if ( this.paused_scanning )
              {
                // decrement the backscan.pause value to a floor of 0
                SBDataDecrementValue( "backscan.paused", 0 );
                this.paused_scanning = false;
              }
            }
*/
            if (!this.restoring_selection) {
              var e = document.createEvent("Events");
              e.initEvent("playlist-selchange", false, true);
              this.dispatchEvent(e);
            }
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistSelectClick - " + err );
          }
        ]]>
        </body>
      </method>

    <method name="_onPlaylistClick">
      <parameter name="evt"/>
      <body>
<![CDATA[
  try
  {
    if ( evt.button == 0 && this.tree.currentIndex != -1 )
    {
      var obj = {}, row = {}, col = {};
      this.tree.treeBoxObject.getCellAt( evt.clientX, evt.clientY, row, col, obj );
      // If the "obj" has a value, it is a cell.  Otherwise, it could be anything.
      if ( obj.value )
      {
        if (this.tree.view.isEditable(row.value, col.value))
        {
          // Remember the row and column
          this.edit_row = row.value;
          this.edit_col = col.value;
          if (this.edit_col.id == "rating")
          {
            var width = this.edit_col.element.boxObject.width;
            var dist = evt.screenX - this.edit_col.element.boxObject.screenX;
            // 4 pixels offsets
            width -= 8;
            dist -= 4;
            var ret = Math.round(dist / width * 100);
            if (ret < 0) ret = 0; if (ret > 100) ret = 100;
            this.setCellRating(this.edit_row, this.edit_col, ret);
          }
          else if ( this.tree.currentIndex == this._lastClickIndex  )
          {
            var delay = evt.timeStamp - this._lastClickTimestamp;
            if ( delay > 1000 && delay < 2000 )
            {
              this.startCellEditing();
            }
          }
        }
      }
    }
    this._lastClickIndex = this.tree.currentIndex;
    this._lastClickTimestamp = evt.timeStamp;
  }
  catch( err )
  {
    alert( "playlist.xml - onPlaylistClick - " + err );
  }
]]>
      </body>
    </method>

    <method name="onPlaylistContextMenu">
      <parameter name="evt"/>
      <body>
        <![CDATA[
          try
          {
            this.context_item = null;
            if ( ! evt.target )
            {
              return;
            }
            this.context_item = document.getAnonymousElementByAttribute(this, 'id', evt.target.id);
            metrics_inc("playlist.context", this.context_item.getAttribute("id"), null);
            if ( evt.target.getAttribute( "sbtype" ) == "command" )
            {
              if ( this._commands ) // I hope so!
              {
                this._commands.onCommand( evt );
              }
            }
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistContextMenu - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="onPopupShown">
      <parameter name="evt"/>
      <body>
        <![CDATA[
          try
          {
            this.setDeferRefresh();
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistContextMenu - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="onPopupHidden">
      <parameter name="evt"/>
      <body>
        <![CDATA[
          try
          {
            this.clearDeferRefresh();
          }
          catch( err )
          {
            alert( "playlist.xml - onPlaylistContextMenu - " + err );
          }
        ]]>
      </body>
    </method>

    <method name="_addItem">
      <parameter name="item"/>
      <parameter name="row"/>
      <parameter name="orientation"/>
      <body>
<![CDATA[
  var ml = this.mediaListView.mediaList;
  var oldLength = ml.length;

  // If this media lists supports ordering, insert the item where it was
  // dropped
  if (ml instanceof this._Ci.sbIOrderableMediaList) {
    if (orientation == this._Ci.sbIMediaListViewTreeViewObserver.DROP_BEFORE &&
        oldLength > 0 && row >= 0 && row < oldLength) {
      ml.insertBefore(row, item);
    }
    else {
      ml.add(item);
    }
  }
  else {
    ml.add(item);
  }

  var added = ml.length - oldLength;
  this._reportAddedTracks(added, 1 - added);
]]>
      </body>
    </method>

    <method name="_addItems">
      <parameter name="enumerator"/>
      <body>
<![CDATA[
  // Count the number of items we are about to add so we can message the user
  // property
  var items = [];
  while (enumerator.hasMoreElements()) {
    items.push(enumerator.getNext());
  }
  var count = items.length;

  var self = this;
  var tempEnumerator = {
    _items: items,
    _nextIndex: 0,
    hasMoreElements: function() {
      return this._nextIndex < this._items.length;
    },
    getNext: function() {
      var item = this._items[this._nextIndex];
      this._nextIndex++;
      return item;
    },
    QueryInterface : function(iid) {
      if (iid.equals(self._Ci.nsISimpleEnumerator) ||
          iid.equals(self._Ci.nsISupports))
        return this;
      throw self._Cr.NS_NOINTERFACE;
    }
  }

  var ml = this.mediaListView.mediaList;
  var oldLength = ml.length;
  ml.addSome(tempEnumerator);
  var added = ml.length - oldLength;
  this._reportAddedTracks(added, count - added);
]]>
      </body>
    </method>

    <method name="_reportAddedTracks">
      <parameter name="countAdded"/>
      <parameter name="countAlreadyPresent"/>
      <body>
<![CDATA[
  var msg = countAdded + " ";

  // Start message with xxx added to...
  switch (countAdded) {
    case 0:  msg += this._str_notracksaddedto; break;
    case 1:  msg += this._str_trackaddedto;    break;
    default: msg += this._str_tracksaddedto;   break;
  }

  // Append media list name
  var name = "";
  try {
    name = this.mediaListView.mediaList.name;
  }
  catch(e) {
    // No name, leave it blank
  }

  msg += " " + name;

  // Append the message about already present items (if any)
  if (countAlreadyPresent > 0) {
    msg += " (" + countAlreadyPresent + " ";
    if (countAlreadyPresent == 1) {
      msg += this._str_trackalreadypresent;
    }
    else {
      msg += this._str_tracksalreadypresent;
    }
    msg += ")";
  }

  SBDataSetStringValue("faceplate.status.override.text", "");
  SBDataSetStringValue("faceplate.status.override.text", msg);
  SBDataSetStringValue("faceplate.status.override.style", "font-weight: bold;");
]]>
      </body>
    </method>

    <method name="_removeSelectedTracks">
      <body>
<![CDATA[
  var ml = this.mediaListView.mediaList;

  ml.beginUpdateBatch();

  // Process the selection backwards so we don't change the indexes as we
  // delete them
  try {
    var rangeCount = this.tree.view.selection.getRangeCount();
    for (var i = rangeCount - 1; i >= 0; i--) {
      var start = {};
      var end = {};
      this.tree.view.selection.getRangeAt(i, start, end);
      for (var j = end.value; j >= start.value; j--) {
        var index = this.mediaListView.getUnfilteredIndex(j);
        ml.removeByIndex(index);
      }
    }
  }
  finally {
    ml.endUpdateBatch();
  }
]]>
      </body>
    </method>

    <method name="setCellRating">
      <parameter name="row"/>
      <parameter name="col"/>
      <parameter name="rating"/>
      <body>
        <![CDATA[
          try
          {
            // Find the url column.
            var filter = "uuid";
            var filter_column = this.tree.columns ? this.tree.columns[filter] : filter;
            var filter_value = this.tree.view.getCellText( this.tree.currentIndex, filter_column );

            var the_table_column = col.id;
            var the_new_value = rating;

            var aDBQuery = Components.classes["@songbirdnest.com/Songbird/DatabaseQuery;1"].createInstance(Components.interfaces.sbIDatabaseQuery);
            var aMediaLibrary = Components.classes["@songbirdnest.com/Songbird/MediaLibrary;1"].createInstance(Components.interfaces.sbIMediaLibrary);

            if ( ! aDBQuery || ! aMediaLibrary)
              return;

            aDBQuery.setAsyncQuery(true);
            aDBQuery.setDatabaseGUID(this.guid);
            aMediaLibrary.setQueryObject(aDBQuery);

            aMediaLibrary.setValueByGUID(filter_value, the_table_column, the_new_value, false);
          }
          catch (err)
          {
            alert( "playlist.xml - setCellRating - " + err );
          }
          return;
        ]]>
      </body>
    </method>

    <method name="syncColumnSortIndicator">
      <body>
        <![CDATA[
          if (this._treecols) {
            var cols = this._treecols.childNodes;
            for (var i=0;i<cols.length;i++) {
              if (cols[i].getAttribute("id") == this.sortorder) {
                cols[i].setAttribute("sortDirection", (this.sortdirection == "asc") ? "ascending" : "descending");
              } else {
                cols[i].setAttribute("sortDirection", "natural");
              }
            }
          }
        ]]>
      </body>
    </method>

    <method name="pointInTreeRows">
      <parameter name="tree"/>
      <parameter name="mouseX"/>
      <parameter name="mouseY"/>
        <body>
        <![CDATA[
          // Make sure the user actually double clicked on a tree cell.
          // Previously this used getCellAt() on the tree, however, it was
          // unreliable.  This code compares the mouse position with the box
          // object of the contaier of the tree's rows (which excludes the
          // column headers and scroll bar)
          var treeRows = document.getAnonymousElementByAttribute(tree, "class", "tree-rows");
          if(!treeRows) {
              return false;
          }
          var treeBodyBox = document.getAnonymousElementByAttribute(treeRows, "class", "tree-bodybox");
          if(!treeBodyBox) {
              return false;
          }
          var bo = treeBodyBox.boxObject;
          if(mouseX >= bo.x && mouseX <= (bo.x + bo.width) &&
             mouseY >= bo.y && mouseY <= (bo.y + bo.height)) {
             return true;
          }
          else {
            return false;
          }
        ]]>
        </body>
      </method>

      <method name="deselectAll">
        <body>
        <![CDATA[
          this.tree.view.selection.clearSelection();
        ]]>
        </body>
      </method>

      <method name="_getString">
        <parameter name="name"/>
        <parameter name="defaultValue"/>
        <body>
<![CDATA[
  if (!this._stringbundle) {
    var src = "chrome://songbird/locale/songbird.properties";
    var stringBundleService = this._Cc["@mozilla.org/intl/stringbundle;1"]
                                  .getService(this._Ci.nsIStringBundleService);
    this._stringbundle = stringBundleService.createBundle(src);
  }

  try {
    return this._stringbundle.GetStringFromName(name);
  }
  catch(e) {
    return defaultValue;
  }
]]>
        </body>
      </method>

      <method name="_getSelectionRows">
        <body>
<![CDATA[
  var selection = this.tree.view.selection;
  var rc = selection.getRangeCount();
  var rows = [];
  for (var i = 0; i < rc; ++i) {
    var min = { }, max = { };
    selection.getRangeAt(i, min, max);

    for (var j = min.value; j <= max.value; ++j) {
      rows.push(j);
    }
  }
  return rows;
]]>
        </body>
      </method>

      <method name="_di">
        <parameter name="o"/>
        <body>
<![CDATA[
 for(var i in this._Ci) {
   try {
     o.QueryInterface(this._Ci[i]);
     dump(i + "\n");
   }
   catch(e) {
   }
 }
]]>
        </body>
      </method>

      <!-- Drag and Drop -->
      <method name="_onDragGesture">
        <parameter name="event"/>
        <body>
<![CDATA[
  if (event.target.localName == "treechildren") {
    nsDragAndDrop.startDrag(event, this);
  }
]]>
        </body>
      </method>

      <method name="_onDragOver">
        <parameter name="event"/>
        <body>
<![CDATA[
  if (event.target.localName == "treechildren") {
    nsDragAndDrop.dragOver(event, this);
  }
]]>
        </body>
      </method>

      <method name="_onDragDrop">
        <parameter name="event"/>
        <body>
<![CDATA[
  // Note that drop is handled by the tree observer.  This is so we can know
  // what row and orientation the drop happened at.
  event.stopPropagation();
]]>
        </body>
      </method>

      <method name="_dropOnTree">
        <parameter name="row"/>
        <parameter name="orientation"/>
        <body>
<![CDATA[
  // Note that this is called by our tree observer
  var dnd = this._Cc["@songbirdnest.com/Songbird/DndSourceTracker;1"]
                    .getService(this._Ci.sbIDndSourceTracker);

  var data = this._getTransferDataForFlavor(this._TYPE_X_SB_MEDIAITEM);
  if (data) {
    var item = dnd.getSourceSupports(data);
    this._addItem(item, row, orientation);
  }
  else {
    data = this._getTransferDataForFlavor(this._TYPE_X_SB_MEDIAITEM_ENUMERATOR);
    if (data) {
      var enumerator = dnd.getSourceSupports(data);
      this._addItems(enumerator.QueryInterface(this._Ci.nsISimpleEnumerator),
                     row, orientation);
    }
  }
]]>
        </body>
      </method>

      <method name="_getTransferDataForFlavor">
        <parameter name="flavor"/>
        <body>
<![CDATA[
  var dragService = this._Cc["@mozilla.org/widget/dragservice;1"]
                            .getService(this._Ci.nsIDragService);
  var session = dragService.getCurrentSession();

  var transfer = this._Cc["@mozilla.org/widget/transferable;1"]
                         .createInstance(this._Ci.nsITransferable);

  if (session.isDataFlavorSupported(flavor)) {
    transfer.addDataFlavor(flavor);
    session.getData(transfer, 0);
    var data = {};
    transfer.getTransferData(flavor, data, {});
    return data.value;
  }

  return null;
]]>
        </body>
      </method>

      <method name="onDragStart">
        <parameter name="event"/>
        <parameter name="xferData"/>
        <parameter name="dragAction"/> 
        <body>
<![CDATA[
  try {
    dump("onDragStart " + event + " " + xferData + " " + dragAction + "\n");

    var rows = this._getSelectionRows();
    if (rows.length == 0) {
      // Nothing selected, don't drag
      throw this._Cr.NS_OK;
    }

    var dnd = this._Cc["@songbirdnest.com/Songbird/DndSourceTracker;1"]
                      .getService(this._Ci.sbIDndSourceTracker);
    dnd.reset();

    xferData.data = new TransferDataSet();
    var data = new TransferData();

    // If only one item is selected, use the media item flavor
    if (rows.length == 1) {
      var listIndex = this.mediaListView.getUnfilteredIndex(rows[0]);
      var item = this.mediaListView.mediaList.getItemByIndex(listIndex);

      // Add the single media item flavor
      var handle = dnd.registerSource(item);
      data.addDataForFlavour(this._TYPE_X_SB_MEDIAITEM, handle);

      // Add a simple enumerator with the single item flavor
      var self = this;
      var enumerator = {
        _item: item,
        hasMoreElements: function() {
          return this._item != null;
        },
        getNext: function() {
          var i = this._item;
          this._item = null;
          return i;
        },
        QueryInterface : function(iid) {
          if (iid.equals(self._Ci.nsISimpleEnumerator) ||
              iid.equals(self._Ci.nsISupports))
            return this;
          throw self._Cr.NS_NOINTERFACE;
        }
      }
      handle = dnd.registerSource(enumerator);
      data.addDataForFlavour(this._TYPE_X_SB_MEDIAITEM_ENUMERATOR, handle);

      // Add the url of the item as well
      // XXX: Probably want to make sure that this is a local file that exists
      // before providing this flavor
      //data.addDataForFlavour("text/x-moz-url", item.contentSrc);
    }
    else {
      // Otherwise, add an emumerator of the selection
      var self = this;
      var enumerator = {
        _rows: rows,
        _view: this.mediaListView,
        _nextIndex: 0,
        hasMoreElements: function() {
          return this._nextIndex < this._rows.length;
        },
        getNext: function() {
          var i = this._view.getUnfilteredIndex(this._rows[this._nextIndex]);
          var item = this._view.mediaList.getItemByIndex(i);
          this._nextIndex++;
          return item;
        },
        QueryInterface : function(iid) {
          if (iid.equals(self._Ci.nsISimpleEnumerator) ||
              iid.equals(self._Ci.nsISupports))
            return this;
          throw self._Cr.NS_NOINTERFACE;
        }
      }
      handle = dnd.registerSource(enumerator);
      data.addDataForFlavour(this._TYPE_X_SB_MEDIAITEM_ENUMERATOR, handle);
    }
    xferData.data.push(data);

    dragAction.action = this._Ci.nsIDragService.DRAGDROP_ACTION_COPY;
  }
  catch(e) {
    // The drag and drop helper swallows exceptions, so report them and
    // rethrow
    Components.utils.reportError(e);
    throw e;
  }
]]>
        </body>
      </method>

      <method name="canDrop">
        <parameter name="event"/>
        <parameter name="session"/>
        <body>
<![CDATA[
  if (session.isDataFlavorSupported(this._TYPE_X_SB_MEDIAITEM) ||
      session.isDataFlavorSupported(this._TYPE_X_SB_MEDIAITEM_ENUMERATOR) ||
      session.isDataFlavorSupported("application/x-moz-file") ||
      session.isDataFlavorSupported("text/x-moz-url")) {
    return true;
  }
  else {
    return false;
  }
]]>
        </body>
      </method>

      <method name="onDragOver">
        <parameter name="event"/>
        <parameter name="flavor"/>
        <parameter name="session"/>
        <body>
<![CDATA[
]]>
        </body>
      </method>

      <method name="getSupportedFlavours">
        <body>
<![CDATA[
  var flavorSet = new FlavourSet();
  flavorSet.appendFlavour(this._TYPE_X_SB_MEDIAITEM);
  flavorSet.appendFlavour(this._TYPE_X_SB_MEDIAITEM_ENUMERATOR);
  flavorSet.appendFlavour("application/x-moz-file", "nsIFile");
  flavorSet.appendFlavour("text/x-moz-url");
  return flavorSet;
]]>
        </body>
      </method>

      <method name="_treeKeyNavigate">
        <parameter name="event"/>
        <body><![CDATA[
          // Watch out, 'this' here refers to the tree (_incrementalString and
          // _lastKeyTime are members of the tree).

          var key = String.fromCharCode(event.charCode).toLowerCase();
          if (event.timeStamp - this._lastKeyTime > 500)
            this._incrementalString = key;
          else
            this._incrementalString += key;
          this._lastKeyTime = event.timeStamp;

          var incrementalString = this._incrementalString;

          // Grab our special interface for the lookup.
          var view =
            this.view.QueryInterface(Components.interfaces.sbIMediaListViewTreeView);

          var currentIndex = this.currentIndex;
          var start = 1;

          if (incrementalString.length > 1) {
            start = 0;

            if (currentIndex < 0) {
              currentIndex = 0;
            }
          }

          var index =
            view.getNextRowIndexForKeyNavigation(incrementalString,
                                                 currentIndex + start);

          if (index == -1) {
            index = view.getNextRowIndexForKeyNavigation(incrementalString, 0);
          }
          return index;

        ]]></body>
      </method>

    </implementation>

  </binding>

</bindings>
