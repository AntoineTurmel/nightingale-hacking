<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2007 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">


  
  
  <!-- TRACK EDITOR CONTROL -->

  
  
  
  <binding id="trackeditor" extends="chrome://songbird/content/bindings/drawer.xml#drawer-single">

  <implementation>

    <constructor>
      <![CDATA[
      ]]>
    </constructor>
    <destructor>
    </destructor>
    
    <field name="playlist">null</field>

    <method name="setPlaylist">
      <parameter name="list"/>
      <body>
        this.playlist = list;
      </body>
    </method>

    <method name="setDirtyObject">
      <parameter name="obj"/>
      <body>
        this.dirtyobject = obj;
      </body>
    </method>

    <method name="setMainFocusObject">
      <parameter name="obj"/>
      <body>
        this.mainfocusobject = obj;
      </body>
    </method>

    <method name="createDrawerContent">
     <body>
       var ret = document.createElement("iframe");
       ret.setAttribute("src", "chrome://songbird/content/xul/trackEditorForm.xul");
       return ret;
     </body>
    </method>
    
    <method name="onContentInserted">
      <body>
        <![CDATA[
          this.setObjectsToContentDoc();
        ]]>
      </body>
    </method>
    
    <method name="setObjectsToContentDoc">
      <body>
        <![CDATA[
          var iframe = this.getContent();
          if (iframe) {
            var doc = iframe.contentDocument;
            var func = doc.__SETOBJECTS_FUNCTION__;
            if (func) {
              func(this.playlist, this.dirtyobject, this.mainfocusobject);
            } else {
              setTimeout(function(obj) { obj.setObjectsToContentDoc(); }, 0, this); 
            }
          }
        ]]>
      </body>
    </method>
    
    <method name="apply">
      <body>
        <![CDATA[
          var iframe = this.getContent();
          if (iframe) {
            var doc = iframe.contentDocument;
            var func = doc.__APPLY_FUNCTION__;
            if (func) {
              func();
            }
          }
        ]]>
      </body>
    </method>

    <method name="undo">
      <body>
        <![CDATA[
          var iframe = this.getContent();
          if (iframe) {
            var doc = iframe.contentDocument;
            var func = doc.__UNDO_FUNCTION__;
            if (func) {
              func();
            }
          }
        ]]>
      </body>
    </method>
    
    <method name="checkFormatErrors">
      <body>
        <![CDATA[
          var iframe = this.getContent();
          if (iframe) {
            var doc = iframe.contentDocument;
            var func = doc.__CHECKFORMATERRORS_FUNCTION__;
            if (func) {
              return func();
            }
          }
          return null; // all good i guess ? :(
        ]]>
      </body>
    </method>

   </implementation>
 
  </binding>




  <!-- EXTENDED TRACK EDITOR CONTROL -->

  
  
  
  <binding id="exttrackeditor" extends="chrome://songbird/content/bindings/drawer.xml#drawer-single">

  <implementation>

    <constructor>
      <![CDATA[
        this.controls = Array();
      ]]>
    </constructor>
    <destructor>
      if (this.playlistevt) { this.playlistevt.removeEventListener("playlist-selchange", this.selchangeevt, false); this.playlistevt = null; }
    </destructor>
    
    <field name="controls">null</field>
    <field name="playlist">null</field>
    <field name="guids">null</field>

    <method name="setPlaylist">
      <parameter name="list"/>
      <body>
        this.playlist = list;
        this.watchPlaylist();
      </body>
    </method>
    
    <property name="exclude">
      <getter>
        return this.getAttribute("exclude");
      </getter>
      <setter>
        return this.setAttribute("exclude", val);
      </setter>
    </property>

    <method name="createDrawerContent">
     <body>
       // fixed size parent for the drawer content
       var ret = document.createElement("hbox");
       
       // scrollable container for the controls
       var container = document.createElement("vbox");
       container.setAttribute("flex", "1");
       container.setAttribute("style", "overflow: auto;");
       ret.appendChild(container);
       
       // db controls
       this.appendControls(container);

       return ret;
     </body>
    </method> 

    <method name="apply">
      <body>
        <![CDATA[
          for (var i=0;i<this.controls.length;i++)
            this.controls[i].apply();
        ]]>
      </body>
    </method>

    <method name="undo">
      <body>
        <![CDATA[
          for (var i=0;i<this.controls.length;i++)
            this.controls[i].undo();
        ]]>
      </body>
    </method>

    <method name="checkFormatErrors">
      <body>
        <![CDATA[
          for (var i=0;i<this.controls.length;i++) {
            if (!this.controls[i].validateValue()) return this.controls[i].column;
          }
          return null;
        ]]>
      </body>
    </method>
    
    <method name="appendControls">
      <parameter name="parent"/>
      <body>
        <![CDATA[
          // Load up the string bundle
          var src = "chrome://songbird/locale/songbird.properties";
          var stringBundleService =
              Components.classes["@mozilla.org/intl/stringbundle;1"]
              .getService(Components.interfaces.nsIStringBundleService);
          var stringbundle = stringBundleService.createBundle( src );

          var pm = Components.classes["@songbirdnest.com/Songbird/Properties/PropertyManager;1"]
                       .getService(Components.interfaces.sbIPropertyManager);
          var props = pm.propertyIDs;
          while (props.hasMore()) {
            var propertyID = props.getNext();
            var info = pm.getPropertyInfo(propertyID);

            // create a control for that column using its data type and readonly status

            if (this.isExcluded(propertyID)) continue;

            var readablename = info.displayName;
            var type = info.type;

            //xxxlone> there is no .readOnly or equivalent functionality ! :(
            //var ro = info.readOnly; 
            var ro = false;
            
            var elem;
            if (ro != 0) elem = document.createElement("sb-dbedit-label");
            else elem = document.createElement("sb-dbedit-textbox");
            if (type == 'number') elem.setAttribute("numeric", true);
            if (ro != 0) elem.setAttribute("readonly", "true");
            elem.setAttribute("column", propertyID);
            elem.setAttribute("flex", "1");
            // create a container for the element, add a descriptive label and a spacer to it
            var hbox = document.createElement("hbox");
            hbox.setAttribute("height", "32");
            hbox.setAttribute("align", "center");
            var label = document.createElement("label");
            if (readablename.slice(0, 1) == "&") 
            {
              try
              {
                readablename = stringbundle.GetStringFromName( readablename.substr( 1, readablename.length ) );
              }
              catch( err )
              {
              }
            }
            label.setAttribute("value", readablename);
            label.setAttribute("width", "96");
            var spacer = document.createElement("spacer");
            spacer.setAttribute("width", "5");
            hbox.appendChild(label);
            hbox.appendChild(spacer);
            hbox.appendChild(elem);
            // add the container to the parent
            parent.appendChild(hbox);
            // register the db control
            this.controls.push(elem);
            // do not set the guid yet, the controls are not inserted in the dom at this point, so the xbl has not been instantiated, wait for onContentInserted
          }
        ]]>
      </body>
    </method>
    
    <method name="onContentInserted">
      <body>
        <![CDATA[
          // set dirty object
          for (var i=0;i<this.controls.length;i++) this.controls[i].dirtyobject = this.dirtyobject;
          for (var i=0;i<this.controls.length;i++) this.controls[i].playlist = this.playlist;
          // set controls guids
          this.loadSelection();
        ]]>
      </body>
    </method>
    
    <method name="onPlaylistSelectionChanged">
      <body>
        <![CDATA[
          if (this.dirtyobject && this.dirtyobject.isDirty()) return; // ignore new selection if anything has been edited
          if (this.mainfocusobject && this.mainfocusobject.isFocused()) return; // ignore new selection if the window is focused (the selection can't possibly have been made by the user!)
          this.loadSelection();
        ]]>
      </body>
    </method>
    
    <method name="isExcluded">
      <parameter name="col"/>
      <body>
        <![CDATA[
          var excludelist = this.exclude;
          var excludearray = excludelist.split(";");
          for (var i=0;i<excludearray.length;i++)
            if (excludearray[i].toLowerCase() == col.toLowerCase()) return true;
          return false;
        ]]>
      </body>
    </method>
    
    <method name="watchPlaylist">
      <body>
        <![CDATA[
          if (this.playlist)
          {
            this.selchangeevt = { 
              _that: null, 
              handleEvent: function( event ) { this._that.onPlaylistSelectionChanged(); } 
            }; this.selchangeevt._that = this;
            this.playlistevt = this.playlist;
            this.playlist.addEventListener("playlist-selchange", this.selchangeevt, false);
          }
        ]]>
      </body>
    </method>

    <method name="loadSelection">
      <body>
        <![CDATA[
          var _guids = Array();
          if (this.playlist && this.playlist.tree) 
          {
            if (this.playlist.mediaListView && this.playlist.mediaListView.treeView.selection)
            {
              var rangeCount = this.playlist.mediaListView.treeView.selection.getRangeCount();
              if (rangeCount == 0) return; // abort !
              for (var i=0; i < rangeCount; i++) 
              {
                var start = {};
                var end = {};
                this.playlist.mediaListView.treeView.selection.getRangeAt( i, start, end );
                for (var j=start.value;j<=end.value;j++)
                {
                  // Get the item, this contains the uuid.
                  var item = this.playlist.mediaListView.mediaList.getItemByIndex(j);
                  if (item) _guids.push(item.guid);
                }
              }
            }
          }
          this.guids = _guids;
          this.onTrackChange();
        ]]>
      </body>
    </method>

    <method name="onTrackChange">
      <body>
        <![CDATA[
          for (var i=0;i<this.controls.length;i++)
          {
            this.controls[i].guids = this.guids;
            this.controls[i].undo();
          }
        ]]>
      </body>
    </method>

    <method name="setDirtyObject">
      <parameter name="obj"/>
      <body>
        <![CDATA[
          this.dirtyobject = obj;
        ]]>
      </body>
    </method>

    <method name="setMainFocusObject">
      <parameter name="obj"/>
      <body>
        <![CDATA[
          this.mainfocusobject = obj;
        ]]>
      </body>
    </method>


  </implementation>
 
  </binding>

</bindings>

