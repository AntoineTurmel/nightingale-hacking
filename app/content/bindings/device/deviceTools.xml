<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
 */
-->

<!-- Import external definitions. -->
<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd">

<bindings
      xmlns="http://www.mozilla.org/xbl"
      xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
      xmlns:xbl="http://www.mozilla.org/xbl">

  <!-- *************************************************************************
   *****************************************************************************
   *
   * Device tools panel widget.
   *
   *****************************************************************************
   ************************************************************************* -->

  <binding id="sb-device-tools"
     extends="chrome://songbird/content/bindings/device/deviceControl.xml#sb-device-control">

    <!-- ***********************************************************************
     *
     * Content.
     *
     *********************************************************************** -->

    <content>

      <xul:vbox class="device-tab-content">

        <xul:hbox class="device-tab-header-box">
          <!-- Header label and info. -->
          <xul:label class="device-tab-header-label"
                     value="&device.management.tabs.tools.label;"/>
          <xul:label sbid="content_management_header_info_label"
                     class="device-tab-header-info"/>
        </xul:hbox>

        <!-- Product Registration -->
        <xul:groupbox tool="register" pack="center" 
                      orient="vertical" hidden="true">
          <xul:label value="&device.tools.product_registration.title;"/>
          <xul:description>
            &device.tools.product_registration.description;
          </xul:description>
          <xul:hbox>
            <xul:spacer flex="1"/>
            <xul:button label="&device.tools.product_registration.label;"
                        oncommand="registerDevice();"/>
          </xul:hbox>
        </xul:groupbox>

        <!-- Update Firmware -->
        <xul:groupbox tool="update" pack="center" 
                      orient="vertical" hidden="true">
          <xul:hbox>
            <xul:label value="&device.tools.update_firmware.title;"/>
            <xul:spacer flex="1"/>
            <xul:label value="&device.tools.update_firmware.current_firmware.title;"/>
            <xul:label sbid="sb-device-tools-cur-firmware-ver"/>
          </xul:hbox>

          <xul:vbox>
            <xul:description>
              &device.tools.update_firmware.description;
            </xul:description>
            <xul:groupbox sbid="sb-device-tools-busy-device-warning"
                          orient="vertical" 
                          pack="center" 
                          hidden="true">
              <xul:description sbid="sb-device-tools-busy-device-warning-desc"
                               class="dev-tools-busy-warning" />
            </xul:groupbox>
            <xul:hbox>
              <xul:spacer flex="1"/>
              <xul:button sbid="sb-device-tools-update-firmware-button" 
                          label="&device.tools.update_firmware.label;"
                          oncommand="updateFirmware();"/>
            </xul:hbox>
          </xul:vbox>
        </xul:groupbox>

        <!-- Repair Device -->
        <xul:groupbox tool="repair" pack="center" 
                      orient="vertical" hidden="true">
          <xul:vbox sbid="sb-device-tools-format" hidden="true">
            <xul:label value="&device.tools.format_device.title;"/>
            <xul:description>
              &device.tools.format_device.description;
            </xul:description>
            <xul:hbox>
              <xul:spacer flex="1"/>
              <xul:button label="&device.tools.format_device.label;"
                          oncommand="formatDevice();"/>
            </xul:hbox>
          </xul:vbox>

          <xul:label value="&device.tools.repair_device.title;"/>
          <xul:description>
            &device.tools.repair_device.description;
          </xul:description>
          <xul:hbox>
            <xul:spacer flex="1"/>
            <xul:button label="&device.tools.repair_device.label;"
                        oncommand="repairDevice();"/>
          </xul:hbox>
        </xul:groupbox>

        <!-- Support -->
        <xul:groupbox tool="support" pack="center" 
                      orient="vertical" hidden="true">
          <xul:label value="&device.tools.support.title;"/>
          <xul:description>
            &device.tools.support.description;
          </xul:description>
          <xul:hbox>
            <xul:spacer flex="1"/>
            <xul:button label="&device.tools.support.label;"
                        oncommand="support();"/>
          </xul:hbox>
        </xul:groupbox>


        <!-- Reset Warnings -->
        <xul:groupbox tool="resetwarnings" pack="center" 
                      orient="vertical" hidden="true">
          <xul:label value="&device.tools.reset_warnings.title;"/>
          <xul:description>
            &device.tools.reset_warnings.description;
          </xul:description>
          <xul:hbox>
            <xul:spacer flex="1"/>
            <xul:button label="&device.tools.reset_warnings.label;"
                        oncommand="resetWarnings();"/>
          </xul:hbox>
        </xul:groupbox>

      </xul:vbox>

    </content>


    <!-- ***********************************************************************
     *
     * Implementation.
     *
     *********************************************************************** -->

    <implementation>
      <constructor><![CDATA[
        Components.utils.import("resource://app/jsmodules/WindowUtils.jsm");

        var toolsAttribute = this.getAttribute("tools");
        var toolsList = toolsAttribute.split(",");
        
        for(let i = 0; i < toolsList.length; ++i) {
          let box = this._getToolBox(toolsList[i]);
          if(box) {
            box.hidden = false;
          }
        }
        
        this.device = null;
        this._firmwareHandler = null;
        this._busyCheckTimer = null;
        this._currentFirmwareVersion = null;
        this._busyWarningBox = null;
        this._busyWarningDesc = null;
        this._busyWarningText = null;
        this._updateFirmwareButton = null;
        this._registerURI = null;
        this._customerSupportLocation = null;
      ]]>
      </constructor>

      <destructor><![CDATA[
        this._firmwareHandler.unbind();

        this._firmwareHandler = null;
        this._busyCheckTimer = null;
        this._currentFirmwareVersion = null;
        this._busyWarningBox = null;
        this._busyWarningDesc = null;
        this._busyWarningText = null;
        this._updateFirmwareButton = null;
        this._registerURI = null;
        this._customerSupportLocation = null;

        if(this.device) {
          this.device = null;
        }
        
        if(this._busyCheckTimer) {
          clearInterval(this._busyCheckTimer);
        }
      ]]>
      </destructor>

      <method name="registerDevice">
        <body><![CDATA[
          if (this._registerURI != null) {
            var protocolSvc = 
              Components.classes["@mozilla.org/uriloader/external-protocol-service;1"]
                        .getService(Ci.nsIExternalProtocolService);
             protocolSvc.loadURI(this._registerURI);
          }
        ]]></body>
      </method>

      <method name="updateFirmware">
        <body><![CDATA[
          WindowUtils.openModalDialog
            (window,
             "chrome://songbird/content/xul/device/deviceFirmwareWizard.xul",
             "device_firmware_dialog",
             "",
             [ "mode=update", this.device ],
             null);
         ]]></body>
      </method>

      <method name="formatDevice">
        <body><![CDATA[
          var prompter =
              Components.classes['@songbirdnest.com/Songbird/Prompter;1']
              .getService(Components.interfaces.sbIPrompter);

          var confirmed = prompter.confirm(window,
              SBString('device.dialog.format.title'),
              SBFormattedString('device.dialog.format.message',
                [this.device.name]));

          if (confirmed) {
           this.device.format();
          }
        ]]></body>
      </method>

      <method name="repairDevice">
        <body><![CDATA[
          if (!this._firmwareHandler) {
            var prompter = 
                Components.classes['@songbirdnest.com/Songbird/Prompter;1']
                .getService(Components.interfaces.sbIPrompter);
  
            var confirmed = prompter.confirm(window, 
                SBString('device.dialog.factoryrestore.title'),
                SBFormattedString('device.dialog.factoryrestore.message', 
                  [this.device.name]));
  
            if (confirmed) {
              var bag = Components.classes['@mozilla.org/hash-property-bag;1']
                  .createInstance(Components.interfaces.nsIPropertyBag2);
              this.device.submitRequest(
                  Components.interfaces.sbIDevice.REQUEST_FACTORY_RESET, bag);
            }
          } else {
            WindowUtils.openModalDialog
              (window,
               "chrome://songbird/content/xul/device/deviceFirmwareWizard.xul",
               "device_firmware_dialog",
               "",
               [ "mode=repair", this.device ],
               null);
          }
        ]]></body>
      </method>

      <method name="support">
        <body><![CDATA[
          if (this._customerSupportLocation != null) {
            var protocolSvc = 
              Components.classes["@mozilla.org/uriloader/external-protocol-service;1"]
                        .getService(Ci.nsIExternalProtocolService);
             protocolSvc.loadURI(this._customerSupportLocation);
          }
        ]]></body>
      </method>

      <method name="resetWarnings">
        <body><![CDATA[
          this.device.resetWarningDialogs();
        ]]></body>
      </method>

      <method name="_update">
        <body><![CDATA[
        if(!this._currentFirmwareVersion) {
          this._currentFirmwareVersion =
            document.getAnonymousElementByAttribute(this,
                                                    "sbid",
                                                    "sb-device-tools-cur-firmware-ver");
        }

        if(!this._updateFirmwareButton) {
          this._updateFirmwareButton = 
            document.getAnonymousElementByAttribute(this,
                                                    "sbid",
                                                    "sb-device-tools-update-firmware-button");
        }

        var firmwareVersion = null;
        var deviceFirmwareUpdater = 
          Components.classes["@songbirdnest.com/Songbird/Device/Firmware/Updater;1"]
                    .getService(Components.interfaces.sbIDeviceFirmwareUpdater);

        // If we have a firmware handler for the device, use it to read
        // the device firmware version instead of using the one provided
        // by the device properties.
        if(deviceFirmwareUpdater.hasHandler(this.device)) {
          var handler = deviceFirmwareUpdater.getHandler(this.device);
          
          var self = this;
          var deviceListener = {
            onDeviceEvent: function(aEvent) {
              if (aEvent.type == Components.interfaces.sbIDeviceEvent.EVENT_FIRMWARE_CFU_END) {
                let curFirmHandler = self._firmwareHandler;
                self._registerURI = curFirmHandler.registerLocation;
                self._customerSupportLocation = curFirmHandler.customerSupportLocation;
                self._propertyLookup();
              }
            }
          };

          try {
            handler.bind(this.device, deviceListener);
            this._firmwareHandler = handler; 
            handler.refreshInfo();
            firmwareVersion = handler.currentFirmwareReadableVersion;
          }
          catch(err) { 
            Components.utils.reportError(err); 
            this._firmwareHandler = null; 
          }
        }

        if(firmwareVersion == null) {
          try { 
            firmwareVersion = this.device.properties.firmwareVersion;
          }
          catch(err) { Components.utils.reportError(err); }
        }

        if (firmwareVersion == null) {
          firmwareVersion = SBString("device.info.unknown");
        }
        
        this._currentFirmwareVersion.value = firmwareVersion;
        
        if (!this.formatBox && this.device.supportsReformat) {
          this.formatBox = document.getAnonymousElementByAttribute(this,
                                                    "sbid",
                                                    "sb-device-tools-format");
          this.formatBox.hidden = false;
        }
        
        this._startBusyCheck();
        ]]></body>
      </method>

      <method name="_updateBusyState">
        <body><![CDATA[
        if(!this._busyWarningBox) {
          this._busyWarningBox= 
            document.getAnonymousElementByAttribute(this,
                                                    "sbid",
                                                    "sb-device-tools-busy-device-warning");
        }

        if(!this._busyWarningDesc) {
          this._busyWarningDesc = 
            document.getAnonymousElementByAttribute(this,
                                                    "sbid",
                                                    "sb-device-tools-busy-device-warning-desc");
        }
        
        if(this.device.isBusy) {
          if(this._busyWarningText) {
            this._busyWarningDesc.removeChild(this._busyWarningText);
            this._busyWarningText = null;
          }
          var warningDesc = SBFormattedString('device.tools.update_firmware.busy_warning', 
                                              [this.device.name]);
          this._busyWarningText = document.createTextNode(warningDesc);
          this._busyWarningDesc.appendChild(this._busyWarningText);
          this._busyWarningBox.hidden = false;
          this._updateFirmwareButton.disabled = true;
        }
        else {
          this._busyWarningBox.hidden = true;
          this._updateFirmwareButton.disabled = false;
        }          
        ]]></body>
      </method>

      <method name="_startBusyCheck">
        <body><![CDATA[
          if(!this._busyCheckTimer) {
            var self = this;
            this._busyCheckTimer = setInterval(function() { self._updateBusyState(); }, 1000);
          }
        ]]></body>
      </method>

      <method name="_propertyLookup">
        <body><![CDATA[
          if(!this._firmwareHandler) {
            // no handler
            for each (let id in ["support", "update", "register"]) {
              this._getToolBox(id).collapsed = true;
            }
          }
          else {
            // Now hide irrelevant tool boxes, and check for an update
            try {
              var firmHandler = this._firmwareHandler;
              if (firmHandler && firmHandler.registerLocation == null) {
                this._getToolBox("register").collapsed = true;
              }
              if (!firmHandler || !firmHandler.canUpdate(this.device)) {
                this._getToolBox("update").collapsed = true;
                this._getToolBox("repair").collapsed = true;
              }
              if (firmHandler && firmHandler.customerSupportLocation == null) {
                this._getToolBox("support").collapsed = true;
              }
            } catch (e) {
              Components.utils.reportError(e);
            }
          }
        ]]></body>
      </method>
      
      <method name="_getToolBox">
        <parameter name="aID"/>
        <body>
          return document.getAnonymousElementByAttribute(this, "tool", aID);
        </body>
      </method>

    </implementation>

    <handlers>
      <handler event="deviceBound" 
               action="this._update(); this._propertyLookup();"/>
    </handlers>
  </binding>

</bindings>
