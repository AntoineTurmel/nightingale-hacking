<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
 */
-->

<!-- Import external definitions. -->
<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd">

<bindings
      xmlns="http://www.mozilla.org/xbl"
      xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
      xmlns:xbl="http://www.mozilla.org/xbl">

  <!-- *************************************************************************
   *****************************************************************************
   *
   * This is a groupbox to hold the disk management prefs for one device library
   * Note that theoretically you might get multiple instances of this per page
   * (because a device might have multiple libraries).
   *
   *****************************************************************************
   ************************************************************************* -->

  <binding id="sb-device-management"
           extends="chrome://songbird/content/bindings/device/deviceControl.xml#sb-device-control">

    <!-- ***********************************************************************
     *
     * Content.
     *
     *********************************************************************** -->

    <content>
      <!--
        - expects to have the following attributes:
        - "device-id"
        - "library-id"
        -->
      <xul:groupbox flex="1">
        <xul:caption label="&device.settings.disk.label;"/>
        <xul:vbox>
          <xul:checkbox sbid="space_limit_enable"
                        oncommand="toggleLimitSpaceCheckbox();"/>

          <xul:spacer height="5"/>
          <xul:scale sbid="space_limit"
                     class="indent" min="0" max="100"/>
          <xul:spacer height="10" flex="1"/>
        </xul:vbox>
        <xul:vbox>
          <xul:checkbox sbid="mgmt_enable"
                        label="&device.settings.disk.management.label;"/>
          <xul:hbox class="indent">
            <xul:sb-properties-formatter sbid="mgmt_dir_format"
                maxProperties="3" trailingSeparator="true"
                propertyCategory="songbird-media-manager-directory-name-properties">
              <xul:label value="&device.settings.disk.management.filename;"/>
            </xul:sb-properties-formatter>
            <xul:spacer flex="1"/>
          </xul:hbox>
        </xul:vbox>
      </xul:groupbox>
    </content>


    <!-- ***********************************************************************
     *
     * Implementation.
     *
     *********************************************************************** -->

    <implementation>

      <property name="_prefRoot" readonly="true">
        <getter>
          return "songbird.device." +
                 this.deviceID +
                 ".preferences.library." +
                 this.libraryID;
        </getter>
      </property>
      <property name="_devicePrefRoot" readonly="true">
        <getter>
          return "library." + this.libraryID;
        </getter>
      </property>
      <property name="_formatDirPrefName" readonly="true">
        <getter>
          return "songbird.device." +
                 this.deviceID +
                 ".preferences.library." +
                 this.libraryID +
                 ".media_management.library.format.dir";
        </getter>
      </property>
      <property name="deviceID" readonly="true">
        <getter>
          return this.getAttribute("device-id");
        </getter>
      </property>
      <property name="libraryID" readonly="true">
        <getter>
          return this.getAttribute("library-id");
        </getter>
      </property>

      <property name="_formatter" readonly="true">
        <getter>
          return document.getAnonymousElementByAttribute(this,
                                                         "sbid",
                                                         "mgmt_dir_format");
        </getter>
      </property>

      <property name="_scale" readonly="true">
        <getter>
          return document.getAnonymousElementByAttribute(this,
                                                         "sbid",
                                                         "space_limit");
        </getter>
      </property>

      <property name="_limitSpaceCheckbox" readonly="true">
        <getter>
          return document.getAnonymousElementByAttribute(this,
                                                         "sbid",
                                                         "space_limit_enable");
        </getter>
      </property>

      <!--
       * constructor
       *
       *   This method constructs the widget.
       -->

      <constructor> <![CDATA[
      {
        Components.utils.import("resource://app/jsmodules/sbStorageFormatter.jsm", this);
        this.reset();

        var self = this;
        this._scale.addEventListener("change",
                                     function() { self.onSpaceLimitChanged() },
                                     false);
      }
      ]]></constructor>


      <!--
       * destructor
       *
       *   This method destroys the widget.
       -->

      <destructor> <![CDATA[
      {
        if (this.device) {
          this.device = null;
        }
      }
      ]]></destructor>

      <method name="save">
        <body> <![CDATA[
          var formatDirPrefName =
            this._prefRoot + ".media_management.library.format.dir";
          Application.prefs.setValue(formatDirPrefName, this._formatter.value);

          var enabledPrefName = this._prefRoot + ".media_management.enabled";
          var enabledCheckbox =
            document.getAnonymousElementByAttribute(this, "sbid", "mgmt_enable");
          Application.prefs.setValue(enabledPrefName,
                                     enabledCheckbox.checked);

          // Save the device's storage settings
          this._saveStorageScaleSetting();
        ]]></body>
      </method>

      <method name="reset">
        <body> <![CDATA[
          var enabledPrefName = this._prefRoot + ".media_management.enabled";
          document.getAnonymousElementByAttribute(this, "sbid", "mgmt_enable")
                  .checked =
                    Application.prefs.getValue(enabledPrefName, false);
          var defaultValue =
            Application.prefs.getValue("songbird.media_management.library.format.dir",
                                       "");
          // need to wait for the element to be constructed :|
          var formatDirPrefName =
            this._prefRoot + ".media_management.library.format.dir";
          setTimeout(function(self){
            self._formatter.value = Application.prefs.getValue(formatDirPrefName,
                                                               defaultValue);
          }, 0, this);

          // Set the scale to the device's current value.
          var self = this;
          setTimeout(function() { self._resetStorageScale(); }, 100);
        ]]></body>
      </method>

      <method name="toggleLimitSpaceCheckbox">
        <body><![CDATA[
          this._scale.disabled = !this._limitSpaceCheckbox.checked;
        ]]></body>
      </method>

      <method name="onSpaceLimitChanged">
        <body><![CDATA[
          // Get the device capacity.
          var capacity = 0;
          try {
            capacity = this.device.properties.properties.getPropertyAsInt64
              ("http://songbirdnest.com/device/1.0#capacity");
          } catch (ex) {};

          var limitPercentage = parseInt(this._scale.getAttribute("value"));
          if (capacity > 0) {
            capacity = ((capacity * limitPercentage) / 100);
          }

          capacity = StorageFormatter.format(capacity);

          this._limitSpaceCheckbox.label =
            SBFormattedString("device.settings.limit_disk_space",
                              [this._scale.getAttribute("value"),
                               capacity]);
        ]]></body>
      </method>

      <method name="_resetStorageScale">
        <body><![CDATA[
          var spaceSettingsVariant =
            this.device.getPreference(
                this._devicePrefRoot + ".music_limit_percent");

          var percentValue = 100;
          if (spaceSettingsVariant) {
            percentValue = spaceSettingsVariant;
          }
          this._scale.setAttribute("value", percentValue);

          var shouldLimit =
            this.device.getPreference(
                this._devicePrefRoot + ".use_music_limit_percent");

          this._scale.disabled = !shouldLimit;
          this._limitSpaceCheckbox.checked = shouldLimit;
        ]]></body>
      </method>

      <method name="_saveStorageScaleSetting">
        <body><![CDATA[
          var percentValue = this._scale.getAttribute("value");
          this.device.setPreference(
              this._devicePrefRoot + ".music_limit_percent",
              parseInt(percentValue));

          this.device.setPreference(
              this._devicePrefRoot + ".use_music_limit_percent",
              this._limitSpaceCheckbox.checked);
        ]]></body>
      </method>

    </implementation>


    <!-- ***********************************************************************
     *
     * Handlers.
     *
     *********************************************************************** -->

    <handlers>
      <handler event="deviceBound"><![CDATA[
      ]]></handler>
    </handlers>

  </binding>

</bindings>
