<?xml version="1.0" encoding="UTF-8"?>
<!--
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */
-->

<!-- Import external definitions. -->
<!DOCTYPE window [
<!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd">
<!ENTITY % songbirdDTD SYSTEM "chrome://songbird/locale/songbird.dtd">
%brandDTD;
%songbirdDTD;
]>

<bindings
      xmlns="http://www.mozilla.org/xbl"
      xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
      xmlns:xbl="http://www.mozilla.org/xbl">

  <!-- *************************************************************************
   *****************************************************************************
   *
   * Management toggle widget.
   *
   *****************************************************************************
   ************************************************************************* -->

  <binding id="sb-device-management-toggle"
    extends="chrome://songbird/content/bindings/device/deviceControl.xml#sb-device-control">

    <!-- ***********************************************************************
     *
     * Content.
     *
     *********************************************************************** -->

    <content>
      <xul:button sbid="sync_manual_button"
                  type="radio"
                  autoCheck="false"
                  group="device-syncmode"
                  label="&command.device.syncmode.manual;"
                  accesskey="&command.device.syncmode.manual.accesskey;"
                  class="device-syncmode-manual-button"
                  oncommand="toggleMode(true, this);"/>

      <xul:hbox class="device-syncmode-separator" />

      <xul:button sbid="sync_auto_button"
                  type="radio"
                  autoCheck="false"
                  group="device-syncmode"
                  label="&command.device.syncmode.auto;"
                  accesskey="&command.device.syncmode.auto.accesskey;"
                  class="device-syncmode-auto-button"
                  oncommand="toggleMode(false, this);"/>
    </content>

    <!-- ***********************************************************************
     *
     * Implementation.
     *
     *********************************************************************** -->

    <implementation implements="sbIDeviceEventListener">

      <destructor> <![CDATA[
        this.deviceFinalize();
      ]]></destructor>

      <!--
       * \brief toggles the managment mode between manual and auto states, the
       * setMgmtTypes takes care of setting to the correct auto type of either
       * playlist or all.
       * \param aManual true to set manual mode, false for auto.
       * \param aButton button that was clicked to cause this action (so we can
       *  prevent multiple clicks.
      -->
      <method name="toggleMode">
        <parameter name="aManual"/>
        <parameter name="aButton"/>
        <body><![CDATA[
          if (aButton.checked)
            return; // Ignore clicks on an already toggled button.

          if (this.devLib) {
            this.updateButtons(aManual);

            if (aManual) {
              this.devLib.tempSyncSettings.syncMode =
                Ci.sbIDeviceLibrarySyncSettings.SYNC_MODE_MANUAL;
            }
            else {
              var prompter = Cc["@songbirdnest.com/Songbird/Prompter;1"]
                               .createInstance(Ci.sbIPrompter);
              var buttonFlags =
                Ci.nsIPromptService.BUTTON_POS_1 *
                Ci.nsIPromptService.BUTTON_TITLE_IS_STRING +
                Ci.nsIPromptService.BUTTON_POS_0 *
                Ci.nsIPromptService.BUTTON_TITLE_IS_STRING;

              var buttonPressed = prompter.confirmEx(
                null,
                SBString("device.dialog.sync_confirmation.change.title"),
                SBFormattedString("device.dialog.sync_confirmation.change.msg",
                                  [this.device.name]),
                buttonFlags,
                SBString("device.dialog.sync_confirmation.change.sync_button"),
                SBString("device.dialog.sync_confirmation.change.no_button"),
                null,
                null,
                {});

              if (buttonPressed == 0) {
                // Toggle to auto
                this.devLib.tempSyncSettings.syncMode =
                  Ci.sbIDeviceLibrarySyncSettings.SYNC_MODE_AUTO;
              }
            }
            this.update();
          }
        ]]></body>
      </method>

      <!--
       * \brief returns an element based on sbid=aElementID
       * \param aElementID sbid of the element to return.
      -->
      <method name="getElement">
        <parameter name="aElementID"/>
        <body><![CDATA[
          return document.getAnonymousElementByAttribute(this,
                                                         "sbid",
                                                         aElementID);
        ]]></body>
      </method>

      <!--
       * \brief updates the buttons according to the state requested.
       * \param aManual true to set manual button, false for auto.
      -->
      <method name="updateButtons">
        <parameter name="aManual"/>
        <body><![CDATA[
          var manualButton = this.getElement("sync_manual_button");
          var syncButton = this.getElement("sync_auto_button");
          manualButton.checked = aManual;
          syncButton.checked = !(aManual);
        ]]></body>
      </method>

      <!--
       * \brief updates the buttons according to the device state.
      -->
      <method name="update">
        <body><![CDATA[
          // Determine whether or not we have any media mounted
          var manualButton = this.getElement("sync_manual_button");
          var syncButton = this.getElement("sync_auto_button");
          if (this.device && this.device.content.libraries.length > 0) {
            manualButton.removeAttribute("disabled");
            syncButton.removeAttribute("disabled");

            // Get the device management state
            if (this.devLib) {
              var isManual = (this.devLib.tempSyncSettings.syncMode ==
                              Ci.sbIDeviceLibrarySyncSettings.SYNC_MODE_MANUAL);
              this.updateButtons(isManual);
            }
          } else {
            manualButton.setAttribute("disabled", "true");
            syncButton.setAttribute("disabled", "true");
          }
        ]]></body>
      </method>

      <!--
       * \brief Sets up the listener and gets the library from the device.
      -->
      <method name="deviceInitialize">
        <body><![CDATA[
          // Add a listener for status operations
          if (this.device) {
            var deviceEventTarget = this.device;
            deviceEventTarget.QueryInterface(Ci.sbIDeviceEventTarget);
            deviceEventTarget.addEventListener(this);
          }
          this.update();
        ]]></body>
      </method>

      <!--
       * \brief cleans up device information, removes listener.
      -->
      <method name="deviceFinalize">
        <body><![CDATA[
          // Clear object fields.
          if (this.device) {
            var deviceEventTarget = this.device;
            deviceEventTarget.QueryInterface(Ci.sbIDeviceEventTarget);
            deviceEventTarget.removeEventListener(this);
          }
        ]]></body>
      </method>

      <!--
       * \brief watch for preference changes and update.
      -->
      <method name="onDeviceEvent">
        <parameter name="aEvent" />
        <body><![CDATA[
          // Dispatch processing of the event.
          switch(aEvent.type)
          {
            case Components.interfaces
                           .sbIDeviceEvent
                           .EVENT_DEVICE_PREFS_CHANGED :
              this.update();
              break;

            case Components.interfaces
                           .sbIDeviceEvent
                           .EVENT_DEVICE_STATE_CHANGED :
              this.update();
              break;

            default :
              break;
          }
        ]]></body>
      </method>

    </implementation>


    <!-- ***********************************************************************
     *
     * Handlers.
     *
     *********************************************************************** -->

    <handlers>
      <handler event="devLibBound"><![CDATA[
        /* Re-initialize the widget. */
        this.deviceFinalize();
        this.deviceInitialize();
      ]]></handler>
    </handlers>

  </binding>

</bindings>
