<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// CopyrightÂ© 2006 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <!-- GENERIC REMOTE DISPLAY -->

  <binding id="remote_label">
  
    <content>
      <xul:label sbid="label" xbl:inherits="id=id,class=class,value=value,align=align,crop=crop,disabled=disabled,flex=flex" /> 
    </content>

    <implementation>

      <constructor>
        <![CDATA[
        ]]>
      </constructor>

      <destructor>
        <![CDATA[
          //SB_LOG("remote_label.js", "remote_label destructor");
          if (this.bind) {
            this.bind.unbind();
            this.bind = null;
          }
        ]]>
      </destructor>

      <field name="label">this</field>

      <property name="data">
        <getter>
          <![CDATA[
            return this.getAttribute("data");
          ]]>
        </getter>
        <setter>
          <![CDATA[
            //SB_LOG("remote_label.js", "remote_label data setter");
            this.setAttribute("data", val);
            if (this.bind) {
              this.bind.unbind();
              this.bind = null;
            }
            if (val != "") 
              this.bind = SBDataBindElementAttribute ( val, this, "value" );
          ]]>
        </setter>
      </property>
      
    </implementation>
    
  </binding>


  <!-- bind to a string of ';'-seperated data points -->
  <binding id="multiremote_label">
  
    <content>
      <xul:label sbid="label" xbl:inherits="id=id,class=class,value=value,align=align,crop=crop,disabled=disabled,flex=flex" /> 
    </content>

    <implementation>

      <constructor>
        <![CDATA[
          this.dataArray = new Array();
        ]]>
      </constructor>

      <destructor>
        <![CDATA[
          //SB_LOG("remote_label.js", "multiremote_label destructor");
          if (this.dataArray.length > 0) {
            for ( var datum in this.dataArray ) {
              this.dataArray[datum].unbind();
              this.dataArray[datum] = null;
            }
          }
        ]]>
      </destructor>

      <field name="label">document.getAnonymousElementByAttribute(this, 'sbid', 'label');</field>

      <property name="data">
        <getter>
          <![CDATA[
            return this.getAttribute("data");
          ]]>
        </getter>
        <setter>
          <![CDATA[
            this.setAttribute("data", val);

            // remove the existing bindings
            if (this.dataArray.length > 0) {
              for ( var datum in this.dataArray ) {
                this.dataArray[datum].unbind();
                this.dataArray[datum] = null;
              }
            }

            // bind to the new bindings
            var strArray = val.split(";");
            for ( var datum in strArray ) {
              this.dataArray[datum] = SBDataBindElementProperty ( datum, this.label, "value" );
            }
          ]]>
        </setter>
      </property>
      
    </implementation>
    
  </binding>


</bindings>

